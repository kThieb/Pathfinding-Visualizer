{"version":3,"sources":["icon/right-thin-chevron-svgrepo-com.svg","GridNode/GridNode.tsx","helperFunctions/ensureNotUndefined.ts","Grid/Grid.tsx","NavBar/NavBar.tsx","helperFunctions/shortestPathAlgorithms/retrievePath.ts","helperFunctions/dataStructures/binaryHeap.ts","helperFunctions/shortestPathAlgorithms/aStar.ts","helperFunctions/shortestPathAlgorithms/allAlgorithms.ts","helperFunctions/shortestPathAlgorithms/dfs.ts","helperFunctions/shortestPathAlgorithms/bfs.ts","helperFunctions/shortestPathAlgorithms/dijkstra.ts","helperFunctions/mazeGenerators/mazeGraph.ts","helperFunctions/constructGrid.ts","Wrapper/Wrapper.tsx","Visualizer/Visualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref","svgRef","title","props","id","x","y","viewBox","style","enableBackground","xmlSpace","ref","fill","d","ForwardRef","forwardRef","getAddedClassName","neighbors","node","addedClassName","neighbor","neighborX","neighborY","distance","hasCheese","isShortestPath","isVisited","GridNode","React","memo","numberOfElementsPerRow","handleMouseDown","mouseState","handleMouseEnter","className","onMouseDown","e","onMouseEnter","role","isStart","successorPosition","prevProps","nextProps","ensure","argument","message","undefined","TypeError","Grid","grid","maze","pairGrid","map","row","rowLength","index","get","NavBar","children","NavButton","addedClassNames","startClassName","visualizingClassName","visualizedClassName","isVisualized","onClick","handleClick","text","NavItem","useState","open","setOpen","shouldGreyOut","event","document","addEventListener","dropDownMenu","getElementById","targetElement","parentNode","DropDownMenu","height","DropDownItem","leftIcon","rightIcon","DropDownSlider","defaultValue","type","value","min","minValue","toString","max","maxValue","step","onChange","handleChange","retrievePath","predecessor","startNode","endNode","shortestPath","current","console","log","unshift","BinaryHeap","compare","content","element","push","bubbleUp","result","end","pop","sinkDown","n","parentN","Math","floor","parent","child2N","child1N","swap","manhattanDistance","a","b","abs","algorithms","mazeGraph","m","visited","discovered","stack","currentNode","find","visitedNode","discoveredNode","nextNode","q","shift","distances","j","Number","MAX_SAFE_INTEGER","pq","size","currentX","currentY","currentDistance","remove","dA","dB","generateMazeGraph","columnLength","wallsDensity","mudDensity","mudWeight","MUD_WEIGHT","pairRow","Map","set","createMazeGraph","currentWallsCount","maxWallsOrMud","currentNonVisitedNeighbors","getNeighbors","neighborNode","random","maxWallsCount","randRow","randCol","getWalledOffNeighbors","randIndex","currentMud","maxMud","filter","item","neighborNodeNeighbors","dir","includes","findCallback","constructGrid","numberOfRow","numberOfColumn","currentRow","WrapperCSSTransition","handleEnter","nodeRef","useRef","CSSTransition","onEnter","isAppearing","el","offsetHeight","firstGrid","firstStartNode","firstEndNode","firstpairGrid","Visualizer","setGrid","setMaze","setPairGrid","algorithm","setAlgorithm","setWallsDensity","setMudDensity","setIsVisualized","setMudWeight","setStartNode","endNodeList","setEndNodeList","algoActiveMenu","setAlgoActiveMenu","setHeight","mouseIsPressed","setMouseIsPressed","getSuccessorPosition","successor","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","onMouseUp","newGrid","newStartNode","newEndNode","slice","newPairGrid","newMaze","path","setTimeout","newNode","visualizeAlgorithm","in","unmountOnExit","timeout","classNames","appear","toggleStartNode","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1c7fa517.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar SvgRightThinChevronSvgrepoCom = function SvgRightThinChevronSvgrepoCom(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 185.343 185.343\",\n    style: {\n      enableBackground: \"new 0 0 185.343 185.343\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M51.707,185.343c-2.741,0-5.493-1.044-7.593-3.149c-4.194-4.194-4.194-10.981,0-15.175 l74.352-74.347L44.114,18.32c-4.194-4.194-4.194-10.987,0-15.175c4.194-4.194,10.987-4.194,15.18,0l81.934,81.934 c4.194,4.194,4.194,10.987,0,15.175l-81.934,81.939C57.201,184.293,54.454,185.343,51.707,185.343z\"\n  }))), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgRightThinChevronSvgrepoCom, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/right-thin-chevron-svgrepo-com.e4144d1e.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { ReactComponent as ChevronRightIcon } from \"../icon/right-thin-chevron-svgrepo-com.svg\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [[number, number], number][];\n  mouseState: boolean;\n  handleMouseDown: (x: number, y: number) => void;\n  handleMouseEnter: (x: number, y: number) => void;\n}\n\nconst getAddedClassName: (\n  neighbors: [[number, number], number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [[number, number], number] = neighbors[i];\n    let neighborX = neighbor[0][0],\n      neighborY = neighbor[0][1],\n      distance: number = neighbor[1];\n    if (neighborX === node.x + 1)\n      addedClassName += distance === 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n    if (neighborX === node.x - 1)\n      addedClassName += distance === 1 ? \" no-wall-top\" : \" mud-top\";\n    if (neighborY === node.y + 1)\n      addedClassName += distance === 1 ? \" no-wall-right\" : \" mud-right\";\n    if (neighborY === node.y - 1)\n      addedClassName += distance === 1 ? \" no-wall-left\" : \" mud-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter,\n}) => {\n  return (\n    <div\n      className={\"grid-node\" + getAddedClassName(neighbors, node)}\n      onMouseDown={(e) => handleMouseDown(node.x, node.y)}\n      onMouseEnter={(e) => handleMouseEnter(node.x, node.y)}\n    >\n      <span\n        role=\"img\"\n        className={node.isStart || node.hasCheese ? \"content\" : \"\"}\n      >\n        {(node.isStart ? \"🐀\" : \"\") + (node.hasCheese ? \"🧀\" : \"\")}\n      </span>\n      <div className={\"svg-chevron \" + node.successorPosition}>\n        {node.isShortestPath && !(node.isStart || node.hasCheese) ? (\n          <ChevronRightIcon />\n        ) : (\n          <span></span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node) &&\n    prevProps.node === nextProps.node &&\n    prevProps.mouseState === nextProps.mouseState\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n","// This function is here to ensure that a value is not undefined (especially when using arrays).\nexport function ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n  return argument;\n}\n","import React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { ensure } from \"../helperFunctions/ensureNotUndefined\";\n\ninterface Props {\n  grid: node[][];\n  maze: Map<[number, number], [[number, number], number][]>;\n  pairGrid: [number, number][][];\n  mouseState: boolean;\n  handleMouseDown: (x: number, y: number) => void;\n  handleMouseEnter: (x: number, y: number) => void;\n}\n\nexport const Grid: React.FC<Props> = ({\n  grid,\n  maze,\n  pairGrid,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter,\n}) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return (\n    <div className=\"grid\">\n      {grid.map((row, id) => {\n        let rowLength = row.length;\n        return (\n          <div className=\"row\" key={id}>\n            {row.map((node, index) => (\n              <GridNode\n                numberOfElementsPerRow={rowLength}\n                key={id + index * rowLength}\n                node={node}\n                neighbors={ensure(maze.get(pairGrid[node.x][node.y]))}\n                mouseState={mouseState}\n                handleMouseDown={handleMouseDown}\n                handleMouseEnter={handleMouseEnter}\n              ></GridNode>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./NavBar.css\";\n\nexport const NavBar: React.FC = (props) => {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n};\n\ninterface NavButtonProps {\n  text: string;\n  isVisualized: number;\n  className: string;\n  startClassName?: string;\n  visualizingClassName: string;\n  visualizedClassName: string;\n  handleClick: () => void;\n}\n\nexport const NavButton: React.FC<NavButtonProps> = (props) => {\n  const addedClassNames: string[] = [\n    props.startClassName ? props.startClassName : \"\",\n    props.visualizingClassName,\n    props.visualizedClassName,\n  ];\n\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        addedClassNames[props.isVisualized] +\n        \" \" +\n        props.className\n      }\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\ninterface NavItemProps {\n  text: string;\n  id: string;\n  isVisualized: number;\n  shouldGreyOut: boolean;\n}\n\nexport const NavItem: React.FC<NavItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n\n  const handleClick: (e: any) => void = (event) => {\n    if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    document.addEventListener(\"click\", (e) => {\n      const dropDownMenu = document.getElementById(props.id);\n      let targetElement = e.target as Element;\n\n      do {\n        if (targetElement === dropDownMenu) return;\n        targetElement = targetElement.parentNode as Element;\n      } while (targetElement);\n      setOpen(false);\n    });\n  };\n\n  return (\n    <li\n      id={props.id}\n      className={\n        \"nav-item\" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n    >\n      <p className=\"icon-button\" onClick={handleClick}>\n        {props.text}\n      </p>\n      {open && props.children}\n    </li>\n  );\n};\n\ninterface DropDownMenu {\n  height?: number;\n}\n\nexport const DropDownMenu: React.FC<DropDownMenu> = (props) => {\n  return (\n    <div className=\"dropdown\" style={{ height: props.height }}>\n      {props.children}\n    </div>\n  );\n};\n\ninterface DropDownAlgoProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  handleClick: () => void;\n}\n\nexport const DropDownItem: React.FC<DropDownAlgoProps> = (props) => {\n  return (\n    <div\n      className=\"menu-item\"\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <span>{props.leftIcon ? props.leftIcon : \"\"}</span>\n      {props.children}\n      <span>{props.rightIcon ? props.rightIcon : \"\"}</span>\n    </div>\n  );\n};\n\ninterface DropDownSliderProps {\n  minValue: number;\n  maxValue: number;\n  step: number;\n  defaultValue: number;\n  text: string;\n  handleChange: (event: any) => void;\n}\n\nexport const DropDownSlider: React.FC<DropDownSliderProps> = (props) => {\n  return (\n    <div className=\"slider-item\">\n      <div className=\"slider-item-text\">\n        <div>\n          <span>{props.text}</span>\n        </div>\n        <div className=\"slider-value\">\n          <span>{props.defaultValue}</span>\n        </div>\n      </div>\n      <input\n        className=\"slider\"\n        type=\"range\"\n        value={props.defaultValue}\n        min={props.minValue.toString()}\n        max={props.maxValue.toString()}\n        step={props.step}\n        onChange={(e) => props.handleChange(e.target.value)}\n      ></input>\n    </div>\n  );\n};\n","import { node } from \"../usefulInterfaces\";\n\nexport const retrievePath: (\n  predecessor: node[],\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, startNode, endNode) => {\n  let shortestPath = [endNode];\n  let current: node = endNode;\n  console.log(predecessor);\n  console.log(endNode);\n  while (current.x !== startNode.x || current.y !== startNode.y) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n\n  return shortestPath;\n};\n","import { ensure } from \"../ensureNotUndefined\";\n\nexport class BinaryHeap<T> {\n  content: ([T, number] | undefined)[];\n  compare: (a: [T, number], b: [T, number]) => boolean;\n  index: number;\n\n  constructor(compare: (a: [T, number], b: [T, number]) => boolean) {\n    this.content = [];\n    this.index = 1;\n    this.compare = compare;\n  }\n\n  push(element: T) {\n    this.content.push([element, this.index++]);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop(): T | undefined {\n    let result: [T, number] = ensure(this.content[0]);\n    let end: [T, number] | undefined = this.content.pop();\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return ensure(result)[0];\n  }\n\n  remove(node: T) {\n    let length: number = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (let i: number = 0; i < length; i++) {\n      if (ensure(this.content[i])[0] !== node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      let end: [T, number] | undefined = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i === length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  private bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    let element: [T, number] = ensure(this.content[n]);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN: number = Math.floor((n + 1) / 2) - 1,\n        parent: [T, number] = ensure(this.content[parentN]);\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      // if (\n      //   score > this.scoreFunction(ensure(parent)[0]) ||\n      //   (score === this.scoreFunction(ensure(parent)[0]) &&\n      //     ensure(element)[1] > ensure(parent)[1])\n      // )\n      //   break;\n      if (this.compare(parent, element)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  private sinkDown(n: number) {\n    // Look up the target element and its score.\n    let length: number = this.content.length,\n      element: [T, number] = ensure(this.content[n]);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N: number = (n + 1) * 2,\n        child1N: number = child2N - 1;\n      let swap: number = n;\n      // This is used to store the new position of the element, if any.\n      // If the first child exists (is inside the array)...\n      if (\n        child1N < length &&\n        this.compare(ensure(this.content[child1N]), element)\n      )\n        swap = child1N;\n      if (\n        child2N < length &&\n        this.compare(ensure(this.content[child2N]), ensure(this.content[swap]))\n      )\n        swap = child2N;\n\n      // If the order is good, we exit the loop\n      if (swap === n) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n}\n","import { node } from \"../usefulInterfaces\";\nimport { BinaryHeap } from \"../dataStructures/binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const aStar: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      let dA: number = manhattanDistance(a[0], endNode),\n        dB: number = manhattanDistance(b[0], endNode);\n      if (distances[a[0].x][a[0].y] + dA !== distances[b[0].x][b[0].y] + dB) {\n        return distances[a[0].x][a[0].y] + dA < distances[b[0].x][b[0].y] + dB;\n      }\n      return a[1] < b[1];\n    }\n  );\n\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n  return [visited, []];\n};\n\nconst manhattanDistance: (a: node, b: node) => number = (a, b) => {\n  return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n};\n","import { node } from \"../usefulInterfaces\";\nimport { dfs } from \"./dfs\";\nimport { bfs } from \"./bfs\";\nimport { dijkstraWithWalls } from \"./dijkstra\";\nimport { aStar } from \"./aStar\";\n\nexport const algorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    targetNode: node\n  ) => [node[], node[]];\n} = {\n  \"Depth First Search\": dfs,\n  \"Breadth First Search\": bfs,\n  \"Dijkstra's algorithm\": dijkstraWithWalls,\n  \"A* algorithm\": aStar,\n};\n","import { node } from \"../usefulInterfaces\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const dfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the stack\n  let stack: node[] = [startNode];\n\n  // While the stack is not empty\n  while (stack.length > 0) {\n    // Get the element in front of the stack\n    let currentNode: node = ensure(stack.pop());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the node is on the board\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the discovered array\n      discovered.push(nextNode);\n\n      // Push the nextNode to the stack\n      stack.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n","import { node } from \"../usefulInterfaces\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n","import { node } from \"../usefulInterfaces\";\nimport { BinaryHeap } from \"../dataStructures/binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const dijkstraWithWalls: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER - 1);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      if (distances[a[0].x][a[0].y] !== distances[b[0].x][b[0].y]) {\n        return distances[a[0].x][a[0].y] < distances[b[0].x][b[0].y];\n      }\n      return a[1] < b[1];\n    }\n  );\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n\n  return [visited, []];\n};\n","import { ensure } from \"../ensureNotUndefined\";\nimport { node } from \"../usefulInterfaces\";\n\nconst createMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [\n  [number, number][][],\n  Map<[number, number], [[number, number], number][]>\n] = (rowLength, columnLength, grid) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n\n  // Create the maze graph\n  let mazeGraph: Map<\n    [number, number],\n    [[number, number], number][]\n  > = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n\n  return [pairGrid, mazeGraph];\n};\n\nexport const createEmptyMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      let neighbors: [number, number][] = getNeighborsEmpty(\n        pairGrid,\n        [i, j],\n        columnLength,\n        rowLength\n      );\n\n      mazeGraph.set(pairGrid[i][j], neighbors);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const generateMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][],\n  wallsDensity: number,\n  mudDendity: number,\n  mudWeigth: number\n) => [\n  [number, number][][],\n  Map<[number, number], [[number, number], number][]>\n] = (rowLength, columnLength, grid, wallsDensity, mudDensity, mudWeight) => {\n  const MUD_WEIGHT = mudWeight;\n\n  let [pairGrid, mazeGraph]: [\n    [number, number][][],\n    Map<[number, number], [[number, number], number][]>\n  ] = createMazeGraph(rowLength, columnLength, grid);\n\n  let currentWallsCount: number =\n      2 * (rowLength - 1) * (columnLength - 1) + rowLength + columnLength - 2,\n    maxWallsOrMud = currentWallsCount;\n\n  // I. Generate a maze where each cells is reachable (with a DFS)\n\n  // 1. Choose the initial cell, mark it as visited and push it to the stack\n  let startNode: [number, number] = pairGrid[0][0];\n  let stack: [number, number][] = [startNode];\n  let visited: [number, number][] = [startNode];\n\n  // 2. While the stack is not empty\n  while (stack.length > 0) {\n    // 1. Pop a cell from the stack and make it a current cell\n    let currentNode: [number, number] = ensure(stack.pop());\n    let currentNonVisitedNeighbors: [number, number][] = getNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      visited\n    );\n    // 2. If the current cell has any neighbours which have not been visited\n    if (currentNonVisitedNeighbors.length > 0) {\n      // 1. Push the current cell to the stack\n      stack.push(currentNode);\n\n      // 2. Choose one of the unvisited neighbours\n      let randIndex: number = Math.floor(\n        Math.random() * currentNonVisitedNeighbors.length\n      );\n      let neighborNode: [number, number] =\n        currentNonVisitedNeighbors[randIndex];\n\n      // 3. Remove the wall between the current cell and the chosen cell\n      let currentNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push([neighborNode, 1]);\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push([currentNode, 1]);\n\n      // 4. Mark the ch// mazeGraph.set(neighborNode, neighborNodeNeighbors);osen cell as visited and push it to the stack\n      visited.push(neighborNode);\n      stack.push(neighborNode);\n\n      // 5. Remove 1 from the currentWallsCount\n      currentWallsCount--;\n    }\n  }\n\n  // II. Remove walls until the desired density is achieved\n  let maxWallsCount: number = currentWallsCount;\n  while (currentWallsCount * (1 / maxWallsCount) > wallsDensity) {\n    // 1. Choose a node randomly\n    let randRow: number = Math.floor(Math.random() * rowLength);\n    let randCol: number = Math.floor(Math.random() * columnLength);\n    let currentNode: [number, number] = pairGrid[randCol][randRow];\n\n    // 2. Get the cells with a wall with the current cell\n    let neighbors: [number, number][] = getWalledOffNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      mazeGraph\n    );\n\n    if (neighbors.length > 0) {\n      // 3. Choose one of the cells with a wall\n      let randIndex: number = Math.floor(Math.random() * neighbors.length);\n      let neighborNode: [number, number] =\n        pairGrid[neighbors[randIndex][0]][neighbors[randIndex][1]];\n\n      // 4. Remove the wall between the 2 cells\n      let currentNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push([neighborNode, 1]);\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push([currentNode, 1]);\n\n      currentWallsCount--;\n    }\n  }\n\n  // III. Add mud to the graph until we get the desired mud density\n  let currentMud: number = 0,\n    maxMud: number = maxWallsOrMud - currentWallsCount;\n  while (currentMud * (1 / maxMud) < mudDensity) {\n    // 1. Choose a node randomly\n    let randRow: number = Math.floor(Math.random() * rowLength);\n    let randCol: number = Math.floor(Math.random() * columnLength);\n    let currentNode: [number, number] = pairGrid[randCol][randRow];\n\n    // 2. Get the neighbors than have no mud\n    let neighbors: [[number, number], number][] = ensure(\n      mazeGraph.get(currentNode)\n    ).filter((item: [[number, number], number]) => item[1] === 1);\n\n    if (neighbors.length > 0) {\n      // 3. Get a random neighbor\n      let randIndex: number = Math.floor(Math.random() * neighbors.length);\n      let neighborNode: [number, number] =\n        pairGrid[neighbors[randIndex][0][0]][neighbors[randIndex][0][1]];\n\n      neighbors[randIndex][1] = MUD_WEIGHT;\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      let currentNodeAndDistance: [[number, number], number] = ensure(\n        neighborNodeNeighbors.find(\n          (item: [[number, number], number]) => item[0] === currentNode\n        )\n      );\n      currentNodeAndDistance[1] = MUD_WEIGHT;\n      currentMud++;\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nconst getNeighbors: (\n  grid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  visited: [number, number][]\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  visited\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      !visited.includes(pairGrid[neighborX][neighborY])\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\nexport const getNeighborsEmpty: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  columnLength: number,\n  rowLength: number\n) => [number, number][] = (pairGrid, currentNode, columnLength, rowLength) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\n// This function returns the neighbors which have a wall with the current node\nconst getWalledOffNeighbors: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  mazeGraph: Map<[number, number], [[number, number], number][]>\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  mazeGraph\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  const findCallback: (neighbor: [[number, number], number]) => boolean = (\n    neighbor\n  ) => {\n    return neighbor[0] === pairGrid[neighborX][neighborY];\n  };\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      // !mazeGraph.get(currentNode)?.includes(pairGrid[neighborX][neighborY])\n      !mazeGraph.get(currentNode)?.find(findCallback)\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n","import { node } from \"./usefulInterfaces\";\n\n// This function (Not a React Component!) is made to initialize the grid rendered in the App component.\nexport const constructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  endNode: [number, number]\n) => [node[][], node, node] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  endNode\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\",\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  result[endNode[0]][endNode[1]].hasCheese = true;\n  // result = piecesOfCheese(result, numberOfColumn, numberOfRow, 21);\n  return [\n    result,\n    result[startNode[0]][startNode[1]],\n    result[endNode[0]][endNode[1]],\n  ];\n};\n\nconst piecesOfCheese: (\n  grid: node[][],\n  m: number,\n  n: number,\n  cheeseNum: number\n) => node[][] = (grid, m, n, cheeseNum) => {\n  let visited: boolean[][] = new Array(n);\n  for (let i: number = 0; i < n; ++i) {\n    visited[i] = new Array(n);\n  }\n  for (let i: number = 0; i < n; ++i) {\n    for (let j: number = 0; j < n; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[0][0] = true;\n  visited[n - 1][n - 1] = true;\n  for (let k: number = 0; k < cheeseNum / 2; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * n);\n      j = Math.floor(Math.random() * n);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    visited[n - 1 - i][n - 1 - j] = true;\n    grid[i][j].hasCheese = true;\n    grid[n - 1 - i][n - 1 - j].hasCheese = true;\n  }\n  grid[Math.floor(n / 2)][Math.floor(n / 2)].hasCheese = true;\n  return grid;\n};\n","import React, { useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\ninterface WrapperProps {\n  handleEnter: any;\n  timeout: number;\n  classNames: string;\n  in: boolean;\n  unmountOnExit: boolean;\n  appear?: boolean;\n}\n\nexport const WrapperCSSTransition: React.FC<WrapperProps> = ({\n  handleEnter,\n  ...props\n}) => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n\n  // This function calculates the height of a DOM element\n  const calcHeight: (isAppearing: boolean) => void = (isAppearing) => {\n    const el = nodeRef.current;\n    const height: number = el !== null ? el.offsetHeight : 0;\n    handleEnter(height);\n  };\n\n  return (\n    <CSSTransition nodeRef={nodeRef} {...props} onEnter={calcHeight}>\n      <div ref={nodeRef}>{props.children}</div>\n    </CSSTransition>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 80;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  5\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(3);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNodeList, setEndNodeList] = useState([firstEndNode]);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNodeList[0]\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNodeList[0].x, endNodeList[0].y]\n      );\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNodeList([newEndNode]);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  const toggleStartNode: (x: number, y: number) => void = (x, y) => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [x, y],\n      [endNodeList[0].x, endNodeList[0].y]\n    );\n    setStartNode(newStartNode);\n    setEndNodeList([newEndNode]);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n    if (grid[x][y] === startNode) {\n      console.log(\"mouse is pressed\");\n      setMouseIsPressed(true);\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n    if (mouseIsPressed) {\n      console.log(\"entered\");\n      toggleStartNode(x, y);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    console.log(\"mouse is up!\");\n    setMouseIsPressed(false);\n  };\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitializeGrid}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1}\n              maxValue={5}\n              step={1}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/pathfinding-visualizer\" component={Visualizer} />\n          {/* <Route path=\"/react-rat\" component={ReactRat} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import PathFindingVisualizer from \"./Visualizer/PathFindingVisualizer\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}