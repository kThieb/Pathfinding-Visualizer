{"version":3,"sources":["GridNode/GridNode.tsx","Grid/Grid.tsx","NavBar/NavBar.tsx","helper_functions/binaryHeap.ts","helper_functions/shortestPathAlgorithms/retrievePath.ts","helper_functions/shortestPathAlgorithms/dijkstra.ts","helper_functions/shortestPathAlgorithms/allAlgorithms.ts","helper_functions/shortestPathAlgorithms/bfs.ts","helper_functions/mazeGenerators/mazeGraph.ts","helper_functions/constructGrid.ts","Visualizer/Visualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getAddedClassName","neighbors","node","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","isShortestPath","isVisited","GridNode","React","memo","numberOfElementsPerRow","className","isStart","role","aria-label","isEnd","addEmoji","prevProps","nextProps","Grid","grid","maze","pairGrid","map","row","id","rowLength","key","index","ensure","get","argument","message","undefined","TypeError","NavBar","props","children","NavButton","addedClass","isVisualized","visualizingClassName","visualizedClassName","onClick","e","handleClick","text","NavDropDownItem","useState","open","setOpen","shouldGreyOut","event","document","addEventListener","dropDownMenu","getElementById","targetElement","target","parentNode","DropDownMenu","activeMenu","CSSTransition","in","unmountOnExit","timeout","classNames","DropDownAlgo","changeAlgorithm","algorithmName","DropDownSlider","type","value","defaultValue","min","minValue","toString","max","maxValue","step","onChange","handleChange","BinaryHeap","scoreFunction","content","compare","a","b","this","element","push","bubbleUp","result","end","pop","sinkDown","n","parentN","Math","floor","parent","child2N","child1N","swap","retrievePath","predecessor","startNode","endNode","shortestPath","current","unshift","algorithms","bfs","mazeGraph","m","fill","dijkstraWithWalls","distances","j","Number","MAX_SAFE_INTEGER","visited","pq","size","currentNode","currentX","currentY","nextNode","currentDistance","find","remove","createEmptyMazeGraph","columnLength","pairRow","Map","getNeighborsEmpty","set","generateMazeGraph","wallsDensity","createMazeGraph","currentWallsCount","stack","currentNonVisitedNeighbors","getNeighbors","neighborNode","random","maxWallsCount","randRow","getNeighborsII","randIndex","dir","includes","constructGrid","numberOfRow","numberOfColumn","currentRow","firstGrid","firstStartNode","firstEndNode","firstpairGrid","Visualizer","setGrid","setMaze","setPairGrid","algorithm","setAlgorithm","setWallsDensity","setIsVisualized","setStartNode","setEndNode","newGrid","newStartNode","newEndNode","newPairGrid","newMaze","slice","path","setTimeout","newNode","visualizeAlgorithm","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wXAUMA,G,kBAGQ,SAACC,EAAWC,GAExB,IADA,IAAIC,EAAyB,GACpBC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IAAK,CACzC,IAAIE,EAA6BL,EAAUG,GACvCG,EAAYD,EAAS,GACrBE,EAAYF,EAAS,GACrBC,IAAcL,EAAKO,EAAI,IAAGN,GAAkB,mBAC5CI,IAAcL,EAAKO,EAAI,IAAGN,GAAkB,gBAC5CK,IAAcN,EAAKQ,EAAI,IAAGP,GAAkB,kBAC5CK,IAAcN,EAAKQ,EAAI,IAAGP,GAAkB,iBAKlD,OAHID,EAAKS,YAAWR,GAAkB,WAClCD,EAAKU,iBAAgBT,GAAkB,uBACvCD,EAAKW,YAAWV,GAAkB,iBAC/BA,IA8CIW,EAAWC,IAAMC,MA1CY,SAAC,GAIrC,EAHJC,uBAGK,IAFLf,EAEI,EAFJA,KACAD,EACI,EADJA,UAoBA,OACE,yBAAKiB,UAAW,YAAclB,EAAkBC,EAAWC,IAnBvB,SAACA,GACrC,OAAIA,EAAKiB,QAEL,0BAAMC,KAAK,MAAMC,aAAW,MAAMH,UAAU,WAA5C,gBAKAhB,EAAKoB,MAEL,0BAAMF,KAAK,MAAMC,aAAW,MAAMH,UAAU,WAA5C,gBAKG,+BAKJK,CAASrB,OAKkD,SAChEsB,EACAC,GAEA,OACED,EAAUtB,KAAKW,YAAcY,EAAUvB,KAAKW,WAC5CW,EAAUtB,KAAKU,iBAAmBa,EAAUvB,KAAKU,gBACjDZ,EAAkBwB,EAAUvB,UAAWuB,EAAUtB,QAC/CF,EAAkByB,EAAUxB,UAAWwB,EAAUvB,SC1D1CwB,G,MAAwB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAElD,OACE,yBAAKX,UAAU,QACZS,EAAKG,KAAI,SAACC,EAAKC,GACd,IAAIC,EAAYF,EAAI1B,OACpB,OACE,yBAAKa,UAAU,MAAMgB,IAAKF,GACvBD,EAAID,KAAI,SAAC5B,EAAMiC,GAAP,OACP,kBAAC,EAAD,CACElB,uBAAwBgB,EACxBC,IAAKF,EAAKG,EAAQF,EAClB/B,KAAMA,EACND,UAAWmC,EAAOR,EAAKS,IAAIR,EAAS3B,EAAKO,GAAGP,EAAKQ,iBAWjE,SAAS0B,EACPE,GAEI,IADJC,EACG,uDADe,uCAElB,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,E,YCvCII,G,MAAmB,SAACC,GAC/B,OACE,yBAAKzB,UAAU,UACb,wBAAIA,UAAU,cAAcyB,EAAMC,aAe3BC,EAAsC,SAACF,GAClD,IAAIG,EAAqB,IAGzB,OAF2B,IAAvBH,EAAMI,eAAoBD,GAAcH,EAAMK,sBACvB,IAAvBL,EAAMI,eAAoBD,GAAcH,EAAMM,qBAEhD,wBACE/B,UAAW,WAAa4B,EAAa,IAAMH,EAAMzB,UACjDgC,QAAS,SAACC,GACRR,EAAMS,gBAGR,2BAAIT,EAAMU,QAYHC,EAAkD,SAACX,GAAW,IAAD,EAChDY,oBAAS,GADuC,mBACjEC,EADiE,KAC3DC,EAD2D,KAiBxE,OACE,wBACEzB,GAAIW,EAAMX,GACVd,UACE,YACCyB,EAAMe,eAAiBf,EAAMI,aAAe,cAAgB,KAG/D,uBAAG7B,UAAU,cAAcgC,QAtBO,SAACS,GAChChB,EAAMe,eAAkBf,EAAMI,cAAcU,GAASD,GAC1DI,SAASC,iBAAiB,SAAS,SAACV,GAClC,IAAMW,EAAeF,SAASG,eAAepB,EAAMX,IAC/CgC,EAAgBb,EAAEc,OAEtB,EAAG,CACD,GAAID,IAAkBF,EAAc,OACpCE,EAAgBA,EAAcE,iBACvBF,GACTP,GAAQ,QAaLd,EAAMU,MAERG,GAAQb,EAAMC,WAORuB,EAAuC,SAACxB,GAAW,IAAD,EACzBY,mBAAS,QADgB,mBACtDa,EADsD,UAE7D,OACE,yBAAKlD,UAAW,YACd,kBAACmD,EAAA,EAAD,CACEC,GAAmB,SAAfF,EACJG,eAAa,EACbC,QAAS,IACTC,WAAW,gBAEV9B,EAAMC,YAaF8B,EAA4C,SAAC/B,GACxD,OACE,yBACEzB,UAAU,YACVgC,QAAS,SAACC,GACRR,EAAMgC,gBAAgBhC,EAAMiC,iBAG7BjC,EAAMC,WAaAiC,EAAgD,SAAClC,GAC5D,OACE,yBAAKzB,UAAU,eACb,6BACE,2BAAIyB,EAAMU,OAEZ,2BACEnC,UAAU,SACV4D,KAAK,QACLC,MAAOpC,EAAMqC,aACbC,IAAKtC,EAAMuC,SAASC,WACpBC,IAAKzC,EAAM0C,SAASF,WACpBG,KAAM,IACNC,SAAU,SAACpC,GAAD,OAAOR,EAAM6C,aAAarC,EAAEc,OAAOc,Y,wBCzIxCU,EAAb,WAKE,WAAYC,GAAkC,IAAD,gCAJ7CC,aAI6C,OAH7CD,mBAG6C,OAF7CvD,WAE6C,OAM7CyD,QAAuD,SAACC,EAAGC,GACzD,OAAI,EAAKJ,cAAcG,EAAE,MAAQ,EAAKH,cAAcI,EAAE,IAC7C,EAAKJ,cAAcG,EAAE,IAAM,EAAKH,cAAcI,EAAE,IAElDD,EAAE,GAAKC,EAAE,IAThBC,KAAKJ,QAAU,GACfI,KAAKL,cAAgBA,EACrBK,KAAK5D,MAAQ,EARjB,iDAkBO6D,GACHD,KAAKJ,QAAQM,KAAK,CAACD,EAASD,KAAK5D,UACjC4D,KAAKG,SAASH,KAAKJ,QAAQtF,OAAS,KApBxC,4BAwBI,IAAI8F,EAAsB/D,EAAO2D,KAAKJ,QAAQ,IAC1CS,EAA+BL,KAAKJ,QAAQU,MAKhD,OAJIN,KAAKJ,QAAQtF,OAAS,IACxB0F,KAAKJ,QAAQ,GAAKS,EAClBL,KAAKO,SAAS,IAETlE,EAAO+D,GAAQ,KA9B1B,6BAiCSjG,GAIL,IAHA,IAAIG,EAAiB0F,KAAKJ,QAAQtF,OAGzBD,EAAY,EAAGA,EAAIC,EAAQD,IAClC,GAAIgC,EAAO2D,KAAKJ,QAAQvF,IAAI,KAAOF,EAAnC,CAGA,IAAIkG,EAA+BL,KAAKJ,QAAQU,MAGhD,GAAIjG,IAAMC,EAAS,EAAG,MAGtB0F,KAAKJ,QAAQvF,GAAKgG,EAClBL,KAAKG,SAAS9F,GACd2F,KAAKO,SAASlG,GACd,SAlDN,6BAuDI,OAAO2F,KAAKJ,QAAQtF,SAvDxB,+BA0DmBkG,GAIf,IAFA,IAAIP,EAAuB5D,EAAO2D,KAAKJ,QAAQY,IAExCA,EAAI,GAAG,CAEZ,IAAIC,EAAkBC,KAAKC,OAAOH,EAAI,GAAK,GAAK,EAC9CI,EAAsBvE,EAAO2D,KAAKJ,QAAQa,IAS5C,GAAIT,KAAKH,QAAQe,EAAQX,GAAU,MAInCD,KAAKJ,QAAQa,GAAWR,EACxBD,KAAKJ,QAAQY,GAAKI,EAClBJ,EAAIC,KAhFV,+BAoFmBD,GAKf,IAHA,IAAIlG,EAAiB0F,KAAKJ,QAAQtF,OAChC2F,EAAuB5D,EAAO2D,KAAKJ,QAAQY,MAEhC,CAEX,IAAIK,EAA4B,GAATL,EAAI,GACzBM,EAAkBD,EAAU,EAC1BE,EAAeP,EAenB,GAXEM,EAAUxG,GACV0F,KAAKH,QAAQxD,EAAO2D,KAAKJ,QAAQkB,IAAWb,KAE5Cc,EAAOD,GAEPD,EAAUvG,GACV0F,KAAKH,QAAQxD,EAAO2D,KAAKJ,QAAQiB,IAAWxE,EAAO2D,KAAKJ,QAAQmB,OAEhEA,EAAOF,GAGLE,IAASP,EAAG,MAGhBR,KAAKJ,QAAQY,GAAKR,KAAKJ,QAAQmB,GAC/Bf,KAAKJ,QAAQmB,GAAQd,EACrBO,EAAIO,OAjHV,KAuHA,SAAS1E,EACPE,GAEI,IADJC,EACG,uDADe,uCAElB,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,EC7HF,IAAMyE,EAIC,SAACC,EAAaC,EAAWC,GAGrC,IAFA,IAAIC,EAAe,CAACD,GAChBE,EAAUF,EACPE,IAAYH,GACjBG,EAAUJ,EAAYI,EAAQpF,IAC9BmF,EAAaE,QAAQD,GAGvB,OAAOD,GCiLT,SAAS/E,EACPE,GAEI,IADJC,EACG,uDADe,uCAElB,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,ECnMF,IAAMgF,EAQT,CACFC,ICLsB,SAAC5F,EAAME,EAAU2F,EAAWP,EAAWC,GAC7D,IAAMO,EAAI9F,EAAKtB,OACbkG,EAAI5E,EAAK,GAAGtB,OAGR2G,EAAsB,GAC5BA,EAAYU,KAAKT,EAAW,EAAGQ,EAAIlB,GACnCS,EAAYC,EAAUjF,IAAMiF,EAO5B,MAAO,CAJe,GAIL,KDRjBU,kBD2FsB,SAAChG,EAAME,EAAU2F,EAAWP,EAAWC,GAM7D,IALA,IAAMO,EAAI9F,EAAKtB,OACbkG,EAAI5E,EAAK,GAAGtB,OAGRuH,EAAwB,GACrBxH,EAAY,EAAGA,EAAIqH,EAAGrH,IAAK,CAClCwH,EAAU3B,KAAK,IACf,IAAK,IAAI4B,EAAY,EAAGA,EAAItB,EAAGsB,IAC7BD,EAAUxH,GAAG6F,KAAK6B,OAAOC,kBAI7BH,EAAUX,EAAUxG,GAAGwG,EAAUvG,GAAK,EAGtC,IAAMsG,EAAsB,GAC5BA,EAAYU,KAAKT,EAAW,EAAGQ,EAAIlB,GACnCS,EAAYC,EAAUjF,IAAMiF,EAG5B,IAAIe,EAAkB,GAGlBC,EAAuB,IAAIxC,GAAiB,SAACI,GAC/C,OAAO+B,EAAU/B,EAAEpF,GAAGoF,EAAEnF,MAI1B,IAFAuH,EAAGhC,KAAKgB,GAEDgB,EAAGC,OAAS,GAAG,CACpB,IAAIC,EAAoB/F,EAAO6F,EAAG5B,OAGlC,GAAI8B,IAAgBjB,EAAS,CAE3B,IAAMC,EAAeJ,EAAaC,EAAaC,EAAWC,GAE1D,OADAc,EAAQ/B,KAAKiB,GACN,CAACc,EAASb,GAKnBa,EAAQ/B,KAAKkC,GAGb,IAhBoB,EAgBhBC,EAAmBD,EAAY1H,EAC/B4H,EAAmBF,EAAYzH,EAjBf,cAoBG0B,EACrBoF,EAAUnF,IAAIR,EAASuG,GAAUC,MArBf,IAoBpB,2BAEG,CAAC,IAFO/H,EAER,QAGCA,EAAS,IAAM,GACfA,EAAS,GAAKmH,GACdnH,EAAS,IAAM,GACfA,EAAS,GAAKiG,GACb,WACD,IAAI+B,EAAiB3G,EAAKrB,EAAS,IAAIA,EAAS,IAI5CiI,EAA0BX,EAAUQ,GAAUC,GAAY,EAI1DE,EAAkBX,EAAUtH,EAAS,IAAIA,EAAS,MACpD0G,EAAYsB,EAAStG,IAAMmG,EAC3BP,EAAUtH,EAAS,IAAIA,EAAS,IAAMiI,GAKnCP,EAAQQ,MAAK,SAACL,GAAD,OAAiBA,IAAgBG,OACjDL,EAAGQ,OAAOH,GACVL,EAAGhC,KAAKqC,IAlBT,IA7Be,+BAqDtB,MAAO,CAACN,EAAS,MG1JNU,EAI4D,SACvEzG,EACA0G,EACAhH,GAGA,IADA,IAAIE,EAAiC,GAC5BzB,EAAY,EAAGA,EAAIuI,EAAcvI,IAAK,CAE7C,IADA,IAAIwI,EAA8B,GACzBf,EAAY,EAAGA,EAAI5F,EAAW4F,IAAK,CAC1C,IAAIM,EAAoBxG,EAAKvB,GAAGyH,GAChCe,EAAQ3C,KAAK,CAACkC,EAAY1H,EAAG0H,EAAYzH,IAE3CmB,EAASoE,KAAK2C,GAIhB,IADA,IAAIpB,EAAuD,IAAIqB,IACtDzI,EAAY,EAAGA,EAAIuI,EAAcvI,IACxC,IAAK,IAAIyH,EAAY,EAAGA,EAAI5F,EAAW4F,IAAK,CAC1C,IAAI5H,EAAgC6I,EAClCjH,EACA,CAACzB,EAAGyH,GACJc,EACA1G,GAGFuF,EAAUuB,IAAIlH,EAASzB,GAAGyH,GAAI5H,GAGlC,MAAO,CAAC4B,EAAU2F,IAGPwB,EAK4D,SACvE/G,EACA0G,EACAhH,EACAsH,GAcA,IAbI,IAAD,EAtEoE,SACvEhH,EACA0G,EACAhH,GAGA,IADA,IAAIE,EAAiC,GAC5BzB,EAAY,EAAGA,EAAIuI,EAAcvI,IAAK,CAE7C,IADA,IAAIwI,EAA8B,GACzBf,EAAY,EAAGA,EAAI5F,EAAW4F,IAAK,CAC1C,IAAIM,EAAoBxG,EAAKvB,GAAGyH,GAChCe,EAAQ3C,KAAK,CAACkC,EAAY1H,EAAG0H,EAAYzH,IAE3CmB,EAASoE,KAAK2C,GAKhB,IADA,IAAIpB,EAAuD,IAAIqB,IACtDzI,EAAY,EAAGA,EAAIuI,EAAcvI,IACxC,IAAK,IAAIyH,EAAY,EAAGA,EAAI5F,EAAW4F,IACrCL,EAAUuB,IAAIlH,EAASzB,GAAGyH,GAAI,IAGlC,MAAO,CAAChG,EAAU2F,GAiDU0B,CAAgBjH,EAAW0G,EAAchH,GADlE,mBACEE,EADF,KACY2F,EADZ,KAIC2B,EACF,GAAKlH,EAAY,IAAM0G,EAAe,GAAK1G,EAAY0G,EAAe,EAGpE1B,EAA8BpF,EAAS,GAAG,GAC1CuH,EAA4B,CAACnC,GAC7Be,EAA8B,CAACf,GAG5BmC,EAAM/I,OAAS,GAAG,CAEvB,IAAI8H,EAAgC/F,EAAOgH,EAAM/C,OAC7CgD,EAAiDC,EACnDzH,EACAsG,EACAlG,EACA0G,EACAX,GAGF,GAAIqB,EAA2BhJ,OAAS,EAAG,CAEzC+I,EAAMnD,KAAKkC,GAGX,IAGIoB,EACFF,EAJsB5C,KAAKC,MAC3BD,KAAK+C,SAAWH,EAA2BhJ,SAME+B,EAC7CoF,EAAUnF,IAAI8F,IAEKlC,KAAKsD,GAEsBnH,EAC9CoF,EAAUnF,IAAIkH,IAEMtD,KAAKkC,GAG3BH,EAAQ/B,KAAKsD,GACbH,EAAMnD,KAAKsD,GAGXJ,KAMJ,IAFA,IAAIM,EAAwBN,EAErBA,GAAqB,EAAIM,GAAiBR,GAAc,CAE7D,IAAIS,EAAkBjD,KAAKC,MAAMD,KAAK+C,SAAWvH,GAE7CkG,EAAgCtG,EADd4E,KAAKC,MAAMD,KAAK+C,SAAWb,IACKe,GAGlDzJ,EAAgC0J,EAClC9H,EACAsG,EACAlG,EACA0G,EACAnB,GAGF,GAAIvH,EAAUI,OAAS,EAAG,CAExB,IAAIuJ,EAAoBnD,KAAKC,MAAMD,KAAK+C,SAAWvJ,EAAUI,QACzDkJ,EACF1H,EAAS5B,EAAU2J,GAAW,IAAI3J,EAAU2J,GAAW,IAGVxH,EAC7CoF,EAAUnF,IAAI8F,IAEKlC,KAAKsD,GAGsBnH,EAC9CoF,EAAUnF,IAAIkH,IAEMtD,KAAKkC,GAG3BgB,KAGJ,MAAO,CAACtH,EAAU2F,IAGd8B,EAMoB,SACxBzH,EACAsG,EACAlG,EACA0G,EACAX,GAaA,IAXA,IAOI/H,EAAgC,GAChCM,GAAqB,EACrBC,GAAqB,EAEzB,MAXmB,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,IAON,eAA8B,CAAzB,IAAMqJ,EAAG,KACZtJ,EAAY4H,EAAY,GAAK0B,EAAI,GACjCrJ,EAAY2H,EAAY,GAAK0B,EAAI,GAE/BtJ,GAAa,GACbA,EAAYoI,GACZnI,GAAa,GACbA,EAAYyB,IACX+F,EAAQ8B,SAASjI,EAAStB,GAAWC,KAEtCP,EAAUgG,KAAKpE,EAAStB,GAAWC,IAGvC,OAAOP,GAGI6I,EAKa,SAACjH,EAAUsG,EAAaQ,EAAc1G,GAY9D,IAXA,IAOIhC,EAAgC,GAChCM,GAAqB,EACrBC,GAAqB,EAEzB,MAXmB,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,IAON,eAA8B,CAAzB,IAAMqJ,EAAG,KACZtJ,EAAY4H,EAAY,GAAK0B,EAAI,GACjCrJ,EAAY2H,EAAY,GAAK0B,EAAI,GAE/BtJ,GAAa,GACbA,EAAYoI,GACZnI,GAAa,GACbA,EAAYyB,GAEZhC,EAAUgG,KAAKpE,EAAStB,GAAWC,IAGvC,OAAOP,GAGH0J,EAMoB,SACxB9H,EACAsG,EACAlG,EACA0G,EACAnB,GAaA,IAXA,IAOIvH,EAAgC,GAChCM,GAAqB,EACrBC,GAAqB,EAEzB,MAXmB,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,IAON,eAA8B,CAAC,IAAD,EAAnBqJ,EAAG,KACZtJ,EAAY4H,EAAY,GAAK0B,EAAI,GACjCrJ,EAAY2H,EAAY,GAAK0B,EAAI,GAE/BtJ,GAAa,GACbA,EAAYoI,GACZnI,GAAa,GACbA,EAAYyB,KACZ,UAACuF,EAAUnF,IAAI8F,UAAf,aAAC,EAA4B2B,SAASjI,EAAStB,GAAWC,MAE1DP,EAAUgG,KAAKpE,EAAStB,GAAWC,IAGvC,OAAOP,GAGT,SAASmC,EACPE,GAEI,IADJC,EACG,uDADe,uCAElB,QAAiBC,IAAbF,GAAuC,OAAbA,EAC5B,MAAM,IAAIG,UAAUF,GAGtB,OAAOD,ECpSF,IAAMyH,EAKiB,SAC5BC,EACAC,EACAhD,EACAC,GAGA,IADA,IAAIf,EAAmB,GACd/F,EAAY,EAAGA,EAAI6J,EAAgB7J,IAAK,CAE/C,IADA,IAAI8J,EAAqB,GAChBrC,EAAY,EAAGA,EAAImC,EAAanC,IAAK,CAC5C,IAAIM,EAAoB,CACtBnG,GAAI5B,EAAIyH,EAAIoC,EACZxJ,EAAGL,EACHM,EAAGmH,EACH1G,SAAS,EACTG,OAAO,EACPT,WAAW,EACXD,gBAAgB,EAChBD,WAAW,GAEbuJ,EAAWjE,KAAKkC,GAElBhC,EAAOF,KAAKiE,GAKd,OAHA/D,EAAOc,EAAU,IAAIA,EAAU,IAAI9F,SAAU,EAC7CgF,EAAOe,EAAQ,IAAIA,EAAQ,IAAI5F,OAAQ,EAEhC,CACL6E,EACAA,EAAOc,EAAU,IAAIA,EAAU,IAC/Bd,EAAOe,EAAQ,IAAIA,EAAQ,M,ECXmB6C,EARnB,GACE,GAU/B,CAAC,EAAG,GACJ,CAAC,EAAG,K,mBAJCI,E,KAAWC,E,KAAgBC,E,OAOC3B,EAfJ,GACE,GAiB/ByB,G,mBAHKG,E,KAAe9C,E,KA6QP+C,EAtQc,WAAM,MAEThH,mBAAS4G,GAFA,mBAE1BxI,EAF0B,KAEpB6I,EAFoB,OAGTjH,mBAASiE,GAHA,mBAG1B5F,EAH0B,KAGpB6I,EAHoB,OAIDlH,mBAAS+G,GAJR,mBAI1BzI,EAJ0B,KAIhB6I,EAJgB,OAKCnH,mBAAS,qBALV,mBAK1BoH,EAL0B,KAKfC,EALe,OAMOrH,mBAAS,IANhB,mBAM1B0F,EAN0B,KAMZ4B,EANY,OAOOtH,mBAAS,GAPhB,mBAO1BR,EAP0B,KAOZ+H,EAPY,OAWCvH,mBAAS6G,GAXV,mBAW1BnD,EAX0B,KAWf8D,EAXe,OAYHxH,mBAAS8G,GAZN,mBAY1BnD,EAZ0B,KAYjB8D,EAZiB,KA6KjC,OACE,yBAAK9J,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEmC,KAAK,eACLN,aAAcA,EACd7B,UAAU,eACV8B,qBAAqB,aACrBC,oBAAoB,YACpBG,YAzEyB,WAC/B,GAAqB,IAAjBL,EAAoB,CAAC,IAAD,EACsBgH,EArInB,GACE,GAuIzB,CAAC9C,EAAUxG,EAAGwG,EAAUvG,GACxB,CAACwG,EAAQzG,EAAGyG,EAAQxG,IALA,mBACfuK,EADe,KACNC,EADM,KACQC,EADR,OAOSzC,EA3IN,GACE,GA6IzBuC,GAVoB,mBAOfG,EAPe,KAOFC,EAPE,KAYtBb,EAAQS,GACRP,EAAYU,GACZX,EAAQY,GACRN,EAAaG,GACbF,EAAWG,GACXL,EAAgB,OAyDd,kBAAC,EAAD,CACEzH,KAAK,gBACLN,aAAcA,EACd7B,UAAU,gBACV8B,qBAAqB,aACrBC,oBAAoB,aACpBG,YAjGyB,WAC/B,GAAqB,IAAjBL,EAAoB,CACtB,IAAMkI,EAAUtJ,EAAK2J,QADC,EAEStC,EAtHN,GACE,GAwHzBiC,EACAhC,GANoB,mBAEfmC,EAFe,KAEFC,EAFE,KAQtBb,EAAQS,GACRP,EAAYU,GACZX,EAAQY,OAwFN,kBAAC,EAAD,CACEhI,KAAK,eACLrB,GAAG,eACHe,aAAcA,EACdW,eAAe,GAEf,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEL,KAAK,mBACL6B,SAAU,GACVG,SAAU,EACVL,aAAciE,EACdzD,aAAcqF,MAIpB,kBAAC,EAAD,CACExH,KAAK,aACLN,aAAcA,EACd7B,UAAU,mBACV8B,qBAAqB,aACrBC,oBAAoB,aACpBG,YA7IgC,WACtC,GAAqB,IAAjBL,EAAoB,CACtB+H,EAAgB,GADM,MAJjBxD,EAAWqD,GAOdhJ,EACAE,EACAD,EACAqF,EACAC,GAPoB,mBAEfc,EAFe,KAENuD,EAFM,KAShBhF,EAAYyB,EAAQ3H,OACxBoH,EAAY8D,EAAKlL,QArE6C,SAClE2H,EACAuD,GAGA,IADA,IAAMhF,EAAIyB,EAAQ3H,OADf,WAEMD,GACPoL,YAAW,WACT,IAAMP,EAAUtJ,EAAK2J,QACfpL,EAAO8H,EAAQ5H,GAEfK,EAAYP,EAAKO,EACjBC,EAAYR,EAAKQ,EACjB+K,EAAa,2BACdvL,GADc,IAEjBW,WAAW,IAEboK,EAAQxK,GAAGC,GAAK+K,EAChBjB,EAAQS,KApD0B,GAqDL7K,IAbxBA,EAAY,EAAGA,EAAImG,EAAGnG,IAAM,EAA5BA,GAiBT,IADA,IAAMqH,EAAI8D,EAAKlL,OAlBZ,WAmBMD,GACPoL,YAAW,WACT,IAAMP,EAAUtJ,EAAK2J,QACfpL,EAAOqL,EAAKnL,GAEZK,EAAYP,EAAKO,EACjBC,EAAYR,EAAKQ,EACjB+K,EAAa,2BACdvL,GADc,IAEjBW,WAAW,EACXD,gBAAgB,IAElBqK,EAAQxK,GAAGC,GAAK+K,EAChBjB,EAAQS,KAtE0B,GAuEL1E,EAtEE,GAsE2BnG,IAdrDA,EAAY,EAAGA,EAAIqH,EAAGrH,IAAM,EAA5BA,GAgDPsL,CAAmB1D,EAASuD,GAC5BC,YAAW,WACTV,EAAgB,KA3GkB,GA4GLvE,EA3GE,GA2G2BkB,OAgI1D,kBAAC,EAAD,CACEpE,KAAK,YACLrB,GAAG,aACHe,aAAcA,EACdW,eAAe,GAEf,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEiB,gBAxKmD,SAC7DC,GAEAgG,EAAahG,IAsKHA,cAAc,qBAEd,mDACe,sBAAd+F,EAAoC,qCAAW,OA6BxD,kBAAC,EAAD,CAAMhJ,KAAMA,EAAME,SAAUA,EAAUD,KAAMA,MCxRnC+J,EAbO,WACpB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACL,KAAK,0BAA0BM,UAAWtB,QCE7CuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzI,SAASG,eAAe,SDgIpB,kBAAmBuI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtK,c","file":"static/js/main.1934c1c0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\nconst getAddedClassName: (\n  neighbors: [number, number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [number, number] = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          🐀\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          🧀\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  return (\n    <div className={\"grid-node\" + getAddedClassName(neighbors, node)}>\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node)\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n","import React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  grid: node[][];\n  maze: Map<[number, number], [number, number][]>;\n  pairGrid: [number, number][][];\n}\n\nexport const Grid: React.FC<Props> = ({ grid, maze, pairGrid }) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return (\n    <div className=\"grid\">\n      {grid.map((row, id) => {\n        let rowLength = row.length;\n        return (\n          <div className=\"row\" key={id}>\n            {row.map((node, index) => (\n              <GridNode\n                numberOfElementsPerRow={rowLength}\n                key={id + index * rowLength}\n                node={node}\n                neighbors={ensure(maze.get(pairGrid[node.x][node.y]))}\n              ></GridNode>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// This function is there to ensure that a value is not null or undefined\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import React, { useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./NavBar.css\";\n\nexport const NavBar: React.FC = (props) => {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n};\n\ninterface NavButtonProps {\n  text: string;\n  isVisualized: number;\n  className: string;\n  visualizingClassName: string;\n  visualizedClassName: string;\n  greyTimeOut?: number;\n  handleClick: () => void;\n}\n\nexport const NavButton: React.FC<NavButtonProps> = (props) => {\n  let addedClass: string = \" \";\n  if (props.isVisualized === 1) addedClass += props.visualizingClassName;\n  if (props.isVisualized === 2) addedClass += props.visualizedClassName;\n  return (\n    <li\n      className={\"nav-item\" + addedClass + \" \" + props.className}\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\ninterface NavDropDownItemProps {\n  text: string;\n  id: string;\n  isVisualized: number;\n  shouldGreyOut: boolean;\n}\n\nexport const NavDropDownItem: React.FC<NavDropDownItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n\n  const handleClick: (e: any) => void = (event) => {\n    if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    document.addEventListener(\"click\", (e) => {\n      const dropDownMenu = document.getElementById(props.id);\n      let targetElement = e.target as Element;\n\n      do {\n        if (targetElement === dropDownMenu) return;\n        targetElement = targetElement.parentNode as Element;\n      } while (targetElement);\n      setOpen(false);\n    });\n  };\n\n  return (\n    <li\n      id={props.id}\n      className={\n        \"nav-item\" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n    >\n      <p className=\"icon-button\" onClick={handleClick}>\n        {props.text}\n      </p>\n      {open && props.children}\n    </li>\n  );\n};\n\ninterface DropDownMenu {}\n\nexport const DropDownMenu: React.FC<DropDownMenu> = (props) => {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  return (\n    <div className={\"dropdown\"}>\n      <CSSTransition\n        in={activeMenu === \"main\"}\n        unmountOnExit\n        timeout={100}\n        classNames=\"menu-primary\"\n      >\n        {props.children}\n      </CSSTransition>\n    </div>\n  );\n};\n\ninterface DropDownAlgoProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  algorithmName: string;\n  changeAlgorithm: (algorithmName: string) => void;\n}\n\nexport const DropDownAlgo: React.FC<DropDownAlgoProps> = (props) => {\n  return (\n    <div\n      className=\"menu-item\"\n      onClick={(e) => {\n        props.changeAlgorithm(props.algorithmName);\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\ninterface DropDownSliderProps {\n  minValue: number;\n  maxValue: number;\n  defaultValue: number;\n  text: string;\n  handleChange: (event: any) => void;\n}\n\nexport const DropDownSlider: React.FC<DropDownSliderProps> = (props) => {\n  return (\n    <div className=\"slider-item\">\n      <div>\n        <p>{props.text}</p>\n      </div>\n      <input\n        className=\"slider\"\n        type=\"range\"\n        value={props.defaultValue}\n        min={props.minValue.toString()}\n        max={props.maxValue.toString()}\n        step={0.01}\n        onChange={(e) => props.handleChange(e.target.value)}\n      ></input>\n    </div>\n  );\n};\n","export class BinaryHeap<T> {\n  content: ([T, number] | undefined)[];\n  scoreFunction: (x: T) => number;\n  index: number;\n\n  constructor(scoreFunction: (x: T) => number) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n    this.index = 1;\n  }\n\n  compare: (a: [T, number], b: [T, number]) => boolean = (a, b) => {\n    if (this.scoreFunction(a[0]) !== this.scoreFunction(b[0])) {\n      return this.scoreFunction(a[0]) < this.scoreFunction(b[0]);\n    }\n    return a[1] < b[1];\n  };\n\n  push(element: T) {\n    this.content.push([element, this.index++]);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop(): T | undefined {\n    let result: [T, number] = ensure(this.content[0]);\n    let end: [T, number] | undefined = this.content.pop();\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return ensure(result)[0];\n  }\n\n  remove(node: T) {\n    let length: number = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (let i: number = 0; i < length; i++) {\n      if (ensure(this.content[i])[0] !== node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      let end: [T, number] | undefined = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i === length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  private bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    let element: [T, number] = ensure(this.content[n]);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN: number = Math.floor((n + 1) / 2) - 1,\n        parent: [T, number] = ensure(this.content[parentN]);\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      // if (\n      //   score > this.scoreFunction(ensure(parent)[0]) ||\n      //   (score === this.scoreFunction(ensure(parent)[0]) &&\n      //     ensure(element)[1] > ensure(parent)[1])\n      // )\n      //   break;\n      if (this.compare(parent, element)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  private sinkDown(n: number) {\n    // Look up the target element and its score.\n    let length: number = this.content.length,\n      element: [T, number] = ensure(this.content[n]);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N: number = (n + 1) * 2,\n        child1N: number = child2N - 1;\n      let swap: number = n;\n      // This is used to store the new position of the element, if any.\n      // If the first child exists (is inside the array)...\n      if (\n        child1N < length &&\n        this.compare(ensure(this.content[child1N]), element)\n      )\n        swap = child1N;\n      if (\n        child2N < length &&\n        this.compare(ensure(this.content[child2N]), ensure(this.content[swap]))\n      )\n        swap = child2N;\n\n      // If the order is good, we exit the loop\n      if (swap === n) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n}\n\n// This function ensures the value we will use is not undefined\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import { node } from \"../usefulInterfaces\";\n\nexport const retrievePath: (\n  predecessor: node[],\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, startNode, endNode) => {\n  let shortestPath = [endNode];\n  let current = endNode;\n  while (current !== startNode) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n\n  return shortestPath;\n};\n","import { node } from \"../usefulInterfaces\";\nimport { BinaryHeap } from \"../binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\n\nexport const dijkstra: (\n  grid: node[][],\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the directions array we will use to perform Dijkstra's algorithm\n  const directions: number[][] = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>((a: node) => {\n    return distances[a.x][a.y];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    // currentNode.isVisited = true;\n    visited.push(currentNode);\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const dir of directions) {\n      // Get the coordinates of the next node\n      let nextX: number = currentX + dir[0];\n      let nextY: number = currentY + dir[1];\n\n      // Check if the coordinates are valid\n      if (nextX >= 0 && nextX < m && nextY >= 0 && nextY < n) {\n        let nextNode: node = grid[nextX][nextY];\n\n        // If the node is not yet visited, remove it from the heap and\n        // put it back in with its new distance as the score function\n        if (!visited.find((currentNode) => currentNode === nextNode)) {\n          pq.remove(nextNode);\n          pq.push(nextNode);\n        }\n\n        // Calculate the distance between the current node and the next node\n        // To Do: take into account the weight of the path\n        let currentDistance: number = distances[currentX][currentY] + 1;\n\n        // If the distance is less than the distance in the array distances,\n        // change it and change the predecessor of the next node to be the current one\n        if (currentDistance < distances[nextX][nextY]) {\n          predecessor[nextNode.id] = currentNode;\n          distances[nextX][nextY] = currentDistance;\n        }\n\n        // If we found the target node then we return what we need\n        if (nextNode === endNode) {\n          // Retrieve the shortest path\n          const shortestPath = retrievePath(predecessor, startNode, endNode);\n          visited.shift();\n          // return the correct value\n          return [visited, shortestPath];\n        }\n      }\n    }\n  }\n\n  return [visited, []];\n};\n\nexport const dijkstraWithWalls: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>((a: node) => {\n    return distances[a.x][a.y];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      visited.push(endNode);\n      return [visited, shortestPath];\n    }\n\n    // add the current node to the visited nodes\n    // currentNode.isVisited = true;\n    visited.push(currentNode);\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Check if the coordinates are valid\n      if (\n        neighbor[0] >= 0 &&\n        neighbor[0] < m &&\n        neighbor[1] >= 0 &&\n        neighbor[1] < n\n      ) {\n        let nextNode: node = grid[neighbor[0]][neighbor[1]];\n\n        // Calculate the distance between the current node and the next node\n        // To Do: take into account the weight of the path\n        let currentDistance: number = distances[currentX][currentY] + 1;\n\n        // If the distance is less than the distance in the array distances,\n        // change it and change the predecessor of the next node to be the current one\n        if (currentDistance < distances[neighbor[0]][neighbor[1]]) {\n          predecessor[nextNode.id] = currentNode;\n          distances[neighbor[0]][neighbor[1]] = currentDistance;\n        }\n\n        // If the node is not yet visited, remove it from the heap and\n        // put it back in with its new distance as the score function\n        if (!visited.find((currentNode) => currentNode === nextNode)) {\n          pq.remove(nextNode);\n          pq.push(nextNode);\n        }\n      }\n    }\n  }\n\n  return [visited, []];\n};\n\n// This function is here to ensure that a value is not undefined (especially when using arrays).\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import { node } from \"../usefulInterfaces\";\nimport { bfs } from \"./bfs\";\nimport { dijkstraWithWalls } from \"./dijkstra\";\n\nexport const algorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [number, number][]>,\n    startNode: node,\n    targetNode: node\n  ) => [node[], node[]];\n} = {\n  bfs: bfs,\n  dijkstraWithWalls: dijkstraWithWalls,\n};\n","import { node } from \"../usefulInterfaces\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the Queue\n\n  return [visited, []];\n};\n","import { node } from \"../usefulInterfaces\";\n\n// TODO: Refactor the code to use the different key-values pair as the nodes get changed when there is a setGrid that is applied\n\nconst createMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const createEmptyMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      let neighbors: [number, number][] = getNeighborsEmpty(\n        pairGrid,\n        [i, j],\n        columnLength,\n        rowLength\n      );\n\n      mazeGraph.set(pairGrid[i][j], neighbors);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const generateMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][],\n  wallsDensity: number\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid,\n  wallsDensity\n) => {\n  let [pairGrid, mazeGraph] = createMazeGraph(rowLength, columnLength, grid);\n\n  // I. Generate a maze where each cells is reachable (with a DFS)\n  let currentWallsCount: number =\n    2 * (rowLength - 1) * (columnLength - 1) + rowLength + columnLength - 2;\n\n  // 1. Choose the initial cell, mark it as visited and push it to the stack\n  let startNode: [number, number] = pairGrid[0][0];\n  let stack: [number, number][] = [startNode];\n  let visited: [number, number][] = [startNode];\n\n  // 2. While the stack is not empty\n  while (stack.length > 0) {\n    // 1. Pop a cell from the stack and make it a current cell\n    let currentNode: [number, number] = ensure(stack.pop());\n    let currentNonVisitedNeighbors: [number, number][] = getNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      visited\n    );\n    // 2. If the current cell has any neighbours which have not been visited\n    if (currentNonVisitedNeighbors.length > 0) {\n      // 1. Push the current cell to the stack\n      stack.push(currentNode);\n\n      // 2. Choose one of the unvisited neighbours\n      let randIndex: number = Math.floor(\n        Math.random() * currentNonVisitedNeighbors.length\n      );\n      let neighborNode: [number, number] =\n        currentNonVisitedNeighbors[randIndex];\n\n      // 3. Remove the wall between the current cell and the chosen cell\n      let currentNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push(neighborNode);\n\n      let neighborNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push(currentNode);\n\n      // 4. Mark the chosen cell as visited and push it to the stack\n      visited.push(neighborNode);\n      stack.push(neighborNode);\n\n      // 5. Remove 1 from the currentWallsCount\n      currentWallsCount--;\n    }\n  }\n\n  let maxWallsCount: number = currentWallsCount;\n  // II. Remove walls until the desired density is achieved\n  while (currentWallsCount * (1 / maxWallsCount) > wallsDensity) {\n    // 1. Choose a node randomly\n    let randRow: number = Math.floor(Math.random() * rowLength);\n    let randCol: number = Math.floor(Math.random() * columnLength);\n    let currentNode: [number, number] = pairGrid[randCol][randRow];\n\n    // 2. Get the cells with a wall with the current cell\n    let neighbors: [number, number][] = getNeighborsII(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      mazeGraph\n    );\n\n    if (neighbors.length > 0) {\n      // 3. Choose one of the cells with a wall\n      let randIndex: number = Math.floor(Math.random() * neighbors.length);\n      let neighborNode: [number, number] =\n        pairGrid[neighbors[randIndex][0]][neighbors[randIndex][1]];\n\n      // 4. Remove the wall between the 2 cells\n      let currentNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push(neighborNode);\n      // mazeGraph.set(currentNode, currentNodeNeighbors);\n\n      let neighborNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push(currentNode);\n      // mazeGraph.set(neighborNode, neighborNodeNeighbors);\n\n      currentWallsCount--;\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nconst getNeighbors: (\n  grid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  visited: [number, number][]\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  visited\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      !visited.includes(pairGrid[neighborX][neighborY])\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\nexport const getNeighborsEmpty: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  columnLength: number,\n  rowLength: number\n) => [number, number][] = (pairGrid, currentNode, columnLength, rowLength) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\nconst getNeighborsII: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  mazeGraph: Map<[number, number], [number, number][]>\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  mazeGraph\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      !mazeGraph.get(currentNode)?.includes(pairGrid[neighborX][neighborY])\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n","import { node } from \"./usefulInterfaces\";\n\n// This function (Not a React Component!) is made to initialize the grid rendered in the App component.\nexport const constructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  endNode: [number, number]\n) => [node[][], node, node] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  endNode\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        isEnd: false,\n        isVisited: false,\n        isShortestPath: false,\n        hasCheese: false,\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  result[endNode[0]][endNode[1]].isEnd = true;\n  // result = piecesOfCheese(result, numberOfColumn, numberOfRow, 21);\n  return [\n    result,\n    result[startNode[0]][startNode[1]],\n    result[endNode[0]][endNode[1]],\n  ];\n};\n\nconst piecesOfCheese: (\n  grid: node[][],\n  m: number,\n  n: number,\n  cheeseNum: number\n) => node[][] = (grid, m, n, cheeseNum) => {\n  let visited: boolean[][] = new Array(n);\n  for (let i: number = 0; i < n; ++i) {\n    visited[i] = new Array(n);\n  }\n  for (let i: number = 0; i < n; ++i) {\n    for (let j: number = 0; j < n; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[0][0] = true;\n  visited[n - 1][n - 1] = true;\n  for (let k: number = 0; k < cheeseNum / 2; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * n);\n      j = Math.floor(Math.random() * n);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    visited[n - 1 - i][n - 1 - j] = true;\n    grid[i][j].hasCheese = true;\n    grid[n - 1 - i][n - 1 - j].hasCheese = true;\n  }\n  grid[Math.floor(n / 2)][Math.floor(n / 2)].hasCheese = true;\n  return grid;\n};\n","import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavDropDownItem,\n  DropDownMenu,\n  DropDownAlgo,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\nimport { algorithms } from \"../helper_functions/shortestPathAlgorithms/allAlgorithms\";\nimport {\n  createEmptyMazeGraph,\n  generateMazeGraph,\n} from \"../helper_functions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helper_functions/constructGrid\";\n\nconst NUMBER_OF_ROWS: number = 28;\nconst NUMBER_OF_COLUMN: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 75;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_ROWS,\n  NUMBER_OF_COLUMN,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = createEmptyMazeGraph(\n  NUMBER_OF_ROWS,\n  NUMBER_OF_COLUMN,\n  firstGrid\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"dijkstraWithWalls\");\n  const [wallsDensity, setWallsDensity] = useState(0.7);\n  const [isVisualized, setIsVisualized] = useState(0);\n  // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => void = (\n    algorithmName\n  ) => {\n    setAlgorithm(algorithmName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [number, number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNode\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_ROWS,\n        NUMBER_OF_COLUMN,\n        newGrid,\n        wallsDensity\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitialize: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_ROWS,\n        NUMBER_OF_COLUMN,\n        [startNode.x, startNode.y],\n        [endNode.x, endNode.y]\n      );\n      const [newPairGrid, newMaze] = createEmptyMazeGraph(\n        NUMBER_OF_ROWS,\n        NUMBER_OF_COLUMN,\n        newGrid\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n\n  // Render the app\n  return (\n    <div className=\"App\">\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitialize}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavDropDownItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0.1}\n              maxValue={1}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavDropDownItem>\n        <NavButton\n          text=\"Visualize!\"\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavDropDownItem\n          text=\"Algorithm\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu>\n            <DropDownAlgo\n              changeAlgorithm={handleAlgorithmChange}\n              algorithmName=\"dijkstraWithWalls\"\n            >\n              <p>Dijkstra's Algorithm</p>\n              {algorithm === \"dijkstraWithWalls\" ? <p>✓</p> : \"\"}\n            </DropDownAlgo>\n            {/* <DropDownAlgo\n              changeAlgorithm={handleAlgorithmChange}\n              algorithmName=\"A*\"\n            >\n              A* Algorithm\n            </DropDownAlgo> */}\n          </DropDownMenu>\n        </NavDropDownItem>\n      </NavBar>\n      {/* <SecondaryHeader>\n        <button\n          className=\"visualize-button\"\n          onClick={(e) => {\n            visualizeAlgorithm(\n              ...chooseAlgorithm(algorithm)(\n                grid,\n                pairGrid,\n                mazeGraph,\n                startNode,\n                endNode\n              )\n            );\n          }}\n        >\n          Visualize the path!\n        </button>\n      </SecondaryHeader> */}\n      <Grid grid={grid} pairGrid={pairGrid} maze={maze} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/pathfinding-visualizer\" component={Visualizer} />\n          {/* <Route path=\"/react-rat\" component={ReactRat} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import PathFindingVisualizer from \"./Visualizer/PathFindingVisualizer\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}