{"version":3,"sources":["icon/right-thin-chevron-svgrepo-com.svg","helperFunctions/ensureNotUndefined.ts","GridNode/GridNode.tsx","Grid/Grid.tsx","NavBar/NavBar.tsx","helperFunctions/shortestPathAlgorithms/retrievePath.ts","helperFunctions/dataStructures/binaryHeap.ts","helperFunctions/shortestPathAlgorithms/singleTarget/dijkstra.ts","helperFunctions/shortestPathAlgorithms/singleTarget/aStar.ts","helperFunctions/shortestPathAlgorithms/allAlgorithms.ts","helperFunctions/shortestPathAlgorithms/singleTarget/dfs.ts","helperFunctions/shortestPathAlgorithms/singleTarget/bfs.ts","helperFunctions/shortestPathAlgorithms/multipleTarget/greedy.ts","helperFunctions/mazeGenerators/mazeGraph.ts","helperFunctions/constructGrid.ts","Wrapper/Wrapper.tsx","Visualizer/Visualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref","svgRef","title","props","id","x","y","viewBox","style","enableBackground","xmlSpace","ref","fill","d","ForwardRef","forwardRef","ensure","argument","message","undefined","TypeError","getAddedClassName","neighbors","node","addedClassName","neighbor","neighborX","neighborY","distance","hasCheese","isShortestPath","isVisited","GridNode","React","memo","numberOfElementsPerRow","handleMouseDown","mouseState","handleMouseEnter","showNumbers","className","onMouseDown","e","onMouseEnter","role","isStart","successorPosition","find","prevProps","nextProps","Grid","grid","maze","pairGrid","map","row","rowLength","index","get","NavBar","children","NavButton","addedClassNames","startClassName","visualizingClassName","visualizedClassName","isVisualized","onClick","handleClick","text","NavItem","useState","open","setOpen","shouldGreyOut","event","document","addEventListener","dropDownMenu","getElementById","targetElement","parentNode","DropDownMenu","left","height","DropDownItem","leftIcon","rightIcon","DropDownSlider","defaultValue","type","value","min","minValue","toString","max","maxValue","step","onChange","handleChange","DropDownToggleSwich","shouldShowWeights","retrievePath","predecessor","startNode","endNode","shortestPath","current","unshift","BinaryHeap","compare","content","element","push","bubbleUp","result","end","pop","sinkDown","n","parentN","Math","floor","parent","child2N","child1N","swap","dijkstraHelper","mazeGraph","targetList","m","distances","j","Number","MAX_SAFE_INTEGER","visited","pq","a","b","currentNode","targetNode","currentX","currentY","nextNode","currentDistance","visitedNode","remove","size","manhattanDistance","abs","singleTargetAlgorithms","discovered","stack","discoveredNode","q","shift","dA","dB","multipleTargetsAlgorithms","currentStartNode","allVisitedAndPaths","path","filter","generateMazeGraph","columnLength","wallsDensity","mudDensity","mudWeight","MUD_WEIGHT","pairRow","Map","set","createMazeGraph","currentWallsCount","maxWallsOrMud","currentNonVisitedNeighbors","getNeighbors","neighborNode","random","maxWallsCount","randRow","randCol","getWalledOffNeighbors","randIndex","currentMud","maxMud","item","neighborNodeNeighbors","dir","includes","findCallback","constructGrid","numberOfRow","numberOfColumn","numberOfTargets","currentRow","piecesOfCheese","reconstructGrid","newTargetList","cheeseNum","Array","k","WrapperCSSTransition","handleEnter","nodeRef","useRef","CSSTransition","onEnter","isAppearing","el","offsetHeight","firstGrid","firstStartNode","firstTargetList","firstpairGrid","Visualizer","gridRef","setGrid","setPairGrid","setIsVisualized","setMaze","setWallsDensity","setMudDensity","setMudWeight","setNumberOfTargets","shouldGenerateMaze","setShouldGenerateMaze","didMount","setShowNumbers","setStartNode","setTargetList","algoActiveMenu","setAlgoActiveMenu","singleTargetAlgorithm","setSingleTargetAlgorithm","multipleTargetsAlgorithm","setMultipleTargetsAlgorithm","setHeight","mouseIsPressed","setMouseIsPressed","visualizeSingleTargetAlgorithm","timeout","setTimeout","newGrid","slice","successor","getSuccessorPosition","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","reinitializeGrid","newStartNode","useEffect","numberOfRows","oldTargetList","cheeseToAdd","forEach","addPiecesOfCheese","onMouseUp","newPairGrid","newMaze","val","allVisitedAndPathsArray","currentTimeout","visualizeMultipleTargetsAlgorithm","in","unmountOnExit","classNames","appear","toggleStartNode","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.af714fd2.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar SvgRightThinChevronSvgrepoCom = function SvgRightThinChevronSvgrepoCom(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Capa_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 185.343 185.343\",\n    style: {\n      enableBackground: \"new 0 0 185.343 185.343\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fill: \"#010002\"\n    },\n    d: \"M51.707,185.343c-2.741,0-5.493-1.044-7.593-3.149c-4.194-4.194-4.194-10.981,0-15.175 l74.352-74.347L44.114,18.32c-4.194-4.194-4.194-10.987,0-15.175c4.194-4.194,10.987-4.194,15.18,0l81.934,81.934 c4.194,4.194,4.194,10.987,0,15.175l-81.934,81.939C57.201,184.293,54.454,185.343,51.707,185.343z\"\n  }))), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgRightThinChevronSvgrepoCom, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/right-thin-chevron-svgrepo-com.e4144d1e.svg\";\nexport { ForwardRef as ReactComponent };","// This function is here to ensure that a value is not undefined (especially when using arrays).\nexport function ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n  return argument;\n}\n","import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { ReactComponent as ChevronRightIcon } from \"../icon/right-thin-chevron-svgrepo-com.svg\";\nimport { ensure } from \"../helperFunctions/ensureNotUndefined\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [[number, number], number][];\n  mouseState: boolean;\n  handleMouseDown: (x: number, y: number) => void;\n  handleMouseEnter: (x: number, y: number) => void;\n  showNumbers: boolean;\n}\n\nconst getAddedClassName: (\n  neighbors: [[number, number], number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [[number, number], number] = neighbors[i];\n    let neighborX = neighbor[0][0],\n      neighborY = neighbor[0][1],\n      distance: number = neighbor[1];\n    if (neighborX === node.x + 1)\n      addedClassName += distance === 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n    if (neighborX === node.x - 1)\n      addedClassName += distance === 1 ? \" no-wall-top\" : \" mud-top\";\n    if (neighborY === node.y + 1)\n      addedClassName += distance === 1 ? \" no-wall-right\" : \" mud-right\";\n    if (neighborY === node.y - 1)\n      addedClassName += distance === 1 ? \" no-wall-left\" : \" mud-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath && node.isVisited)\n    addedClassName += \" shortest-path-node-being-visited\";\n  else {\n    if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n    if (node.isVisited) addedClassName += \" visited-node\";\n  }\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter,\n  showNumbers,\n}) => {\n  return (\n    <div\n      className={\"grid-node\" + getAddedClassName(neighbors, node)}\n      onMouseDown={(e) => handleMouseDown(node.x, node.y)}\n      onMouseEnter={(e) => handleMouseEnter(node.x, node.y)}\n    >\n      <span\n        role=\"img\"\n        className={node.isStart || node.hasCheese ? \"content\" : \"no-content\"}\n      >\n        {(node.isStart ? \"🐀\" : \"\") + (node.hasCheese ? \"🧀\" : \"\")}\n      </span>\n      <div className={\"svg-chevron \" + node.successorPosition}>\n        {node.isShortestPath && !(node.isStart || node.hasCheese) ? (\n          <ChevronRightIcon />\n        ) : (\n          <span></span>\n        )}\n      </div>\n      {showNumbers &&\n        neighbors.find((neighbor) => neighbor[0][0] === node.x + 1) &&\n        ensure(neighbors.find((neighbor) => neighbor[0][0] === node.x + 1))[1] >\n          1 && (\n          <span className={\"number-bottom\"}>\n            {\n              ensure(\n                neighbors.find((neighbor) => neighbor[0][0] === node.x + 1)\n              )[1]\n            }\n          </span>\n        )}\n      {showNumbers &&\n        neighbors.find((neighbor) => neighbor[0][1] === node.y + 1) &&\n        ensure(neighbors.find((neighbor) => neighbor[0][1] === node.y + 1))[1] >\n          1 && (\n          <span className=\"number-right\">\n            {\n              ensure(\n                neighbors.find((neighbor) => neighbor[0][1] === node.y + 1)\n              )[1]\n            }\n          </span>\n        )}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node) &&\n    prevProps.node === nextProps.node &&\n    prevProps.mouseState === nextProps.mouseState &&\n    prevProps.showNumbers === nextProps.showNumbers\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n","import React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { ensure } from \"../helperFunctions/ensureNotUndefined\";\n\ninterface Props {\n  grid: node[][];\n  maze: Map<[number, number], [[number, number], number][]>;\n  pairGrid: [number, number][][];\n  mouseState: boolean;\n  handleMouseDown: (x: number, y: number) => void;\n  handleMouseEnter: (x: number, y: number) => void;\n  showNumbers: boolean;\n}\n\nexport const Grid: React.FC<Props> = ({\n  grid,\n  maze,\n  pairGrid,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter,\n  showNumbers,\n}) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return (\n    <div className=\"grid\">\n      {grid.map((row, id) => {\n        let rowLength = row.length;\n        return (\n          <div className=\"row\" key={id}>\n            {row.map((node, index) => (\n              <GridNode\n                numberOfElementsPerRow={rowLength}\n                key={id + index * rowLength}\n                node={node}\n                neighbors={ensure(maze.get(pairGrid[node.x][node.y]))}\n                mouseState={mouseState}\n                handleMouseDown={handleMouseDown}\n                handleMouseEnter={handleMouseEnter}\n                showNumbers={showNumbers}\n              ></GridNode>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./NavBar.css\";\n\nexport const NavBar: React.FC = (props) => {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n};\n\ninterface NavButtonProps {\n  text: string;\n  isVisualized: number;\n  className: string;\n  startClassName?: string;\n  visualizingClassName: string;\n  visualizedClassName: string;\n  handleClick: () => void;\n}\n\nexport const NavButton: React.FC<NavButtonProps> = (props) => {\n  const addedClassNames: string[] = [\n    props.startClassName ? props.startClassName : \"\",\n    props.visualizingClassName,\n    props.visualizedClassName,\n  ];\n\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        addedClassNames[props.isVisualized] +\n        \" \" +\n        props.className\n      }\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\ninterface NavItemProps {\n  text: string;\n  id: string;\n  isVisualized: number;\n  shouldGreyOut: boolean;\n}\n\nexport const NavItem: React.FC<NavItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n\n  const handleClick: (e: any) => void = (event) => {\n    if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    document.addEventListener(\"click\", (e) => {\n      const dropDownMenu = document.getElementById(props.id);\n      let targetElement = e.target as Element;\n\n      do {\n        if (targetElement === dropDownMenu) return;\n        targetElement = targetElement.parentNode as Element;\n      } while (targetElement);\n      setOpen(false);\n    });\n  };\n\n  return (\n    <li\n      id={props.id}\n      className={\n        \"nav-item\" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n    >\n      <p className=\"icon-button\" onClick={handleClick}>\n        {props.text}\n      </p>\n      {open && props.children}\n    </li>\n  );\n};\n\ninterface DropDownMenu {\n  height?: number;\n  left?: boolean;\n}\n\nexport const DropDownMenu: React.FC<DropDownMenu> = (props) => {\n  return (\n    <div\n      className={\"dropdown\" + (props.left ? \" left\" : \"\")}\n      style={{ height: props.height }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\ninterface DropDownAlgoProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  handleClick: () => void;\n}\n\nexport const DropDownItem: React.FC<DropDownAlgoProps> = (props) => {\n  return (\n    <div\n      className=\"menu-item\"\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <span>{props.leftIcon ? props.leftIcon : \"\"}</span>\n      {props.children}\n      <span>{props.rightIcon ? props.rightIcon : \"\"}</span>\n    </div>\n  );\n};\n\ninterface DropDownSliderProps {\n  minValue: number;\n  maxValue: number;\n  step: number;\n  defaultValue: number;\n  text: string;\n  handleChange: (event: any) => void;\n}\n\nexport const DropDownSlider: React.FC<DropDownSliderProps> = (props) => {\n  return (\n    <div className=\"slider-item\">\n      <div className=\"slider-item-text\">\n        <div>\n          <span>{props.text}</span>\n        </div>\n        <div className=\"slider-value\">\n          <span>{props.defaultValue}</span>\n        </div>\n      </div>\n      <input\n        className=\"slider\"\n        type=\"range\"\n        value={props.defaultValue}\n        min={props.minValue.toString()}\n        max={props.maxValue.toString()}\n        step={props.step}\n        onChange={(e) => props.handleChange(e.target.value)}\n      ></input>\n    </div>\n  );\n};\n\ninterface DropDownToggleSwitchProps {\n  text: string;\n  shouldShowWeights: boolean;\n  handleChange: () => void;\n}\n\nexport const DropDownToggleSwich: React.FC<DropDownToggleSwitchProps> = (\n  props\n) => {\n  return (\n    <div className=\"menu-item switch-item\">\n      <span className=\"switch-text\">{props.text}</span>\n      <label className=\"switch\">\n        <input\n          type=\"checkbox\"\n          defaultValue={props.shouldShowWeights ? 0 : 1}\n          onChange={props.handleChange}\n        />\n        <span className=\"switch-slider round\"></span>\n      </label>\n    </div>\n  );\n};\n","import { node } from \"../usefulInterfaces\";\n\nexport const retrievePath: (\n  predecessor: node[],\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, startNode, endNode) => {\n  let shortestPath = [endNode];\n  let current: node = endNode;\n  while (current.x !== startNode.x || current.y !== startNode.y) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n\n  return shortestPath;\n};\n","import { ensure } from \"../ensureNotUndefined\";\n\nexport class BinaryHeap<T> {\n  content: ([T, number] | undefined)[];\n  compare: (a: [T, number], b: [T, number]) => boolean;\n  index: number;\n\n  constructor(compare: (a: [T, number], b: [T, number]) => boolean) {\n    this.content = [];\n    this.index = 1;\n    this.compare = compare;\n  }\n\n  push(element: T) {\n    this.content.push([element, this.index++]);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop(): T | undefined {\n    let result: [T, number] = ensure(this.content[0]);\n    let end: [T, number] | undefined = this.content.pop();\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return ensure(result)[0];\n  }\n\n  remove(node: T) {\n    let length: number = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (let i: number = 0; i < length; i++) {\n      if (ensure(this.content[i])[0] !== node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      let end: [T, number] | undefined = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i === length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  private bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    let element: [T, number] = ensure(this.content[n]);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN: number = Math.floor((n + 1) / 2) - 1,\n        parent: [T, number] = ensure(this.content[parentN]);\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      // if (\n      //   score > this.scoreFunction(ensure(parent)[0]) ||\n      //   (score === this.scoreFunction(ensure(parent)[0]) &&\n      //     ensure(element)[1] > ensure(parent)[1])\n      // )\n      //   break;\n      if (this.compare(parent, element)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  private sinkDown(n: number) {\n    // Look up the target element and its score.\n    let length: number = this.content.length,\n      element: [T, number] = ensure(this.content[n]);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N: number = (n + 1) * 2,\n        child1N: number = child2N - 1;\n      let swap: number = n;\n      // This is used to store the new position of the element, if any.\n      // If the first child exists (is inside the array)...\n      if (\n        child1N < length &&\n        this.compare(ensure(this.content[child1N]), element)\n      )\n        swap = child1N;\n      if (\n        child2N < length &&\n        this.compare(ensure(this.content[child2N]), ensure(this.content[swap]))\n      )\n        swap = child2N;\n\n      // If the order is good, we exit the loop\n      if (swap === n) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n}\n","import { node } from \"../../usefulInterfaces\";\nimport { BinaryHeap } from \"../../dataStructures/binaryHeap\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const dijkstraHelper: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[], node] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER - 1);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      if (distances[a[0].x][a[0].y] !== distances[b[0].x][b[0].y]) {\n        return distances[a[0].x][a[0].y] < distances[b[0].x][b[0].y];\n      }\n      return a[1] < b[1];\n    }\n  );\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (targetList.find((targetNode) => targetNode === currentNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath, currentNode];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n  return [visited, [], startNode];\n};\n\nexport const dijkstra: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const [visited, path] = dijkstraHelper(\n    grid,\n    pairGrid,\n    mazeGraph,\n    startNode,\n    targetList\n  );\n  return [visited, path];\n};\n","import { node } from \"../../usefulInterfaces\";\nimport { BinaryHeap } from \"../../dataStructures/binaryHeap\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const aStar: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n  const endNode: node = targetList[0];\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      let dA: number = manhattanDistance(a[0], endNode),\n        dB: number = manhattanDistance(b[0], endNode);\n      if (distances[a[0].x][a[0].y] + dA !== distances[b[0].x][b[0].y] + dB) {\n        return distances[a[0].x][a[0].y] + dA < distances[b[0].x][b[0].y] + dB;\n      }\n      return a[1] < b[1];\n    }\n  );\n\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n  return [visited, []];\n};\n\nconst manhattanDistance: (a: node, b: node) => number = (a, b) => {\n  return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n};\n","import { node } from \"../usefulInterfaces\";\nimport { dfs } from \"./singleTarget/dfs\";\nimport { bfs } from \"./singleTarget/bfs\";\nimport { dijkstra } from \"./singleTarget/dijkstra\";\nimport { aStar } from \"./singleTarget/aStar\";\nimport { greedy } from \"./multipleTarget/greedy\";\n\nexport const singleTargetAlgorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    targetList: node[]\n  ) => [node[], node[]];\n} = {\n  \"Depth First Search\": dfs,\n  \"Breadth First Search\": bfs,\n  \"Dijkstra's algorithm\": dijkstra,\n  \"A* algorithm\": aStar,\n};\n\nexport const multipleTargetsAlgorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    targetList: node[]\n  ) => [node[], node[]][];\n} = {\n  \"Nearest Neighbors (Greedy)\": greedy,\n};\n","import { node } from \"../../usefulInterfaces\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const dfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the stack\n  let stack: node[] = [startNode];\n\n  // While the stack is not empty\n  while (stack.length > 0) {\n    // Get the element in front of the stack\n    let currentNode: node = ensure(stack.pop());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (targetList.find((targetNode) => currentNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the node is on the board\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the discovered array\n      discovered.push(nextNode);\n\n      // Push the nextNode to the stack\n      stack.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n","import { node } from \"../../usefulInterfaces\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (targetList.find((targetNode) => currentNode === targetNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n","import { node } from \"../../usefulInterfaces\";\nimport { dijkstraHelper } from \"../singleTarget/dijkstra\";\n\nexport const greedy: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]][] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  let currentStartNode: node = startNode;\n  let allVisitedAndPaths: [node[], node[]][] = [];\n  while (targetList.length > 0) {\n    let [visited, path, endNode] = dijkstraHelper(\n      grid,\n      pairGrid,\n      mazeGraph,\n      currentStartNode,\n      targetList\n    );\n    targetList = targetList.filter((targetNode) => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n  return allVisitedAndPaths;\n};\n","import { ensure } from \"../ensureNotUndefined\";\nimport { node } from \"../usefulInterfaces\";\n\nconst createMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [\n  [number, number][][],\n  Map<[number, number], [[number, number], number][]>\n] = (rowLength, columnLength, grid) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n\n  // Create the maze graph\n  let mazeGraph: Map<\n    [number, number],\n    [[number, number], number][]\n  > = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n\n  return [pairGrid, mazeGraph];\n};\n\nexport const createEmptyMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      let neighbors: [number, number][] = getNeighborsEmpty(\n        pairGrid,\n        [i, j],\n        columnLength,\n        rowLength\n      );\n\n      mazeGraph.set(pairGrid[i][j], neighbors);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const generateMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][],\n  wallsDensity: number,\n  mudDendity: number,\n  mudWeigth: number\n) => [\n  [number, number][][],\n  Map<[number, number], [[number, number], number][]>\n] = (rowLength, columnLength, grid, wallsDensity, mudDensity, mudWeight) => {\n  const MUD_WEIGHT = mudWeight;\n\n  let [pairGrid, mazeGraph]: [\n    [number, number][][],\n    Map<[number, number], [[number, number], number][]>\n  ] = createMazeGraph(rowLength, columnLength, grid);\n\n  let currentWallsCount: number =\n      2 * (rowLength - 1) * (columnLength - 1) + rowLength + columnLength - 2,\n    maxWallsOrMud = currentWallsCount;\n\n  // I. Generate a maze where each cells is reachable (with a DFS)\n\n  // 1. Choose the initial cell, mark it as visited and push it to the stack\n  let startNode: [number, number] = pairGrid[0][0];\n  let stack: [number, number][] = [startNode];\n  let visited: [number, number][] = [startNode];\n\n  // 2. While the stack is not empty\n  while (stack.length > 0) {\n    // 1. Pop a cell from the stack and make it a current cell\n    let currentNode: [number, number] = ensure(stack.pop());\n    let currentNonVisitedNeighbors: [number, number][] = getNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      visited\n    );\n    // 2. If the current cell has any neighbours which have not been visited\n    if (currentNonVisitedNeighbors.length > 0) {\n      // 1. Push the current cell to the stack\n      stack.push(currentNode);\n\n      // 2. Choose one of the unvisited neighbours\n      let randIndex: number = Math.floor(\n        Math.random() * currentNonVisitedNeighbors.length\n      );\n      let neighborNode: [number, number] =\n        currentNonVisitedNeighbors[randIndex];\n\n      // 3. Remove the wall between the current cell and the chosen cell\n      let currentNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push([neighborNode, 1]);\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push([currentNode, 1]);\n\n      // 4. Mark the ch// mazeGraph.set(neighborNode, neighborNodeNeighbors);osen cell as visited and push it to the stack\n      visited.push(neighborNode);\n      stack.push(neighborNode);\n\n      // 5. Remove 1 from the currentWallsCount\n      currentWallsCount--;\n    }\n  }\n\n  // II. Remove walls until the desired density is achieved\n  let maxWallsCount: number = currentWallsCount;\n  while (currentWallsCount * (1 / maxWallsCount) > wallsDensity) {\n    // 1. Choose a node randomly\n    let randRow: number = Math.floor(Math.random() * rowLength);\n    let randCol: number = Math.floor(Math.random() * columnLength);\n    let currentNode: [number, number] = pairGrid[randCol][randRow];\n\n    // 2. Get the cells with a wall with the current cell\n    let neighbors: [number, number][] = getWalledOffNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      mazeGraph\n    );\n\n    if (neighbors.length > 0) {\n      // 3. Choose one of the cells with a wall\n      let randIndex: number = Math.floor(Math.random() * neighbors.length);\n      let neighborNode: [number, number] =\n        pairGrid[neighbors[randIndex][0]][neighbors[randIndex][1]];\n\n      // 4. Remove the wall between the 2 cells\n      let currentNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push([neighborNode, 1]);\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push([currentNode, 1]);\n\n      currentWallsCount--;\n    }\n  }\n\n  // III. Add mud to the graph until we get the desired mud density\n  let currentMud: number = 0,\n    maxMud: number = maxWallsOrMud - currentWallsCount;\n  while (currentMud * (1 / maxMud) < mudDensity) {\n    // 1. Choose a node randomly\n    let randRow: number = Math.floor(Math.random() * rowLength);\n    let randCol: number = Math.floor(Math.random() * columnLength);\n    let currentNode: [number, number] = pairGrid[randCol][randRow];\n\n    // 2. Get the neighbors than have no mud\n    let neighbors: [[number, number], number][] = ensure(\n      mazeGraph.get(currentNode)\n    ).filter((item: [[number, number], number]) => item[1] === 1);\n\n    if (neighbors.length > 0) {\n      // 3. Get a random neighbor\n      let randIndex: number = Math.floor(Math.random() * neighbors.length);\n      let neighborNode: [number, number] =\n        pairGrid[neighbors[randIndex][0][0]][neighbors[randIndex][0][1]];\n\n      neighbors[randIndex][1] = MUD_WEIGHT;\n\n      let neighborNodeNeighbors: [[number, number], number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      let currentNodeAndDistance: [[number, number], number] = ensure(\n        neighborNodeNeighbors.find(\n          (item: [[number, number], number]) => item[0] === currentNode\n        )\n      );\n      currentNodeAndDistance[1] = MUD_WEIGHT;\n      currentMud++;\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nconst getNeighbors: (\n  grid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  visited: [number, number][]\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  visited\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      !visited.includes(pairGrid[neighborX][neighborY])\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\nexport const getNeighborsEmpty: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  columnLength: number,\n  rowLength: number\n) => [number, number][] = (pairGrid, currentNode, columnLength, rowLength) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n\n// This function returns the neighbors which have a wall with the current node\nconst getWalledOffNeighbors: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  mazeGraph: Map<[number, number], [[number, number], number][]>\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  mazeGraph\n) => {\n  const directions = [\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [0, 1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  const findCallback: (neighbor: [[number, number], number]) => boolean = (\n    neighbor\n  ) => {\n    return neighbor[0] === pairGrid[neighborX][neighborY];\n  };\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength &&\n      // !mazeGraph.get(currentNode)?.includes(pairGrid[neighborX][neighborY])\n      !mazeGraph.get(currentNode)?.find(findCallback)\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n  return neighbors;\n};\n","import { node } from \"./usefulInterfaces\";\n\n// This function (Not a React Component!) is made to initialize the grid rendered in the App component.\nexport const constructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  endNode: [number, number],\n  numberOfTargets: number\n) => [node[][], node, node[]] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  endNode,\n  numberOfTargets\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\",\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  result[endNode[0]][endNode[1]].hasCheese = true;\n  let targetList: node[] = [result[endNode[0]][endNode[1]]];\n  if (numberOfTargets >= 1)\n    [result, targetList] = piecesOfCheese(\n      result,\n      startNode,\n      endNode,\n      numberOfTargets\n    );\n  return [result, result[startNode[0]][startNode[1]], targetList];\n};\n\nexport const reconstructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  targetList: node[]\n) => [node[][], node, node[]] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  targetList\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: targetList.find(\n          (targetNode) => targetNode.x === i && targetNode.y === j\n        )\n          ? true\n          : false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\",\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  let newTargetList: node[] = targetList.map(\n    (targetNode) => result[targetNode.x][targetNode.y]\n  );\n  return [result, result[startNode[0]][startNode[1]], newTargetList];\n};\n\nconst piecesOfCheese: (\n  grid: node[][],\n  startNode: [number, number],\n  endNode: [number, number],\n  cheeseNum: number\n) => [node[][], node[]] = (grid, startNode, endNode, cheeseNum) => {\n  const n: number = grid.length,\n    m: number = grid[0].length;\n  const targetList: node[] = [grid[endNode[0]][endNode[1]]];\n  let visited: boolean[][] = new Array(n);\n  for (let i: number = 0; i < n; ++i) {\n    visited[i] = new Array(m);\n  }\n  for (let i: number = 0; i < n; ++i) {\n    for (let j: number = 0; j < m; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode[0]][startNode[1]] = true;\n  visited[endNode[0]][endNode[1]] = true;\n  for (let k: number = 0; k < cheeseNum; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * n);\n      j = Math.floor(Math.random() * m);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    grid[i][j].hasCheese = true;\n    targetList.push(grid[i][j]);\n  }\n  return [grid, targetList];\n};\n\nexport const addPiecesOfCheese: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: node,\n  oldTargetList: node[],\n  cheeseToAdd: number\n) => [node[][], node, node[]] = (\n  numberOfRows,\n  numberOfColumn,\n  startNode,\n  oldTargetList,\n  cheeseToAdd\n) => {\n  // let targetList: node[] = [];\n  while (cheeseToAdd < 0) {\n    let randIndex: number = Math.floor(Math.random() * oldTargetList.length);\n    oldTargetList = oldTargetList.filter(\n      (targetNode, index) => index !== randIndex\n    );\n    cheeseToAdd++;\n  }\n\n  const [newGrid, newStartNode, targetList] = reconstructGrid(\n    numberOfRows,\n    numberOfColumn,\n    [startNode.x, startNode.y],\n    oldTargetList\n  );\n\n  let visited: boolean[][] = new Array(numberOfColumn);\n  for (let i: number = 0; i < numberOfColumn; ++i) {\n    visited[i] = new Array(numberOfRows);\n  }\n  for (let i: number = 0; i < numberOfColumn; ++i) {\n    for (let j: number = 0; j < numberOfRows; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode.x][startNode.y] = true;\n  targetList.forEach((targetNode) => {\n    visited[targetNode.x][targetNode.y] = true;\n  });\n  for (let k: number = 0; k < cheeseToAdd; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * numberOfColumn);\n      j = Math.floor(Math.random() * numberOfRows);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    newGrid[i][j].hasCheese = true;\n    targetList.push(newGrid[i][j]);\n  }\n  return [newGrid, newStartNode, targetList];\n};\n","import React, { useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\ninterface WrapperProps {\n  handleEnter: any;\n  timeout: number;\n  classNames: string;\n  in: boolean;\n  unmountOnExit: boolean;\n  appear?: boolean;\n}\n\nexport const WrapperCSSTransition: React.FC<WrapperProps> = ({\n  handleEnter,\n  ...props\n}) => {\n  const nodeRef = useRef<HTMLDivElement>(null);\n\n  // This function calculates the height of a DOM element\n  const calcHeight: (isAppearing: boolean) => void = (isAppearing) => {\n    const el = nodeRef.current;\n    const height: number = el !== null ? el.offsetHeight : 0;\n    handleEnter(height);\n  };\n\n  return (\n    <CSSTransition nodeRef={nodeRef} {...props} onEnter={calcHeight}>\n      <div ref={nodeRef}>{props.children}</div>\n    </CSSTransition>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n  DropDownToggleSwich,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport {\n  singleTargetAlgorithms,\n  multipleTargetsAlgorithms,\n} from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport {\n  addPiecesOfCheese,\n  constructGrid,\n  reconstructGrid,\n} from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 125;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24],\n  0\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  2\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  const gridRef = useRef(firstGrid);\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [isVisualized, setIsVisualized] = useState(0);\n\n  // States managing the maze\n  const [maze, setMaze] = useState(mazeGraph);\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [mudWeight, setMudWeight] = useState(2);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n  const [shouldGenerateMaze, setShouldGenerateMaze] = useState(false);\n  const didMount = useRef(false);\n  const [showNumbers, setShowNumbers] = useState(false);\n\n  // States of the start and end nodes\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [targetList, setTargetList] = useState(firstTargetList);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\n    \"Dijkstra's algorithm\"\n  );\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\n    \"Nearest Neighbors (Greedy)\"\n  );\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeSingleTargetAlgorithm: (\n    visited: node[],\n    path: node[],\n    timeout: number\n  ) => number = (visited, path, timeout) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isVisited: true,\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is there to visualize multipleTargetsAlgorithms\n  const visualizeMultipleTargetsAlgorithm: (\n    allVisitedAndPathsArray: [node[], node[]][]\n  ) => number = (allVisitedAndPathsArray) => {\n    let n: number = allVisitedAndPathsArray.length;\n    let currentTimeout: number = 0;\n    for (let i: number = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(\n        visited,\n        path,\n        currentTimeout\n      );\n\n      currentTimeout += 1250;\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        for (let x: number = 0; x < newGrid.length; x++) {\n          for (let y: number = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = {\n              ...gridRef.current[x][y],\n              isVisited: false,\n            };\n          }\n        }\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n    return currentTimeout;\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      numberOfTargets > 1\n        ? setMultipleTargetsAlgorithm(algorithmName)\n        : setSingleTargetAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      if (numberOfTargets === 1) {\n        const [visited, path]: [node[], node[]] = singleTargetAlgorithms[\n          singleTargetAlgorithm\n        ](grid, pairGrid, maze, startNode, targetList);\n        const n: number = visited.length,\n          m: number = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 1250);\n        return;\n      }\n      const allVisitedAndPaths: [node[], node[]][] = multipleTargetsAlgorithms[\n        multipleTargetsAlgorithm\n      ](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout: number = visualizeMultipleTargetsAlgorithm(\n        allVisitedAndPaths\n      );\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, timeout);\n    }\n    if (isVisualized === 2) {\n      reinitializeGrid();\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        grid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setShouldGenerateMaze(false);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        targetList\n      );\n      for (let i: number = 0; i < newGrid.length; i++) {\n        for (let j: number = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // toggles on and off the multiple targets\n  const toggleMultipleTargetGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      let newGrid, newStartNode, newTargetList;\n      if (numberOfTargets > 1) {\n        [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          startNode,\n          targetList,\n          numberOfTargets - targetList.length\n        );\n        for (let i: number = 0; i < newGrid.length; i++) {\n          for (let j: number = 0; j < newGrid[0].length; j++) {\n            gridRef.current[i][j] = newGrid[i][j];\n          }\n        }\n      } else {\n        [newGrid, newStartNode, newTargetList] = constructGrid(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          [startNode.x, startNode.y],\n          [6, 24],\n          0\n        );\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // If the value of multipleTargets change, call the reinitialize function\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]);\n\n  // handle the change of the number of targets\n  const handleChangeNumberOfTargets: (val: number) => void = (val) => {\n    setNumberOfTargets(Math.floor(val));\n  };\n\n  // handle the click on the multiple targets button\n  const handleMultipleTargets: () => void = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(\n        numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\"\n      );\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  // toggle the start node in the grid\n  const toggleStartNode: (x: number, y: number) => void = (x, y) => {\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [x, y],\n      targetList\n    );\n    for (let x: number = 0; x < newGrid.length; x++) {\n      for (let y: number = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n    if (grid[x][y] === startNode) {\n      setMouseIsPressed(true);\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n    if (mouseIsPressed) {\n      toggleStartNode(x, y);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  // function that returns the text in the visualization button\n  const getVisualizeText: () => string = () => {\n    if (isVisualized <= 0)\n      return (\n        \"Visualize \" +\n        (numberOfTargets > 1\n          ? multipleTargetsAlgorithm\n          : singleTargetAlgorithm) +\n        \"!\"\n      );\n    return \"Reinitialize Visualization\";\n  };\n\n  // updates the maze in real time\n  useEffect(() => {\n    if (didMount.current) setShouldGenerateMaze(true);\n    else didMount.current = true;\n  }, [wallsDensity, mudDensity, mudWeight]);\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Generate New Maze\"\n          isVisualized={isVisualized}\n          className={\n            \"generate-maze \" + (shouldGenerateMaze ? \"should-generate\" : \"\")\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu left={true}>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1.1}\n              maxValue={3}\n              step={0.1}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n            <DropDownToggleSwich\n              text=\"Show Mud Weights ?\"\n              shouldShowWeights={showNumbers}\n              handleChange={() => setShowNumbers(!showNumbers)}\n            />\n            {numberOfTargets > 1 && (\n              <DropDownSlider\n                text=\"Number of Targets\"\n                minValue={2}\n                maxValue={10}\n                step={1}\n                defaultValue={numberOfTargets}\n                handleChange={handleChangeNumberOfTargets}\n              ></DropDownSlider>\n            )}\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={getVisualizeText()}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out highlight\"\n          visualizedClassName=\"highlight\"\n          handleClick={handleVisualization}\n        />\n        <NavButton\n          text={\n            (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\"\n          }\n          isVisualized={isVisualized}\n          className={\n            numberOfTargets > 1\n              ? \"disable-multiple-targets\"\n              : \"enable-multiple-targets\"\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleMultipleTargets}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-single-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {singleTargetAlgorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {singleTargetAlgorithm === \"Breadth First Search\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {singleTargetAlgorithm === \"Dijkstra's algorithm\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {singleTargetAlgorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-multiple-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\n                  \"Nearest Neighbors (Greedy)\"\n                )}\n              >\n                <p>Nearest Neighbors (Greedy)</p>\n                {multipleTargetsAlgorithm === \"Nearest Neighbors (Greedy)\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n        showNumbers={showNumbers}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/pathfinding-visualizer\" component={Visualizer} />\n          {/* <Route path=\"/react-rat\" component={ReactRat} /> */}\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import PathFindingVisualizer from \"./Visualizer/PathFindingVisualizer\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}