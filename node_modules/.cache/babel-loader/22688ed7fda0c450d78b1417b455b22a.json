{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{retrievePath}from\"./retrievePath\";import{ensure}from\"../ensureNotUndefined\";export var bfs=function bfs(grid,pairGrid,mazeGraph,startNode,endNode){var m=grid.length,n=grid[0].length;// Initialize the predecessor array\nvar predecessor=[];predecessor.fill(startNode,0,m*n);predecessor[startNode.id]=startNode;// Initialize the visited nodes array\nvar visited=[];// Initialize the discovered array\nvar discovered=[startNode];// Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\nvar q=[startNode];// While the queue is not empty\nvar _loop=function _loop(){// Get the element in front of the queue\nvar currentNode=ensure(q.shift());if(visited.find(function(visitedNode){return visitedNode===currentNode;}))return\"continue\";// Put the currentNode node in the visited set\nvisited.push(currentNode);// If we found the end node, return the path to it\nif(currentNode===endNode){// Retrieve the shortest path\nvar shortestPath=retrievePath(predecessor,startNode,endNode);return{v:[visited,shortestPath]};}// iterate through the neighbors of the currentNode node\nvar _iterator=_createForOfIteratorHelper(ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))),_step;try{var _loop2=function _loop2(){var neighbor=_step.value;// Get the coordinates of the neighbor node\nvar neighborX=neighbor[0],neighborY=neighbor[1];if(neighborX<0||neighborX>=m||neighborY<0||neighborY>=n||discovered.find(function(discoveredNode){return discoveredNode===grid[neighborX][neighborY];}))return\"continue\";// Get the node in the grid\nvar nextNode=grid[neighborX][neighborY];// update the predecessor array\npredecessor[nextNode.id]=currentNode;// Add the node to the visited nodes\ndiscovered.push(nextNode);// Push the next node to the queue\nq.push(nextNode);};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret2=_loop2();if(_ret2===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};while(q.length>0){var _ret=_loop();if(_ret===\"continue\")continue;if(typeof _ret===\"object\")return _ret.v;}return[visited,[]];};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/shortestPathAlgorithms/bfs.ts"],"names":["retrievePath","ensure","bfs","grid","pairGrid","mazeGraph","startNode","endNode","m","length","n","predecessor","fill","id","visited","discovered","q","currentNode","shift","find","visitedNode","push","shortestPath","get","x","y","neighbor","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"sNACA,OAASA,YAAT,KAA6B,gBAA7B,CACA,OAASC,MAAT,KAAuB,uBAAvB,CAEA,MAAO,IAAMC,CAAAA,GAMQ,CAAG,QANXA,CAAAA,GAMW,CAACC,IAAD,CAAOC,QAAP,CAAiBC,SAAjB,CAA4BC,SAA5B,CAAuCC,OAAvC,CAAmD,CACzE,GAAMC,CAAAA,CAAC,CAAGL,IAAI,CAACM,MAAf,CACEC,CAAC,CAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CAGA;AACA,GAAME,CAAAA,WAAmB,CAAG,EAA5B,CACAA,WAAW,CAACC,IAAZ,CAAiBN,SAAjB,CAA4B,CAA5B,CAA+BE,CAAC,CAAGE,CAAnC,EACAC,WAAW,CAACL,SAAS,CAACO,EAAX,CAAX,CAA4BP,SAA5B,CAEA;AACA,GAAIQ,CAAAA,OAAe,CAAG,EAAtB,CAEA;AACA,GAAIC,CAAAA,UAAkB,CAAG,CAACT,SAAD,CAAzB,CAEA;AACA,GAAIU,CAAAA,CAAS,CAAG,CAACV,SAAD,CAAhB,CAEA;AAlByE,2BAoBvE;AACA,GAAIW,CAAAA,WAAiB,CAAGhB,MAAM,CAACe,CAAC,CAACE,KAAF,EAAD,CAA9B,CAEA,GAAIJ,OAAO,CAACK,IAAR,CAAa,SAACC,WAAD,QAAiBA,CAAAA,WAAW,GAAKH,WAAjC,EAAb,CAAJ,CAAgE,iBAEhE;AACAH,OAAO,CAACO,IAAR,CAAaJ,WAAb,EAEA;AACA,GAAIA,WAAW,GAAKV,OAApB,CAA6B,CAC3B;AACA,GAAMe,CAAAA,YAAY,CAAGtB,YAAY,CAACW,WAAD,CAAcL,SAAd,CAAyBC,OAAzB,CAAjC,CACA,SAAO,CAACO,OAAD,CAAUQ,YAAV,CAAP,EACD,CAED;AAnCuE,yCAoChDrB,MAAM,CAC3BI,SAAS,CAACkB,GAAV,CAAcnB,QAAQ,CAACa,WAAW,CAACO,CAAb,CAAR,CAAwBP,WAAW,CAACQ,CAApC,CAAd,CAD2B,CApC0C,4CAoC5DC,CAAAA,QApC4D,aAuCrE;AACA,GAAIC,CAAAA,SAAiB,CAAGD,QAAQ,CAAC,CAAD,CAAhC,CACEE,SAAiB,CAAGF,QAAQ,CAAC,CAAD,CAD9B,CAGA,GACEC,SAAS,CAAG,CAAZ,EACAA,SAAS,EAAInB,CADb,EAEAoB,SAAS,CAAG,CAFZ,EAGAA,SAAS,EAAIlB,CAHb,EAIAK,UAAU,CAACI,IAAX,CACE,SAACU,cAAD,QAAoBA,CAAAA,cAAc,GAAK1B,IAAI,CAACwB,SAAD,CAAJ,CAAgBC,SAAhB,CAAvC,EADF,CALF,CASE,iBAEF;AACA,GAAIE,CAAAA,QAAc,CAAG3B,IAAI,CAACwB,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CAEA;AACAjB,WAAW,CAACmB,QAAQ,CAACjB,EAAV,CAAX,CAA2BI,WAA3B,CAEA;AACAF,UAAU,CAACM,IAAX,CAAgBS,QAAhB,EAEA;AACAd,CAAC,CAACK,IAAF,CAAOS,QAAP,EAhEqE,EAoCvE,+CAEG,0CAcC,SAaH,CAjEsE,uDAmBzE,MAAOd,CAAC,CAACP,MAAF,CAAW,CAAlB,CAAqB,uCAI6C,SAJ7C,wCA+CpB,CAED,MAAO,CAACK,OAAD,CAAU,EAAV,CAAP,CACD,CA3EM","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0],\n        neighborY: number = neighbor[1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}