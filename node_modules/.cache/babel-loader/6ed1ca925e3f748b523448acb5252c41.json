{"ast":null,"code":"import React from\"react\";import\"./GridNode.css\";import{node}from\"../helperFunctions/usefulInterfaces\";var getAddedClassName=function getAddedClassName(neighbors,node){var addedClassName=\"\";for(var i=0;i<neighbors.length;i++){var neighbor=neighbors[i];var neighborX=neighbor[0][0],neighborY=neighbor[0][1],distance=neighbor[1];if(neighborX===node.x+1)addedClassName+=distance==1?\" no-wall-bottom\":\" mud-bottom\";if(neighborX===node.x-1)addedClassName+=distance==1?\" no-wall-top\":\" mud-top\";if(neighborY===node.y+1)addedClassName+=distance==1?\" no-wall-right\":\" mud-right\";if(neighborY===node.y-1)addedClassName+=distance==1?\" no-wall-left\":\" mud-left\";}if(node.hasCheese)addedClassName+=\" cheese\";if(node.isShortestPath)addedClassName+=\" shortest-path-node\";if(node.isVisited)addedClassName+=\" visited-node\";return addedClassName;};// This component represents a single Node in the grid rendered in the DOM\nexport var _GridNode=function _GridNode(_ref){var numberOfElementsPerRow=_ref.numberOfElementsPerRow,node=_ref.node,neighbors=_ref.neighbors;var addEmoji=function addEmoji(node){if(node.isStart){return/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"rat\",className:\"content\"},\"\\uD83D\\uDC00\");}if(node.isEnd){return/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"rat\",className:\"content\"},\"\\uD83E\\uDDC0\");}return/*#__PURE__*/React.createElement(\"span\",null);};// const addMud: (node: node) => any = (node) => {\n//   return (\n//     <div></div>\n//     <div></div>\n//     <div></div>\n//     <div></div>\n//   );\n// }\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"grid-node\"+getAddedClassName(neighbors,node)},addEmoji(node));};var areEqual=function areEqual(prevProps,nextProps){return prevProps.node.isVisited===nextProps.node.isVisited&&prevProps.node.isShortestPath===nextProps.node.isShortestPath&&getAddedClassName(prevProps.neighbors,prevProps.node)===getAddedClassName(nextProps.neighbors,nextProps.node);};export var GridNode=React.memo(_GridNode,areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","node","getAddedClassName","neighbors","addedClassName","i","length","neighbor","neighborX","neighborY","distance","x","y","hasCheese","isShortestPath","isVisited","_GridNode","numberOfElementsPerRow","addEmoji","isStart","isEnd","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [[number, number], number][];\n}\n\nconst getAddedClassName: (\n  neighbors: [[number, number], number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [[number, number], number] = neighbors[i];\n    let neighborX = neighbor[0][0],\n      neighborY = neighbor[0][1],\n      distance: number = neighbor[1];\n    if (neighborX === node.x + 1)\n      addedClassName += distance == 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n    if (neighborX === node.x - 1)\n      addedClassName += distance == 1 ? \" no-wall-top\" : \" mud-top\";\n    if (neighborY === node.y + 1)\n      addedClassName += distance == 1 ? \" no-wall-right\" : \" mud-right\";\n    if (neighborY === node.y - 1)\n      addedClassName += distance == 1 ? \" no-wall-left\" : \" mud-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üêÄ\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üßÄ\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  // const addMud: (node: node) => any = (node) => {\n  //   return (\n  //     <div></div>\n  //     <div></div>\n  //     <div></div>\n  //     <div></div>\n  //   );\n  // }\n\n  return (\n    <div className={\"grid-node\" + getAddedClassName(neighbors, node)}>\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node)\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}