{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavDropDownItem, DropDownMenu, DropDownAlgo, DropDownSlider, NavChangingButtonItem } from \"../NavBar/NavBar\";\nimport { dijkstraWithWalls } from \"../helper_functions/shortestPathAlgorithms/dijkstra\";\nimport { createEmptyMazeGraph, generateMazeGraph } from \"../helper_functions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helper_functions/constructGrid\";\nconst NUMBER_OF_ROWS = 28;\nconst NUMBER_OF_COLUMN = 13; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(NUMBER_OF_ROWS, NUMBER_OF_COLUMN, [6, 3], [6, 24]);\nconst [firstpairGrid, mazeGraph] = createEmptyMazeGraph(NUMBER_OF_ROWS, NUMBER_OF_COLUMN, firstGrid); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"dijkstraWithWalls\");\n  const [wallsDensity, setWallsDensity] = useState(0.7);\n  const [isVisualized, setIsVisualized] = useState(false); // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  // States of the start and end node\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeAlgorithm = (visited, path) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: true,\n          className: \"grid-node visited-node\",\n          waitClassChange: 0\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, 30 * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isShortestPath: true,\n          className: \"grid-node shortest-path-node\",\n          waitClassChange: 0\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, 30 * n + 150 * i);\n    }\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    setAlgorithm(algorithmName);\n  }; // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n\n\n  const chooseAlgorithm = algorithmName => {\n    if (algorithmName === \"dijkstraWithWalls\") {\n      return dijkstraWithWalls;\n    }\n\n    return dijkstraWithWalls;\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    const newGrid = grid.slice();\n    const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_ROWS, NUMBER_OF_COLUMN, newGrid, wallsDensity);\n    setGrid(newGrid);\n    setPairGrid(newPairGrid);\n    setMaze(newMaze);\n  }; // Reinitialize the the board\n\n\n  const reinitialize = () => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(NUMBER_OF_ROWS, NUMBER_OF_COLUMN, [startNode.x, startNode.y], [endNode.x, endNode.y]);\n    const [newPairGrid, newMaze] = createEmptyMazeGraph(NUMBER_OF_ROWS, NUMBER_OF_COLUMN, newGrid);\n    setGrid(newGrid);\n    setPairGrid(newPairGrid);\n    setMaze(newMaze);\n    setStartNode(newStartNode);\n    setEndNode(newEndNode);\n    setIsVisualized(false);\n  }; // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n  // Render the app\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavChangingButtonItem, {\n    isVisualized: isVisualized,\n    className: \"reinitialize\",\n    visualizedClassName: \"highlight\",\n    handleClick: reinitialize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, \"Reinitialize\"), /*#__PURE__*/React.createElement(NavChangingButtonItem, {\n    isVisualized: isVisualized,\n    className: \"generate-maze\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, \"Generate maze\"), /*#__PURE__*/React.createElement(NavDropDownItem, {\n    icon: \"\",\n    text: \"Maze options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    left: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    isVisualized: isVisualized,\n    minValue: 0.1,\n    maxValue: 1,\n    defaultValue: wallsDensity,\n    text: \"Density of walls\",\n    handleChangeWallsDensity: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavChangingButtonItem, {\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: () => {\n      if (!isVisualized) {\n        visualizeAlgorithm(...chooseAlgorithm(algorithm)(grid, pairGrid, maze, startNode, endNode));\n        setIsVisualized(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, \"Visualize!\"), /*#__PURE__*/React.createElement(NavDropDownItem, {\n    icon: \"\\u3233\",\n    text: \"Algorithm\",\n    className: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    left: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownAlgo, {\n    changeAlgorithm: handleAlgorithmChange,\n    algorithmName: \"dijkstraWithWalls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"Dijkstra's Algorithm \", algorithm == \"dijkstraWithWalls\" ? \"âœ“\" : \"\")))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useState","Grid","NavBar","NavDropDownItem","DropDownMenu","DropDownAlgo","DropDownSlider","NavChangingButtonItem","dijkstraWithWalls","createEmptyMazeGraph","generateMazeGraph","constructGrid","NUMBER_OF_ROWS","NUMBER_OF_COLUMN","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","isVisualized","setIsVisualized","startNode","setStartNode","endNode","setEndNode","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","node","x","y","newNode","isVisited","className","waitClassChange","m","isShortestPath","handleAlgorithmChange","algorithmName","chooseAlgorithm","generateMaze","newPairGrid","newMaze","reinitialize","newStartNode","newEndNode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavDropDownItem,\n  DropDownMenu,\n  DropDownAlgo,\n  DropDownSlider,\n  NavChangingButtonItem,\n} from \"../NavBar/NavBar\";\nimport { SecondaryHeader } from \"../SecondaryHeader/SecondaryHeader\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\nimport {\n  dijkstra,\n  dijkstraWithWalls,\n} from \"../helper_functions/shortestPathAlgorithms/dijkstra\";\nimport {\n  createEmptyMazeGraph,\n  generateMazeGraph,\n} from \"../helper_functions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helper_functions/constructGrid\";\n\nconst NUMBER_OF_ROWS: number = 28;\nconst NUMBER_OF_COLUMN: number = 13;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_ROWS,\n  NUMBER_OF_COLUMN,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = createEmptyMazeGraph(\n  NUMBER_OF_ROWS,\n  NUMBER_OF_COLUMN,\n  firstGrid\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"dijkstraWithWalls\");\n  const [wallsDensity, setWallsDensity] = useState(0.7);\n  const [isVisualized, setIsVisualized] = useState(false);\n  // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode = {\n          ...node,\n          isVisited: true,\n          className: \"grid-node visited-node\",\n          waitClassChange: 0,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, 30 * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode = {\n          ...node,\n          isShortestPath: true,\n          className: \"grid-node shortest-path-node\",\n          waitClassChange: 0,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, 30 * n + 150 * i);\n    }\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => void = (\n    algorithmName\n  ) => {\n    setAlgorithm(algorithmName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: (\n    algorithmName: string\n  ) => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [number, number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = (algorithmName) => {\n    if (algorithmName === \"dijkstraWithWalls\") {\n      return dijkstraWithWalls;\n    }\n    return dijkstraWithWalls;\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    const newGrid = grid.slice();\n    const [newPairGrid, newMaze] = generateMazeGraph(\n      NUMBER_OF_ROWS,\n      NUMBER_OF_COLUMN,\n      newGrid,\n      wallsDensity\n    );\n    setGrid(newGrid);\n    setPairGrid(newPairGrid);\n    setMaze(newMaze);\n  };\n\n  // Reinitialize the the board\n  const reinitialize: () => void = () => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(\n      NUMBER_OF_ROWS,\n      NUMBER_OF_COLUMN,\n      [startNode.x, startNode.y],\n      [endNode.x, endNode.y]\n    );\n    const [newPairGrid, newMaze] = createEmptyMazeGraph(\n      NUMBER_OF_ROWS,\n      NUMBER_OF_COLUMN,\n      newGrid\n    );\n    setGrid(newGrid);\n    setPairGrid(newPairGrid);\n    setMaze(newMaze);\n    setStartNode(newStartNode);\n    setEndNode(newEndNode);\n    setIsVisualized(false);\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n\n  // Render the app\n  return (\n    <div className=\"App\">\n      <NavBar>\n        <NavChangingButtonItem\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitialize}\n        >\n          Reinitialize\n        </NavChangingButtonItem>\n        <NavChangingButtonItem\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        >\n          Generate maze\n        </NavChangingButtonItem>\n        <NavDropDownItem\n          icon=\"\"\n          text=\"Maze options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu left={false}>\n            <DropDownSlider\n              isVisualized={isVisualized}\n              minValue={0.1}\n              maxValue={1}\n              defaultValue={wallsDensity}\n              text=\"Density of walls\"\n              handleChangeWallsDensity={setWallsDensity}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavDropDownItem>\n        <NavChangingButtonItem\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={() => {\n            if (!isVisualized) {\n              visualizeAlgorithm(\n                ...chooseAlgorithm(algorithm)(\n                  grid,\n                  pairGrid,\n                  maze,\n                  startNode,\n                  endNode\n                )\n              );\n              setIsVisualized(true);\n            }\n          }}\n        >\n          Visualize!\n        </NavChangingButtonItem>\n        <NavDropDownItem\n          icon=\"&#12851;\"\n          text=\"Algorithm\"\n          className=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu left={true}>\n            <DropDownAlgo\n              changeAlgorithm={handleAlgorithmChange}\n              algorithmName=\"dijkstraWithWalls\"\n            >\n              Dijkstra's Algorithm {algorithm == \"dijkstraWithWalls\" ? \"âœ“\" : \"\"}\n            </DropDownAlgo>\n            {/* <DropDownAlgo\n              changeAlgorithm={handleAlgorithmChange}\n              algorithmName=\"A*\"\n            >\n              A* Algorithm\n            </DropDownAlgo> */}\n          </DropDownMenu>\n        </NavDropDownItem>\n      </NavBar>\n      {/* <SecondaryHeader>\n        <button\n          className=\"visualize-button\"\n          onClick={(e) => {\n            visualizeAlgorithm(\n              ...chooseAlgorithm(algorithm)(\n                grid,\n                pairGrid,\n                mazeGraph,\n                startNode,\n                endNode\n              )\n            );\n          }}\n        >\n          Visualize the path!\n        </button>\n      </SecondaryHeader> */}\n      <Grid grid={grid} pairGrid={pairGrid} maze={maze} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}