{"ast":null,"code":"import _slicedToArray from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{BinaryHeap}from\"../../dataStructures/binaryHeap\";import{retrievePath}from\"../retrievePath\";import{ensure}from\"../../ensureNotUndefined\";export var dijkstraHelper=function dijkstraHelper(grid,pairGrid,mazeGraph,startNode,targetList){var m=grid.length,n=grid[0].length;// Initialize the distances array\nvar distances=[];for(var i=0;i<m;i++){distances.push([]);for(var j=0;j<n;j++){distances[i].push(Number.MAX_SAFE_INTEGER-1);}}distances[startNode.x][startNode.y]=0;// Initialize the predecessor array\nvar predecessor=[];for(var _i=0;_i<m*n;_i++){predecessor.push(startNode);}predecessor[startNode.id]=startNode;// Initialize the visited nodes array\nvar visited=[];//   Initialize the Binary Heap\nvar pq=new BinaryHeap(function(a,b){if(distances[a[0].x][a[0].y]!==distances[b[0].x][b[0].y]){return distances[a[0].x][a[0].y]<distances[b[0].x][b[0].y];}return a[1]<b[1];});pq.push(startNode);var _loop=function _loop(){var currentNode=ensure(pq.pop());// add the current node to the visited nodes\nvisited.push(currentNode);// If we found the endNode, return the shortest path to it\nif(targetList.find(function(targetNode){return targetNode===currentNode;})){// Retrieve the shortest path\nvar shortestPath=retrievePath(predecessor,startNode,currentNode);return{v:[visited,shortestPath,currentNode]};}// Get the coordinates of the nodes\nvar currentX=currentNode.x;var currentY=currentNode.y;// Iterate the neighbors of the node\nvar _iterator=_createForOfIteratorHelper(ensure(mazeGraph.get(pairGrid[currentX][currentY]))),_step;try{var _loop2=function _loop2(){var neighbor=_step.value;// Get the coordinates of the neighbor node\nvar neighborX=neighbor[0][0],neighborY=neighbor[0][1];// Check if the coordinates are valid\nif(neighborX<0||neighborX>=m||neighborY<0||neighborY>=n)return\"continue\";var nextNode=grid[neighborX][neighborY];// Calculate the distance between the current node and the next node\n// To Do: take into account the weight of the path\nvar currentDistance=distances[currentX][currentY]+neighbor[1];// If the distance is less than the distance in the array distances,\n// change it and change the predecessor of the next node to be the current one\nif(currentDistance<distances[neighborX][neighborY]){predecessor[nextNode.id]=currentNode;distances[neighborX][neighborY]=currentDistance;}// If the node is not yet visited, remove it from the heap and\n// put it back in with its new distance as the score function\nif(!visited.find(function(visitedNode){return visitedNode===nextNode;})){pq.remove(nextNode);pq.push(nextNode);}};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret2=_loop2();if(_ret2===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};while(pq.size()>0){var _ret=_loop();if(typeof _ret===\"object\")return _ret.v;}return[visited,[],startNode];};export var dijkstra=function dijkstra(grid,pairGrid,mazeGraph,startNode,targetList){var _dijkstraHelper=dijkstraHelper(grid,pairGrid,mazeGraph,startNode,targetList),_dijkstraHelper2=_slicedToArray(_dijkstraHelper,2),visited=_dijkstraHelper2[0],path=_dijkstraHelper2[1];return[visited,path];};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/dijkstra.ts"],"names":["BinaryHeap","retrievePath","ensure","dijkstraHelper","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","distances","i","push","j","Number","MAX_SAFE_INTEGER","x","y","predecessor","id","visited","pq","a","b","currentNode","pop","find","targetNode","shortestPath","currentX","currentY","get","neighbor","neighborX","neighborY","nextNode","currentDistance","visitedNode","remove","size","dijkstra","path"],"mappings":"oZACA,OAASA,UAAT,KAA2B,iCAA3B,CACA,OAASC,YAAT,KAA6B,iBAA7B,CACA,OAASC,MAAT,KAAuB,0BAAvB,CAEA,MAAO,IAAMC,CAAAA,cAMc,CAAG,QANjBA,CAAAA,cAMiB,CAC5BC,IAD4B,CAE5BC,QAF4B,CAG5BC,SAH4B,CAI5BC,SAJ4B,CAK5BC,UAL4B,CAMzB,CACH,GAAMC,CAAAA,CAAC,CAAGL,IAAI,CAACM,MAAf,CACEC,CAAC,CAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CAGA;AACA,GAAME,CAAAA,SAAqB,CAAG,EAA9B,CACA,IAAK,GAAIC,CAAAA,CAAS,CAAG,CAArB,CAAwBA,CAAC,CAAGJ,CAA5B,CAA+BI,CAAC,EAAhC,CAAoC,CAClCD,SAAS,CAACE,IAAV,CAAe,EAAf,EACA,IAAK,GAAIC,CAAAA,CAAS,CAAG,CAArB,CAAwBA,CAAC,CAAGJ,CAA5B,CAA+BI,CAAC,EAAhC,CAAoC,CAClCH,SAAS,CAACC,CAAD,CAAT,CAAaC,IAAb,CAAkBE,MAAM,CAACC,gBAAP,CAA0B,CAA5C,EACD,CACF,CAEDL,SAAS,CAACL,SAAS,CAACW,CAAX,CAAT,CAAuBX,SAAS,CAACY,CAAjC,EAAsC,CAAtC,CAEA;AACA,GAAMC,CAAAA,WAAmB,CAAG,EAA5B,CACA,IAAK,GAAIP,CAAAA,EAAS,CAAG,CAArB,CAAwBA,EAAC,CAAGJ,CAAC,CAAGE,CAAhC,CAAmCE,EAAC,EAApC,CAAwC,CACtCO,WAAW,CAACN,IAAZ,CAAiBP,SAAjB,EACD,CACDa,WAAW,CAACb,SAAS,CAACc,EAAX,CAAX,CAA4Bd,SAA5B,CAEA;AACA,GAAIe,CAAAA,OAAe,CAAG,EAAtB,CAEA;AACA,GAAIC,CAAAA,EAAoB,CAAG,GAAIvB,CAAAA,UAAJ,CACzB,SAACwB,CAAD,CAAoBC,CAApB,CAA0C,CACxC,GAAIb,SAAS,CAACY,CAAC,CAAC,CAAD,CAAD,CAAKN,CAAN,CAAT,CAAkBM,CAAC,CAAC,CAAD,CAAD,CAAKL,CAAvB,IAA8BP,SAAS,CAACa,CAAC,CAAC,CAAD,CAAD,CAAKP,CAAN,CAAT,CAAkBO,CAAC,CAAC,CAAD,CAAD,CAAKN,CAAvB,CAAlC,CAA6D,CAC3D,MAAOP,CAAAA,SAAS,CAACY,CAAC,CAAC,CAAD,CAAD,CAAKN,CAAN,CAAT,CAAkBM,CAAC,CAAC,CAAD,CAAD,CAAKL,CAAvB,EAA4BP,SAAS,CAACa,CAAC,CAAC,CAAD,CAAD,CAAKP,CAAN,CAAT,CAAkBO,CAAC,CAAC,CAAD,CAAD,CAAKN,CAAvB,CAAnC,CACD,CACD,MAAOK,CAAAA,CAAC,CAAC,CAAD,CAAD,CAAOC,CAAC,CAAC,CAAD,CAAf,CACD,CANwB,CAA3B,CAQAF,EAAE,CAACT,IAAH,CAAQP,SAAR,EAlCG,2BAqCD,GAAImB,CAAAA,WAAiB,CAAGxB,MAAM,CAACqB,EAAE,CAACI,GAAH,EAAD,CAA9B,CAEA;AACAL,OAAO,CAACR,IAAR,CAAaY,WAAb,EAEA;AACA,GAAIlB,UAAU,CAACoB,IAAX,CAAgB,SAACC,UAAD,QAAgBA,CAAAA,UAAU,GAAKH,WAA/B,EAAhB,CAAJ,CAAiE,CAC/D;AACA,GAAMI,CAAAA,YAAY,CAAG7B,YAAY,CAACmB,WAAD,CAAcb,SAAd,CAAyBmB,WAAzB,CAAjC,CACA,SAAO,CAACJ,OAAD,CAAUQ,YAAV,CAAwBJ,WAAxB,CAAP,EACD,CAED;AACA,GAAIK,CAAAA,QAAgB,CAAGL,WAAW,CAACR,CAAnC,CACA,GAAIc,CAAAA,QAAgB,CAAGN,WAAW,CAACP,CAAnC,CAEA;AArDC,yCAsDsBjB,MAAM,CAC3BI,SAAS,CAAC2B,GAAV,CAAc5B,QAAQ,CAAC0B,QAAD,CAAR,CAAmBC,QAAnB,CAAd,CAD2B,CAtD5B,4CAsDUE,CAAAA,QAtDV,aAyDC;AACA,GAAIC,CAAAA,SAAiB,CAAGD,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAxB,CACEE,SAAiB,CAAGF,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CADtB,CAGA;AACA,GAAIC,SAAS,CAAG,CAAZ,EAAiBA,SAAS,EAAI1B,CAA9B,EAAmC2B,SAAS,CAAG,CAA/C,EAAoDA,SAAS,EAAIzB,CAArE,CACE,iBAEF,GAAI0B,CAAAA,QAAc,CAAGjC,IAAI,CAAC+B,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CAEA;AACA;AACA,GAAIE,CAAAA,eAAuB,CAAG1B,SAAS,CAACmB,QAAD,CAAT,CAAoBC,QAApB,EAAgCE,QAAQ,CAAC,CAAD,CAAtE,CAEA;AACA;AACA,GAAII,eAAe,CAAG1B,SAAS,CAACuB,SAAD,CAAT,CAAqBC,SAArB,CAAtB,CAAuD,CACrDhB,WAAW,CAACiB,QAAQ,CAAChB,EAAV,CAAX,CAA2BK,WAA3B,CACAd,SAAS,CAACuB,SAAD,CAAT,CAAqBC,SAArB,EAAkCE,eAAlC,CACD,CAED;AACA;AACA,GAAI,CAAChB,OAAO,CAACM,IAAR,CAAa,SAACW,WAAD,QAAiBA,CAAAA,WAAW,GAAKF,QAAjC,EAAb,CAAL,CAA8D,CAC5Dd,EAAE,CAACiB,MAAH,CAAUH,QAAV,EACAd,EAAE,CAACT,IAAH,CAAQuB,QAAR,EACD,CAnFF,EAsDD,+CAEG,0CAOC,SAqBH,CApFA,uDAoCH,MAAOd,EAAE,CAACkB,IAAH,GAAY,CAAnB,CAAsB,0DAiDrB,CACD,MAAO,CAACnB,OAAD,CAAU,EAAV,CAAcf,SAAd,CAAP,CACD,CAnGM,CAqGP,MAAO,IAAMmC,CAAAA,QAMQ,CAAG,QANXA,CAAAA,QAMW,CAACtC,IAAD,CAAOC,QAAP,CAAiBC,SAAjB,CAA4BC,SAA5B,CAAuCC,UAAvC,CAAsD,qBACpDL,cAAc,CACpCC,IADoC,CAEpCC,QAFoC,CAGpCC,SAHoC,CAIpCC,SAJoC,CAKpCC,UALoC,CADsC,oDACrEc,OADqE,qBAC5DqB,IAD4D,qBAQ5E,MAAO,CAACrB,OAAD,CAAUqB,IAAV,CAAP,CACD,CAfM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { BinaryHeap } from \"../../dataStructures/binaryHeap\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const dijkstraHelper: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[], node] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER - 1);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      if (distances[a[0].x][a[0].y] !== distances[b[0].x][b[0].y]) {\n        return distances[a[0].x][a[0].y] < distances[b[0].x][b[0].y];\n      }\n      return a[1] < b[1];\n    }\n  );\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (targetList.find((targetNode) => targetNode === currentNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath, currentNode];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n  return [visited, [], startNode];\n};\n\nexport const dijkstra: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const [visited, path] = dijkstraHelper(\n    grid,\n    pairGrid,\n    mazeGraph,\n    startNode,\n    targetList\n  );\n  return [visited, path];\n};\n"]},"metadata":{},"sourceType":"module"}