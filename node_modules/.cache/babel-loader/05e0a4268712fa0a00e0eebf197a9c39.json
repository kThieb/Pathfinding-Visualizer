{"ast":null,"code":"import { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\nexport const bfs = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode; // Initialize the visited nodes array\n\n  let visited = []; // Initialize the discovered array\n\n  let discovered = [startNode]; // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n\n  let q = [startNode]; // While the queue is not empty\n\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode = ensure(q.shift());\n    if (visited.find(visitedNode => visitedNode === currentNode)) ; // Put the currentNode node in the visited set\n\n    visited.push(currentNode); // If we found the end node, return the path to it\n\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    } // iterate through the neighbors of the currentNode node\n\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0],\n          neighborY = neighbor[1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n      predecessor[nextNode.id] = currentNode; // Add the node to the visited nodes\n\n      discovered.push(nextNode); // Push the next node to the queue\n\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/shortestPathAlgorithms/bfs.ts"],"names":["retrievePath","ensure","bfs","grid","pairGrid","mazeGraph","startNode","endNode","m","length","n","predecessor","fill","id","visited","discovered","q","currentNode","shift","find","visitedNode","push","shortestPath","neighbor","get","x","y","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,MAAMC,GAMQ,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,OAAvC,KAAmD;AACzE,QAAMC,CAAC,GAAGL,IAAI,CAACM,MAAf;AAAA,QACEC,CAAC,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CADyE,CAIzE;;AACA,QAAME,WAAmB,GAAG,EAA5B;AACAA,EAAAA,WAAW,CAACC,IAAZ,CAAiBN,SAAjB,EAA4B,CAA5B,EAA+BE,CAAC,GAAGE,CAAnC;AACAC,EAAAA,WAAW,CAACL,SAAS,CAACO,EAAX,CAAX,GAA4BP,SAA5B,CAPyE,CASzE;;AACA,MAAIQ,OAAe,GAAG,EAAtB,CAVyE,CAYzE;;AACA,MAAIC,UAAkB,GAAG,CAACT,SAAD,CAAzB,CAbyE,CAezE;;AACA,MAAIU,CAAS,GAAG,CAACV,SAAD,CAAhB,CAhByE,CAkBzE;;AACA,SAAOU,CAAC,CAACP,MAAF,GAAW,CAAlB,EAAqB;AACnB;AACA,QAAIQ,WAAiB,GAAGhB,MAAM,CAACe,CAAC,CAACE,KAAF,EAAD,CAA9B;AAEA,QAAIJ,OAAO,CAACK,IAAR,CAAcC,WAAD,IAAiBA,WAAW,KAAKH,WAA9C,CAAJ,EAA+D,CAJ5C,CAMnB;;AACAH,IAAAA,OAAO,CAACO,IAAR,CAAaJ,WAAb,EAPmB,CASnB;;AACA,QAAIA,WAAW,KAAKV,OAApB,EAA6B;AAC3B;AACA,YAAMe,YAAY,GAAGtB,YAAY,CAACW,WAAD,EAAcL,SAAd,EAAyBC,OAAzB,CAAjC;AACA,aAAO,CAACO,OAAD,EAAUQ,YAAV,CAAP;AACD,KAdkB,CAgBnB;;;AACA,SAAK,MAAMC,QAAX,IAAuBtB,MAAM,CAC3BI,SAAS,CAACmB,GAAV,CAAcpB,QAAQ,CAACa,WAAW,CAACQ,CAAb,CAAR,CAAwBR,WAAW,CAACS,CAApC,CAAd,CAD2B,CAA7B,EAEG;AACD;AACA,UAAIC,SAAiB,GAAGJ,QAAQ,CAAC,CAAD,CAAhC;AAAA,UACEK,SAAiB,GAAGL,QAAQ,CAAC,CAAD,CAD9B;AAGA,UACEI,SAAS,GAAG,CAAZ,IACAA,SAAS,IAAInB,CADb,IAEAoB,SAAS,GAAG,CAFZ,IAGAA,SAAS,IAAIlB,CAHb,IAIAK,UAAU,CAACI,IAAX,CACGU,cAAD,IAAoBA,cAAc,KAAK1B,IAAI,CAACwB,SAAD,CAAJ,CAAgBC,SAAhB,CADzC,CALF,EASE,SAdD,CAgBD;;AACA,UAAIE,QAAc,GAAG3B,IAAI,CAACwB,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CAjBC,CAmBD;;AACAjB,MAAAA,WAAW,CAACmB,QAAQ,CAACjB,EAAV,CAAX,GAA2BI,WAA3B,CApBC,CAsBD;;AACAF,MAAAA,UAAU,CAACM,IAAX,CAAgBS,QAAhB,EAvBC,CAyBD;;AACAd,MAAAA,CAAC,CAACK,IAAF,CAAOS,QAAP;AACD;AACF;;AAED,SAAO,CAAChB,OAAD,EAAU,EAAV,CAAP;AACD,CA3EM","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode));\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0],\n        neighborY: number = neighbor[1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}