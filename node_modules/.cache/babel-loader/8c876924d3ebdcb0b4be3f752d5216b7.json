{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx\";\nimport React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\nconst getAddedClassName = (neighbors, node) => {\n  let addedClassName = \"\";\n\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n}; // This component represents a single Node in the grid rendered in the DOM\n\n\nexport const _GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors\n}) => {\n  const addEmoji = node => {\n    if (node.isStart) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \"\\uD83D\\uDC00\");\n    }\n\n    if (node.isEnd) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, \"\\uD83E\\uDDC0\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-node\" + getAddedClassName(neighbors, node),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, addEmoji(node));\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.node.isVisited === nextProps.node.isVisited && prevProps.node.isShortestPath === nextProps.node.isShortestPath && getAddedClassName(prevProps.neighbors, prevProps.node) === getAddedClassName(nextProps.neighbors, nextProps.node);\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","node","getAddedClassName","neighbors","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","isShortestPath","isVisited","_GridNode","numberOfElementsPerRow","addEmoji","isStart","isEnd","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,IAAT,QAAqB,qCAArB;;AAQA,MAAMC,iBAGK,GAAG,CAACC,SAAD,EAAYF,IAAZ,KAAqB;AACjC,MAAIG,cAAsB,GAAG,EAA7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIE,QAA0B,GAAGJ,SAAS,CAACE,CAAD,CAA1C;AACA,QAAIG,SAAS,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAIE,SAAS,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAIC,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,iBAAlB;AAC9B,QAAII,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,cAAlB;AAC9B,QAAIK,SAAS,KAAKR,IAAI,CAACU,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,gBAAlB;AAC9B,QAAIK,SAAS,KAAKR,IAAI,CAACU,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,eAAlB;AAC/B;;AACD,MAAIH,IAAI,CAACW,SAAT,EAAoBR,cAAc,IAAI,SAAlB;AACpB,MAAIH,IAAI,CAACY,cAAT,EAAyBT,cAAc,IAAI,qBAAlB;AACzB,MAAIH,IAAI,CAACa,SAAT,EAAoBV,cAAc,IAAI,eAAlB;AACpB,SAAOA,cAAP;AACD,CAlBD,C,CAoBA;;;AACA,OAAO,MAAMW,SAA0B,GAAG,CAAC;AACzCC,EAAAA,sBADyC;AAEzCf,EAAAA,IAFyC;AAGzCE,EAAAA;AAHyC,CAAD,KAIpC;AACJ,QAAMc,QAA6B,GAAIhB,IAAD,IAAU;AAC9C,QAAIA,IAAI,CAACiB,OAAT,EAAkB;AAChB,0BACE;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,sBAAW,KAA5B;AAAkC,QAAA,SAAS,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;;AACD,QAAIjB,IAAI,CAACkB,KAAT,EAAgB;AACd,0BACE;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,sBAAW,KAA5B;AAAkC,QAAA,SAAS,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAE,cAAcjB,iBAAiB,CAACC,SAAD,EAAYF,IAAZ,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGgB,QAAQ,CAAChB,IAAD,CADX,CADF;AAKD,CA5BM;;AA8BP,MAAMmB,QAAyD,GAAG,CAChEC,SADgE,EAEhEC,SAFgE,KAG7D;AACH,SACED,SAAS,CAACpB,IAAV,CAAea,SAAf,KAA6BQ,SAAS,CAACrB,IAAV,CAAea,SAA5C,IACAO,SAAS,CAACpB,IAAV,CAAeY,cAAf,KAAkCS,SAAS,CAACrB,IAAV,CAAeY,cADjD,IAEAX,iBAAiB,CAACmB,SAAS,CAAClB,SAAX,EAAsBkB,SAAS,CAACpB,IAAhC,CAAjB,KACEC,iBAAiB,CAACoB,SAAS,CAACnB,SAAX,EAAsBmB,SAAS,CAACrB,IAAhC,CAJrB;AAMD,CAVD;;AAYA,OAAO,MAAMsB,QAAQ,GAAGvB,KAAK,CAACwB,IAAN,CAAWT,SAAX,EAAsBK,QAAtB,CAAjB","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\nconst getAddedClassName: (\n  neighbors: [number, number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [number, number] = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üêÄ\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üßÄ\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  return (\n    <div className={\"grid-node\" + getAddedClassName(neighbors, node)}>\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node)\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}