{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavBar.tsx\";\nimport React, { useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./NavBar.css\";\nexport const NavBar = props => {\n  return /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"navbar-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, props.children));\n};\nexport const NavChangingButtonItem = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"nav-item \" + props.className + (props.isVisualized ? \" \" + props.visualizedClassName : \"\"),\n    onClick: e => {\n      props.handleClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, props.children));\n};\nexport const NavDropDownItem = props => {\n  const [open, setOpen] = useState(false);\n\n  const handleWindowClick = () => {\n    setOpen(!open);\n  }; // useEffect(() => {\n  //   if (open) document.addEventListener(\"click\", handleWindowClick, true);\n  //   // else document.removeEventListener(\"click\", handleWindowClick, true);\n  // }, [open]);\n\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"nav-item \" + props.className + \" \" + (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\"),\n    onClick: () => {\n      if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"icon-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, props.text), open && props.children);\n};\nexport const DropDownMenu = props => {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\" + (props.left ? \" left\" : \" right\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CSSTransition, {\n    in: activeMenu === \"main\",\n    unmountOnExit: true,\n    classNames: \"menu-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, props.children));\n};\nexport const DropDownAlgo = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-item\",\n    onClick: e => {\n      props.changeAlgorithm(props.algorithmName);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, props.children);\n};\nexport const DropDownSlider = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, props.text)), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"slider\",\n    type: \"range\",\n    value: props.defaultValue,\n    min: props.minValue.toString(),\n    max: props.maxValue.toString(),\n    step: 0.01,\n    onChange: e => props.handleChangeWallsDensity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavBar.tsx"],"names":["React","useState","CSSTransition","NavBar","props","children","NavChangingButtonItem","className","isVisualized","visualizedClassName","e","handleClick","NavDropDownItem","open","setOpen","handleWindowClick","shouldGreyOut","text","DropDownMenu","activeMenu","setActiveMenu","left","DropDownAlgo","changeAlgorithm","algorithmName","DropDownSlider","defaultValue","minValue","toString","maxValue","handleChangeWallsDensity","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,cAAP;AAEA,OAAO,MAAMC,MAAgB,GAAIC,KAAD,IAAW;AACzC,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,KAAK,CAACC,QAAlC,CADF,CADF;AAKD,CANM;AAeP,OAAO,MAAMC,qBAA2D,GACtEF,KADyE,IAEtE;AACH,sBACE;AACE,IAAA,SAAS,EACP,cACAA,KAAK,CAACG,SADN,IAECH,KAAK,CAACI,YAAN,GAAqB,MAAMJ,KAAK,CAACK,mBAAjC,GAAuD,EAFxD,CAFJ;AAME,IAAA,OAAO,EAAGC,CAAD,IAAO;AACdN,MAAAA,KAAK,CAACO,WAAN;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIP,KAAK,CAACC,QAAV,CAVF,CADF;AAcD,CAjBM;AA2BP,OAAO,MAAMO,eAA+C,GAAIR,KAAD,IAAW;AACxE,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMc,iBAA6B,GAAG,MAAM;AAC1CD,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD,CAHwE,CAOxE;AACA;AACA;AACA;;;AAEA,sBACE;AACE,IAAA,SAAS,EACP,cACAT,KAAK,CAACG,SADN,GAEA,GAFA,IAGCH,KAAK,CAACY,aAAN,IAAuBZ,KAAK,CAACI,YAA7B,GAA4C,aAA5C,GAA4D,EAH7D,CAFJ;AAOE,IAAA,OAAO,EAAE,MAAM;AACb,UAAI,CAACJ,KAAK,CAACY,aAAP,IAAwB,CAACZ,KAAK,CAACI,YAAnC,EAAiDM,OAAO,CAAC,CAACD,IAAF,CAAP;AAClD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BT,KAAK,CAACa,IAAlC,CAXF,EAYGJ,IAAI,IAAIT,KAAK,CAACC,QAZjB,CADF;AAgBD,CA5BM;AAkCP,OAAO,MAAMa,YAAoC,GAAId,KAAD,IAAW;AAC7D,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,MAAD,CAA5C;AACA,sBACE;AAAK,IAAA,SAAS,EAAE,cAAcG,KAAK,CAACiB,IAAN,GAAa,OAAb,GAAuB,QAArC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,EAAE,EAAEF,UAAU,KAAK,MADrB;AAEE,IAAA,aAAa,MAFf;AAGE,IAAA,UAAU,EAAC,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGf,KAAK,CAACC,QALT,CADF,CADF;AAWD,CAbM;AAsBP,OAAO,MAAMiB,YAAyC,GAAIlB,KAAD,IAAW;AAClE,sBACE;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,OAAO,EAAGM,CAAD,IAAO;AACdN,MAAAA,KAAK,CAACmB,eAAN,CAAsBnB,KAAK,CAACoB,aAA5B;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGpB,KAAK,CAACC,QANT,CADF;AAUD,CAXM;AAsBP,OAAO,MAAMoB,cAA6C,GAAIrB,KAAD,IAAW;AACtE,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACa,IAAV,CADF,CADF,eAIE;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEb,KAAK,CAACsB,YAHf;AAIE,IAAA,GAAG,EAAEtB,KAAK,CAACuB,QAAN,CAAeC,QAAf,EAJP;AAKE,IAAA,GAAG,EAAExB,KAAK,CAACyB,QAAN,CAAeD,QAAf,EALP;AAME,IAAA,IAAI,EAAE,IANR;AAOE,IAAA,QAAQ,EAAGlB,CAAD,IAAON,KAAK,CAAC0B,wBAAN,CAA+BpB,CAAC,CAACqB,MAAF,CAASC,KAAxC,CAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAgBD,CAjBM","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./NavBar.css\";\n\nexport const NavBar: React.FC = (props) => {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n};\n\ninterface NavChangingButtonItemProps {\n  isVisualized: boolean;\n  className: string;\n  visualizedClassName: string;\n  handleClick: () => void;\n}\n\nexport const NavChangingButtonItem: React.FC<NavChangingButtonItemProps> = (\n  props\n) => {\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        props.className +\n        (props.isVisualized ? \" \" + props.visualizedClassName : \"\")\n      }\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <p>{props.children}</p>\n    </li>\n  );\n};\n\ninterface NavDropDownItemProps {\n  icon: string;\n  text: string;\n  className: string;\n  isVisualized: boolean;\n  shouldGreyOut: boolean;\n}\n\nexport const NavDropDownItem: React.FC<NavDropDownItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n\n  const handleWindowClick: () => void = () => {\n    setOpen(!open);\n  };\n\n  // useEffect(() => {\n  //   if (open) document.addEventListener(\"click\", handleWindowClick, true);\n  //   // else document.removeEventListener(\"click\", handleWindowClick, true);\n  // }, [open]);\n\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        props.className +\n        \" \" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n      onClick={() => {\n        if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n      }}\n    >\n      <p className=\"icon-button\">{props.text}</p>\n      {open && props.children}\n    </li>\n  );\n};\n\ninterface DropDownMenu {\n  left: boolean;\n}\n\nexport const DropDownMenu: React.FC<DropDownMenu> = (props) => {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  return (\n    <div className={\"dropdown\" + (props.left ? \" left\" : \" right\")}>\n      <CSSTransition\n        in={activeMenu === \"main\"}\n        unmountOnExit\n        classNames=\"menu-primary\"\n      >\n        {props.children}\n      </CSSTransition>\n    </div>\n  );\n};\n\ninterface DropDownAlgoProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  algorithmName: string;\n  changeAlgorithm: (algorithmName: string) => void;\n}\n\nexport const DropDownAlgo: React.FC<DropDownAlgoProps> = (props) => {\n  return (\n    <div\n      className=\"menu-item\"\n      onClick={(e) => {\n        props.changeAlgorithm(props.algorithmName);\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\ninterface DropDownSliderProps {\n  isVisualized: boolean;\n  minValue: number;\n  maxValue: number;\n  defaultValue: number;\n  text: string;\n  handleChangeWallsDensity: (event: any) => void;\n}\n\nexport const DropDownSlider: React.FC<DropDownSliderProps> = (props) => {\n  return (\n    <div className=\"slider-item\">\n      <div>\n        <p>{props.text}</p>\n      </div>\n      <input\n        className=\"slider\"\n        type=\"range\"\n        value={props.defaultValue}\n        min={props.minValue.toString()}\n        max={props.maxValue.toString()}\n        step={0.01}\n        onChange={(e) => props.handleChangeWallsDensity(e.target.value)}\n      ></input>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}