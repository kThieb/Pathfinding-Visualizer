{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{BinaryHeap}from\"../dataStructures/binaryHeap\";import{retrievePath}from\"./retrievePath\";import{ensure}from\"../ensureNotUndefined\";export var dijkstraWithWalls=function dijkstraWithWalls(grid,pairGrid,mazeGraph,startNode,endNode){var m=grid.length,n=grid[0].length;// Initialize the distances array\nvar distances=[];for(var i=0;i<m;i++){distances.push([]);for(var j=0;j<n;j++){distances[i].push(Number.MAX_SAFE_INTEGER);}}distances[startNode.x][startNode.y]=0;// Initialize the predecessor array\nvar predecessor=[];predecessor.fill(startNode,0,m*n);predecessor[startNode.id]=startNode;// Initialize the visited nodes array\nvar visited=[];//   Initialize the Binary Heap\nvar pq=new BinaryHeap(function(a){return distances[a.x][a.y];});pq.push(startNode);while(pq.size()>0){var currentNode=ensure(pq.pop());// add the current node to the visited nodes\nvisited.push(currentNode);// If we found the endNode, return the shortest path to it\nif(currentNode===endNode){// Retrieve the shortest path\nvar shortestPath=retrievePath(predecessor,startNode,endNode);return[visited,shortestPath];}// Get the coordinates of the nodes\nvar currentX=currentNode.x;var currentY=currentNode.y;// Iterate the neighbors of the node\nvar _iterator=_createForOfIteratorHelper(ensure(mazeGraph.get(pairGrid[currentX][currentY]))),_step;try{var _loop=function _loop(){var neighbor=_step.value;// Get the coordinates of the neighbor node\nvar neighborX=neighbor[0],neighborY=neighbor[1];// Check if the coordinates are valid\nif(neighborX<0||neighborX>=m||neighborY<0||neighborY>=n)return\"continue\";var nextNode=grid[neighbor[0]][neighbor[1]];// Calculate the distance between the current node and the next node\n// To Do: take into account the weight of the path\nvar currentDistance=distances[currentX][currentY]+1;// If the distance is less than the distance in the array distances,\n// change it and change the predecessor of the next node to be the current one\nif(currentDistance<distances[neighbor[0]][neighbor[1]]){predecessor[nextNode.id]=currentNode;distances[neighbor[0]][neighbor[1]]=currentDistance;}// If the node is not yet visited, remove it from the heap and\n// put it back in with its new distance as the score function\nif(!visited.find(function(visitedNode){return visitedNode===nextNode;})){pq.remove(nextNode);pq.push(nextNode);}};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret=_loop();if(_ret===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return[visited,[]];};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/shortestPathAlgorithms/dijkstra.ts"],"names":["BinaryHeap","retrievePath","ensure","dijkstraWithWalls","grid","pairGrid","mazeGraph","startNode","endNode","m","length","n","distances","i","push","j","Number","MAX_SAFE_INTEGER","x","y","predecessor","fill","id","visited","pq","a","size","currentNode","pop","shortestPath","currentX","currentY","get","neighbor","neighborX","neighborY","nextNode","currentDistance","find","visitedNode","remove"],"mappings":"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","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { BinaryHeap } from \"../dataStructures/binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const dijkstraWithWalls: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>((a: node) => {\n    return distances[a.x][a.y];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0],\n        neighborY: number = neighbor[1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighbor[0]][neighbor[1]];\n\n      // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n      let currentDistance: number = distances[currentX][currentY] + 1;\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighbor[0]][neighbor[1]]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighbor[0]][neighbor[1]] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}