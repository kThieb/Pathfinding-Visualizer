{"ast":null,"code":"import _objectSpread from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./Visualizer.css\";import{Grid}from\"../Grid/Grid\";import{NavBar,NavItem,DropDownMenu,DropDownItem,DropDownSlider,NavButton}from\"../NavBar/NavBar\";import{node}from\"../helperFunctions/usefulInterfaces\";import{algorithms}from\"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";import{generateMazeGraph}from\"../helperFunctions/mazeGenerators/mazeGraph\";import{constructGrid}from\"../helperFunctions/constructGrid\";import{WrapperCSSTransition}from\"../Wrapper/Wrapper\";var NUMBER_OF_COLUMNS=28;var NUMBER_OF_ROWS=13;var VISITED_ANIMATION_TIMEOUT=35;var PATH_ANIMATION_TIMEOUT=80;// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nvar _constructGrid=constructGrid(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,[6,3],[6,24]),_constructGrid2=_slicedToArray(_constructGrid,3),firstGrid=_constructGrid2[0],firstStartNode=_constructGrid2[1],firstEndNode=_constructGrid2[2];var _generateMazeGraph=generateMazeGraph(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,firstGrid,0.3,0.3,5),_generateMazeGraph2=_slicedToArray(_generateMazeGraph,2),firstpairGrid=_generateMazeGraph2[0],mazeGraph=_generateMazeGraph2[1];// Component rendering everything in the webpage.\nvar Visualizer=function Visualizer(){// States managing the grid\nvar _useState=useState(firstGrid),_useState2=_slicedToArray(_useState,2),grid=_useState2[0],setGrid=_useState2[1];var _useState3=useState(mazeGraph),_useState4=_slicedToArray(_useState3,2),maze=_useState4[0],setMaze=_useState4[1];var _useState5=useState(firstpairGrid),_useState6=_slicedToArray(_useState5,2),pairGrid=_useState6[0],setPairGrid=_useState6[1];var _useState7=useState(\"Dijkstra's algorithm\"),_useState8=_slicedToArray(_useState7,2),algorithm=_useState8[0],setAlgorithm=_useState8[1];var _useState9=useState(0.3),_useState10=_slicedToArray(_useState9,2),wallsDensity=_useState10[0],setWallsDensity=_useState10[1];var _useState11=useState(0.3),_useState12=_slicedToArray(_useState11,2),mudDensity=_useState12[0],setMudDensity=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),isVisualized=_useState14[0],setIsVisualized=_useState14[1];var _useState15=useState(3),_useState16=_slicedToArray(_useState15,2),mudWeight=_useState16[0],setMudWeight=_useState16[1];// States of the start and end node\nvar _useState17=useState(firstStartNode),_useState18=_slicedToArray(_useState17,2),startNode=_useState18[0],setStartNode=_useState18[1];var _useState19=useState([firstEndNode]),_useState20=_slicedToArray(_useState19,2),endNodeList=_useState20[0],setEndNodeList=_useState20[1];// States managing the dropdown menu\nvar _useState21=useState(\"main\"),_useState22=_slicedToArray(_useState21,2),algoActiveMenu=_useState22[0],setAlgoActiveMenu=_useState22[1];var _useState23=useState(undefined),_useState24=_slicedToArray(_useState23,2),height=_useState24[0],setHeight=_useState24[1];// State of the mouse\nvar _useState25=useState(false),_useState26=_slicedToArray(_useState25,2),mouseIsPressed=_useState26[0],setMouseIsPressed=_useState26[1];// This function is there to visualize the algorithm chosen in the drop down menu\nvar visualizeAlgorithm=function visualizeAlgorithm(visited,path){var n=visited.length;var _loop=function _loop(i){setTimeout(function(){var newGrid=grid.slice();var node=visited[i];// define the x and y of the current node\nvar x=node.x;var y=node.y;var newNode=_objectSpread(_objectSpread({},node),{},{isVisited:true});newGrid[x][y]=newNode;setGrid(newGrid);},VISITED_ANIMATION_TIMEOUT*i);};for(var i=0;i<n;i++){_loop(i);}var m=path.length;var _loop2=function _loop2(_i){setTimeout(function(){var newGrid=grid.slice();var successor=_i<m-1?path[_i+1]:path[_i];var node=path[_i];// define the x and y of the current node\nvar x=node.x;var y=node.y;var newNode=_objectSpread(_objectSpread({},node),{},{isVisited:false,isShortestPath:true,successorPosition:getSuccessorPosition(node,successor)});newGrid[x][y]=newNode;setGrid(newGrid);},VISITED_ANIMATION_TIMEOUT*n+PATH_ANIMATION_TIMEOUT*_i);};for(var _i=0;_i<m;_i++){_loop2(_i);}};// This function returns the position of the successor of a node in the shortest path\nvar getSuccessorPosition=function getSuccessorPosition(node,successor){if(node.x+1===successor.x)return\"D\";if(node.y+1===successor.y)return\"R\";if(node.x-1===successor.x)return\"U\";if(node.y-1===successor.y)return\"L\";return\"\";};// This function is passed to the drop down menu to handle the change of algorithm\nvar handleAlgorithmChange=function handleAlgorithmChange(algorithmName){return function(){setAlgorithm(algorithmName);};};// This function handles the click on the menu buttons\nvar handleMenuChange=function handleMenuChange(menuName){return function(){return setAlgoActiveMenu(menuName);};};// This function changes the algorithm that will be run, at the moment only dijkstra is implemented\nvar chooseAlgorithm=function chooseAlgorithm(){return algorithms[algorithm];};// This function handles the logic of the visualization of the algorithms\nvar handleVisualization=function handleVisualization(){if(isVisualized===0){setIsVisualized(1);var _chooseAlgorithm=chooseAlgorithm()(grid,pairGrid,maze,startNode,endNodeList[0]),_chooseAlgorithm2=_slicedToArray(_chooseAlgorithm,2),_visited=_chooseAlgorithm2[0],_path=_chooseAlgorithm2[1];var n=_visited.length,m=_path.length;visualizeAlgorithm(_visited,_path);setTimeout(function(){setIsVisualized(2);},VISITED_ANIMATION_TIMEOUT*n+PATH_ANIMATION_TIMEOUT*m);}};// This function calls the generate maze function\nvar generateMaze=function generateMaze(){if(isVisualized===0){var newGrid=grid.slice();var _generateMazeGraph3=generateMazeGraph(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,newGrid,wallsDensity,mudDensity,mudWeight),_generateMazeGraph4=_slicedToArray(_generateMazeGraph3,2),newPairGrid=_generateMazeGraph4[0],newMaze=_generateMazeGraph4[1];setGrid(newGrid);setPairGrid(newPairGrid);setMaze(newMaze);}};// Reinitialize the the board\nvar reinitializeGrid=function reinitializeGrid(){if(isVisualized===2){var _constructGrid3=constructGrid(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,[startNode.x,startNode.y],[endNodeList[0].x,endNodeList[0].y]),_constructGrid4=_slicedToArray(_constructGrid3,3),newGrid=_constructGrid4[0],newStartNode=_constructGrid4[1],newEndNode=_constructGrid4[2];setGrid(newGrid);setStartNode(newStartNode);setEndNodeList([newEndNode]);setIsVisualized(0);}};// The following block of functions handles the making of walls in the grid\n// This feature is currently not used as it is not a good fit with the current direction of the app\n// const toggleWall: (x: number, y: number) => void = (x, y) => {\n//   const newGrid: node[][] = grid.slice();\n//   let newNode;\n//   if (!newGrid[x][y].isWall) {\n//     newNode = {\n//       ...newGrid[x][y],\n//       isWall: !newGrid[x][y].isWall,\n//       className: \"grid-node wall-node\",\n//     };\n//   } else {\n//     newNode = {\n//       ...newGrid[x][y],\n//       isWall: !newGrid[x][y].isWall,\n//       className: \"grid-node\",\n//     };\n//   }\n//   newGrid[x][y] = newNode;\n//   setGrid(newGrid);\n// };\nvar toggleStartNode=function toggleStartNode(x,y){var _constructGrid5=constructGrid(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,[x,y],[endNodeList[0].x,endNodeList[0].y]),_constructGrid6=_slicedToArray(_constructGrid5,3),newGrid=_constructGrid6[0],newStartNode=_constructGrid6[1],newEndNode=_constructGrid6[2];setStartNode(newStartNode);setEndNodeList([newEndNode]);setGrid(newGrid);};// handles the case when the mouse button is down\nvar handleMouseDown=function handleMouseDown(x,y){if(grid[x][y]===startNode){console.log(\"mouse is pressed\");setMouseIsPressed(true);}};// handles the case whan the mouse button is down and you enter a node\nvar handleMouseEnter=function handleMouseEnter(x,y){if(mouseIsPressed){console.log(\"entered\");toggleStartNode(x,y);}};// handles the case when you mouse up\nvar handleMouseUp=function handleMouseUp(){console.log(\"mouse is up!\");setMouseIsPressed(false);};// Render the app\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"App\",onMouseUp:function onMouseUp(){return handleMouseUp();}},/*#__PURE__*/React.createElement(NavBar,null,/*#__PURE__*/React.createElement(NavButton,{text:\"Reinitialize\",isVisualized:isVisualized,className:\"reinitialize\",startClassName:\"greyed-out\",visualizingClassName:\"greyed-out\",visualizedClassName:\"highlight\",handleClick:reinitializeGrid}),/*#__PURE__*/React.createElement(NavButton,{text:\"Generate Maze\",isVisualized:isVisualized,className:\"generate-maze\",visualizingClassName:\"greyed-out\",visualizedClassName:\"greyed-out\",handleClick:generateMaze}),/*#__PURE__*/React.createElement(NavItem,{text:\"Maze options\",id:\"maze-options\",isVisualized:isVisualized,shouldGreyOut:true},/*#__PURE__*/React.createElement(DropDownMenu,null,/*#__PURE__*/React.createElement(DropDownSlider,{text:\"Density of walls\",minValue:0,maxValue:1,step:0.01,defaultValue:wallsDensity,handleChange:setWallsDensity}),/*#__PURE__*/React.createElement(DropDownSlider,{text:\"Density of mud\",minValue:0,maxValue:1,step:0.01,defaultValue:mudDensity,handleChange:setMudDensity}),/*#__PURE__*/React.createElement(DropDownSlider,{text:\"Mud Weight\",minValue:1,maxValue:5,step:1,defaultValue:mudWeight,handleChange:setMudWeight}))),/*#__PURE__*/React.createElement(NavButton,{text:\"Visualize \"+algorithm+\"!\",isVisualized:isVisualized,className:\"visualize-button\",visualizingClassName:\"greyed-out\",visualizedClassName:\"greyed-out\",handleClick:handleVisualization}),/*#__PURE__*/React.createElement(NavItem,{text:\"Algorithms\",id:\"algorithms\",isVisualized:isVisualized,shouldGreyOut:false},/*#__PURE__*/React.createElement(DropDownMenu,{height:height},/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"main\",unmountOnExit:true,timeout:500,classNames:\"menu-primary\",handleEnter:setHeight,appear:true},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"unweighted\")},\"Algorithms for unweighted graphs\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"weighted\")},\"Algorithms for weighted graphs\")),/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"unweighted\",unmountOnExit:true,timeout:500,classNames:\"menu-unweighted\",handleEnter:setHeight},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"main\")},\"<<<\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Depth First Search\")},/*#__PURE__*/React.createElement(\"p\",null,\"Random Depth First Search\"),algorithm===\"Depth First Search\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Breadth First Search\")},/*#__PURE__*/React.createElement(\"p\",null,\"Breadth First Search\"),algorithm===\"Breadth First Search\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\")),/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"weighted\",unmountOnExit:true,timeout:500,classNames:\"menu-weighted\",handleEnter:setHeight},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"main\")},\"<<<\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Dijkstra's algorithm\")},/*#__PURE__*/React.createElement(\"p\",null,\"Dijkstra's Algorithm\"),algorithm===\"Dijkstra's algorithm\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"A* algorithm\")},/*#__PURE__*/React.createElement(\"p\",null,\"A* Algorithm\"),algorithm===\"A* algorithm\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"))))),/*#__PURE__*/React.createElement(Grid,{grid:grid,pairGrid:pairGrid,maze:maze,mouseState:mouseIsPressed,handleMouseDown:handleMouseDown,handleMouseEnter:handleMouseEnter}));};export default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","node","algorithms","generateMazeGraph","constructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","mudDensity","setMudDensity","isVisualized","setIsVisualized","mudWeight","setMudWeight","startNode","setStartNode","endNodeList","setEndNodeList","algoActiveMenu","setAlgoActiveMenu","undefined","height","setHeight","mouseIsPressed","setMouseIsPressed","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","x","y","newNode","isVisited","m","successor","isShortestPath","successorPosition","getSuccessorPosition","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","chooseAlgorithm","handleVisualization","generateMaze","newPairGrid","newMaze","reinitializeGrid","newStartNode","newEndNode","toggleStartNode","handleMouseDown","console","log","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 80;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  5\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(3);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNodeList, setEndNodeList] = useState([firstEndNode]);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNodeList[0]\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNodeList[0].x, endNodeList[0].y]\n      );\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNodeList([newEndNode]);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  const toggleStartNode: (x: number, y: number) => void = (x, y) => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [x, y],\n      [endNodeList[0].x, endNodeList[0].y]\n    );\n    setStartNode(newStartNode);\n    setEndNodeList([newEndNode]);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n    if (grid[x][y] === startNode) {\n      console.log(\"mouse is pressed\");\n      setMouseIsPressed(true);\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n    if (mouseIsPressed) {\n      console.log(\"entered\");\n      toggleStartNode(x, y);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    console.log(\"mouse is up!\");\n    setMouseIsPressed(false);\n  };\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitializeGrid}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1}\n              maxValue={5}\n              step={1}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}