{"ast":null,"code":"import React from\"react\";import{GridNode}from\"../GridNode/GridNode\";import\"./Grid.css\";export var Grid=function Grid(_ref){var grid=_ref.grid,maze=_ref.maze,pairGrid=_ref.pairGrid;// Renders the grid in the DOM thanks to the grid state in the App component\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,id){var rowLength=row.length;return/*#__PURE__*/React.createElement(\"div\",{className:\"row\",key:id},row.map(function(node,index){return/*#__PURE__*/React.createElement(GridNode,{numberOfElementsPerRow:rowLength,key:id+index*rowLength,node:node,neighbors:ensure(maze.get(pairGrid[node.x][node.y]))});}));}));};// This function is there to ensure that a value is not null or undefined\nfunction ensure(argument){var message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"This value was promised to be there.\";if(argument===undefined||argument===null){throw new TypeError(message);}return argument;}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Grid/Grid.tsx"],"names":["React","GridNode","Grid","grid","maze","pairGrid","map","row","id","rowLength","length","node","index","ensure","get","x","y","argument","message","undefined","TypeError"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,sBAAzB,CACA,MAAO,YAAP,CASA,MAAO,IAAMC,CAAAA,IAAqB,CAAG,QAAxBA,CAAAA,IAAwB,MAA8B,IAA3BC,CAAAA,IAA2B,MAA3BA,IAA2B,CAArBC,IAAqB,MAArBA,IAAqB,CAAfC,QAAe,MAAfA,QAAe,CACjE;AACA,mBACE,2BAAK,SAAS,CAAC,MAAf,EACGF,IAAI,CAACG,GAAL,CAAS,SAACC,GAAD,CAAMC,EAAN,CAAa,CACrB,GAAIC,CAAAA,SAAS,CAAGF,GAAG,CAACG,MAApB,CACA,mBACE,2BAAK,SAAS,CAAC,KAAf,CAAqB,GAAG,CAAEF,EAA1B,EACGD,GAAG,CAACD,GAAJ,CAAQ,SAACK,IAAD,CAAOC,KAAP,qBACP,oBAAC,QAAD,EACE,sBAAsB,CAAEH,SAD1B,CAEE,GAAG,CAAED,EAAE,CAAGI,KAAK,CAAGH,SAFpB,CAGE,IAAI,CAAEE,IAHR,CAIE,SAAS,CAAEE,MAAM,CAACT,IAAI,CAACU,GAAL,CAAST,QAAQ,CAACM,IAAI,CAACI,CAAN,CAAR,CAAiBJ,IAAI,CAACK,CAAtB,CAAT,CAAD,CAJnB,EADO,EAAR,CADH,CADF,CAYD,CAdA,CADH,CADF,CAmBD,CArBM,CAuBP;AACA,QAASH,CAAAA,MAAT,CACEI,QADF,CAGK,IADHC,CAAAA,OACG,2DADe,sCACf,CACH,GAAID,QAAQ,GAAKE,SAAb,EAA0BF,QAAQ,GAAK,IAA3C,CAAiD,CAC/C,KAAM,IAAIG,CAAAA,SAAJ,CAAcF,OAAd,CAAN,CACD,CAED,MAAOD,CAAAA,QAAP,CACD","sourcesContent":["import React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  grid: node[][];\n  maze: Map<[number, number], [number, number][]>;\n  pairGrid: [number, number][][];\n}\n\nexport const Grid: React.FC<Props> = ({ grid, maze, pairGrid }) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return (\n    <div className=\"grid\">\n      {grid.map((row, id) => {\n        let rowLength = row.length;\n        return (\n          <div className=\"row\" key={id}>\n            {row.map((node, index) => (\n              <GridNode\n                numberOfElementsPerRow={rowLength}\n                key={id + index * rowLength}\n                node={node}\n                neighbors={ensure(maze.get(pairGrid[node.x][node.y]))}\n              ></GridNode>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// This function is there to ensure that a value is not null or undefined\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}