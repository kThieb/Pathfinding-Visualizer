{"ast":null,"code":"import { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\nexport const twoEndedBfs = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n\n  predecessor[startNode.id] = startNode;\n  const successor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n\n  successor[targetList[0].id] = targetList[0];\n  const source = [];\n\n  for (let i = 0; i < m * n; i++) {\n    source.push(targetList[0]);\n  }\n\n  source[startNode.id] = startNode;\n  source[targetList[0].id] = targetList[0]; // Initialize the visited nodes array\n\n  let visited = []; // Initialize the discovered array\n\n  let discovered = [startNode, targetList[0]]; // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n\n  let q = [startNode, targetList[0]]; // While the queue is not empty\n\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode = ensure(q.shift());\n    const foundNode = visited.find(visitedNode => visitedNode === currentNode); // If we found the end node, return the path to it\n\n    if (foundNode && source[currentNode.id] !== source[foundNode.id]) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(predecessor, successor, currentNode, startNode, targetList[0]);\n      return [visited, shortestPath];\n    }\n\n    if (visited.find(visitedNode => visitedNode === currentNode)) continue; // Put the currentNode node in the visited set\n\n    visited.push(currentNode); // iterate through the neighbors of the currentNode node\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY];\n      source[nextNode.id] = source[currentNode.id];\n\n      if (source[currentNode.id] === startNode) {\n        // update the predecessor array\n        predecessor[nextNode.id] = currentNode;\n      } else {\n        successor[nextNode.id] = currentNode;\n      } // Add the node to the visited nodes\n\n\n      discovered.push(nextNode); // Push the next node to the queue\n\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/twoEndedBfs.ts"],"names":["retrieveTwoEndedPath","ensure","twoEndedBfs","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","predecessor","i","push","id","successor","source","visited","discovered","q","currentNode","shift","foundNode","find","visitedNode","shortestPath","neighbor","get","x","y","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"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","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const twoEndedBfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  const successor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n  successor[targetList[0].id] = targetList[0];\n\n  const source: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    source.push(targetList[0]);\n  }\n  source[startNode.id] = startNode;\n  source[targetList[0].id] = targetList[0];\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode, targetList[0]];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode, targetList[0]];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    const foundNode: node | undefined = visited.find(\n      (visitedNode) => visitedNode === currentNode\n    );\n\n    // If we found the end node, return the path to it\n    if (foundNode && source[currentNode.id] !== source[foundNode.id]) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(\n        predecessor,\n        successor,\n        currentNode,\n        startNode,\n        targetList[0]\n      );\n      return [visited, shortestPath];\n    }\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      source[nextNode.id] = source[currentNode.id];\n\n      if (source[currentNode.id] === startNode) {\n        // update the predecessor array\n        predecessor[nextNode.id] = currentNode;\n      } else {\n        successor[nextNode.id] = currentNode;\n      }\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}