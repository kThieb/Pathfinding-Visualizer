{"ast":null,"code":"export var retrievePath=function retrievePath(predecessor,startNode,endNode){var shortestPath=[endNode];var current=endNode;while(current!==startNode){current=predecessor[current.id];shortestPath.unshift(current);}return shortestPath;};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/retrievePath.ts"],"names":["retrievePath","predecessor","startNode","endNode","shortestPath","current","id","unshift"],"mappings":"AAEA,MAAO,IAAMA,CAAAA,YAIF,CAAG,QAJDA,CAAAA,YAIC,CAACC,WAAD,CAAcC,SAAd,CAAyBC,OAAzB,CAAqC,CACjD,GAAIC,CAAAA,YAAY,CAAG,CAACD,OAAD,CAAnB,CACA,GAAIE,CAAAA,OAAO,CAAGF,OAAd,CACA,MAAOE,OAAO,GAAKH,SAAnB,CAA8B,CAC5BG,OAAO,CAAGJ,WAAW,CAACI,OAAO,CAACC,EAAT,CAArB,CACAF,YAAY,CAACG,OAAb,CAAqBF,OAArB,EACD,CAED,MAAOD,CAAAA,YAAP,CACD,CAbM","sourcesContent":["import { node } from \"../usefulInterfaces\";\n\nexport const retrievePath: (\n  predecessor: node[],\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, startNode, endNode) => {\n  let shortestPath = [endNode];\n  let current = endNode;\n  while (current !== startNode) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n\n  return shortestPath;\n};\n"]},"metadata":{},"sourceType":"module"}