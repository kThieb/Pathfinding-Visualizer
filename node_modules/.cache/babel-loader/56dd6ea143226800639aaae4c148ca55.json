{"ast":null,"code":"export class BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = void 0;\n    this.scoreFunction = void 0;\n    this.index = void 0;\n\n    this.compare = (a, b) => {\n      if (this.scoreFunction(a[0]) != this.scoreFunction(b[0])) {\n        return this.scoreFunction(a[0]) < this.scoreFunction(b[0]);\n      }\n\n      return a[1] < b[1];\n    };\n\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n    this.index = 1;\n  }\n\n  push(element) {\n    this.content.push([element, this.index++]);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    let result = this.content[0];\n    let end = this.content.pop();\n\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n\n    return ensure(result)[0];\n  }\n\n  remove(node) {\n    let length = this.content.length; // To remove a value, we must search through the array to find\n    // it.\n\n    for (let i = 0; i < length; i++) {\n      if (ensure(this.content[i])[0] !== node) continue; // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n\n      let end = this.content.pop(); // If the element we popped was the one we needed to remove,\n      // we're done.\n\n      if (i === length - 1) break; // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    let element = ensure(this.content[n]),\n        score = this.scoreFunction(ensure(element)[0]); // When at 0, an element can not go up any further.\n\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN = Math.floor((n + 1) / 2) - 1,\n          parent = ensure(this.content[parentN]); // If the parent has a lesser score, things are in order and we\n      // are done.\n      // if (\n      //   score > this.scoreFunction(ensure(parent)[0]) ||\n      //   (score === this.scoreFunction(ensure(parent)[0]) &&\n      //     ensure(element)[1] > ensure(parent)[1])\n      // )\n      //   break;\n\n      if (this.compare(parent, element)) break; // Otherwise, swap the parent with the current element and\n      // continue.\n\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    let length = this.content.length,\n        element = ensure(this.content[n]);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N = (n + 1) * 2,\n          child1N = child2N - 1,\n          child1 = ensure(this.content[child1N]),\n          child2 = ensure(this.content[child2N]);\n      let swap = n; // This is used to store the new position of the element, if any.\n      // If the first child exists (is inside the array)...\n\n      if (child1N < length && this.compare(child1, element)) swap = child1N;\n      if (child2N < length && this.compare(child2, ensure(this.content[swap]))) swap = child2N; // if (child1N < length) {\n      //   // Look it up and compute its score.\n      //   let child1 = this.content[child1N],\n      //     child1Score = this.scoreFunction(ensure(child1)[0]);\n      //   // If the score is less than our element's, we need to swap.\n      //   if (\n      //     child1Score < elemScore ||\n      //     (child1Score === elemScore && ensure(child1)[1] < ensure(element)[1])\n      //   )\n      //     swap = child1N;\n      // }\n      // // Do the same checks for the other child.\n      // if (child2N < length) {\n      //   let child2 = this.content[child2N],\n      //     child2Score = this.scoreFunction(ensure(child2)[0]);\n      //   if (\n      //     child2Score < (swap == null ? elemScore : child2Score) ||\n      //     (child2Score === (swap == null ? elemScore : child2Score) &&\n      //       ensure(child2)[1] <\n      //         (swap == null ? ensure(element)[1] : ensure(child2)[1]))\n      //   )\n      //     swap = child2N;\n      // }\n      // No need to swap further, we are done.\n\n      if (swap === n) break; // Otherwise, swap and continue.\n\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n\n}\n\nfunction ensure(argument, message = \"This value was promised to be there.\") {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/binaryHeap.ts"],"names":["BinaryHeap","constructor","scoreFunction","content","index","compare","a","b","push","element","bubbleUp","length","pop","result","end","sinkDown","ensure","remove","node","i","size","n","score","parentN","Math","floor","parent","child2N","child1N","child1","child2","swap","argument","message","undefined","TypeError"],"mappings":"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","sourcesContent":["export class BinaryHeap<T> {\n  content: ([T, number] | undefined)[];\n  scoreFunction: (x: T) => number;\n  index: number;\n\n  constructor(scoreFunction: (x: T) => number) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n    this.index = 1;\n  }\n\n  compare: (a: [T, number], b: [T, number]) => boolean = (a, b) => {\n    if (this.scoreFunction(a[0]) != this.scoreFunction(b[0])) {\n      return this.scoreFunction(a[0]) < this.scoreFunction(b[0]);\n    }\n    return a[1] < b[1];\n  };\n\n  push(element: T) {\n    this.content.push([element, this.index++]);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop(): T | undefined {\n    let result = this.content[0];\n    let end = this.content.pop();\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return ensure(result)[0];\n  }\n\n  remove(node: T) {\n    let length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (let i = 0; i < length; i++) {\n      if (ensure(this.content[i])[0] !== node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      let end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i === length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  private bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    let element: [T, number] = ensure(this.content[n]),\n      score = this.scoreFunction(ensure(element)[0]);\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN: number = Math.floor((n + 1) / 2) - 1,\n        parent: [T, number] = ensure(this.content[parentN]);\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      // if (\n      //   score > this.scoreFunction(ensure(parent)[0]) ||\n      //   (score === this.scoreFunction(ensure(parent)[0]) &&\n      //     ensure(element)[1] > ensure(parent)[1])\n      // )\n      //   break;\n      if (this.compare(parent, element)) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  private sinkDown(n: number) {\n    // Look up the target element and its score.\n    let length = this.content.length,\n      element: [T, number] = ensure(this.content[n]);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N: number = (n + 1) * 2,\n        child1N: number = child2N - 1,\n        child1: [T, number] = ensure(this.content[child1N]),\n        child2: [T, number] = ensure(this.content[child2N]);\n      let swap = n;\n      // This is used to store the new position of the element, if any.\n      // If the first child exists (is inside the array)...\n      if (child1N < length && this.compare(child1, element)) swap = child1N;\n      if (child2N < length && this.compare(child2, ensure(this.content[swap])))\n        swap = child2N;\n\n      // if (child1N < length) {\n      //   // Look it up and compute its score.\n      //   let child1 = this.content[child1N],\n      //     child1Score = this.scoreFunction(ensure(child1)[0]);\n      //   // If the score is less than our element's, we need to swap.\n      //   if (\n      //     child1Score < elemScore ||\n      //     (child1Score === elemScore && ensure(child1)[1] < ensure(element)[1])\n      //   )\n      //     swap = child1N;\n      // }\n\n      // // Do the same checks for the other child.\n      // if (child2N < length) {\n      //   let child2 = this.content[child2N],\n      //     child2Score = this.scoreFunction(ensure(child2)[0]);\n      //   if (\n      //     child2Score < (swap == null ? elemScore : child2Score) ||\n      //     (child2Score === (swap == null ? elemScore : child2Score) &&\n      //       ensure(child2)[1] <\n      //         (swap == null ? ensure(element)[1] : ensure(child2)[1]))\n      //   )\n      //     swap = child2N;\n      // }\n\n      // No need to swap further, we are done.\n      if (swap === n) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n}\n\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}