{"ast":null,"code":"import { BinaryHeap } from \"../dataStructures/binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\nexport const dijkstraWithWalls = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the distances array\n\n  const distances = [];\n\n  for (let i = 0; i < m; i++) {\n    distances.push([]);\n\n    for (let j = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0; // Initialize the predecessor array\n\n  const predecessor = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode; // Initialize the visited nodes array\n\n  let visited = []; //   Initialize the Binary Heap\n\n  let pq = new BinaryHeap(a => {\n    return distances[a.x][a.y];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode = ensure(pq.pop()); // add the current node to the visited nodes\n\n    visited.push(currentNode); // If we found the endNode, return the shortest path to it\n\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    } // Get the coordinates of the nodes\n\n\n    let currentX = currentNode.x;\n    let currentY = currentNode.y; // Iterate the neighbors of the node\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentX][currentY]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0],\n          neighborY = neighbor[1]; // Check if the coordinates are valid\n\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n) continue;\n      let nextNode = grid[neighbor[0]][neighbor[1]]; // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n\n      let currentDistance = distances[currentX][currentY] + 1; // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n\n      if (currentDistance < distances[neighbor[0]][neighbor[1]]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighbor[0]][neighbor[1]] = currentDistance;\n      } // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n\n\n      if (!visited.find(currentNode => currentNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n\n  return [visited, []];\n}; // This function is here to ensure that a value is not undefined (especially when using arrays).\n\nfunction ensure(argument, message = \"This value was promised to be there.\") {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/shortestPathAlgorithms/dijkstra.ts"],"names":["BinaryHeap","retrievePath","dijkstraWithWalls","grid","pairGrid","mazeGraph","startNode","endNode","m","length","n","distances","i","push","j","Number","MAX_SAFE_INTEGER","x","y","predecessor","fill","id","visited","pq","a","size","currentNode","ensure","pop","shortestPath","currentX","currentY","neighbor","get","neighborX","neighborY","nextNode","currentDistance","find","remove","argument","message","undefined","TypeError"],"mappings":"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","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { BinaryHeap } from \"../dataStructures/binaryHeap\";\nimport { retrievePath } from \"./retrievePath\";\n\nexport const dijkstraWithWalls: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>((a: node) => {\n    return distances[a.x][a.y];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0],\n        neighborY: number = neighbor[1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighbor[0]][neighbor[1]];\n\n      // Calculate the distance between the current node and the next node\n      // To Do: take into account the weight of the path\n      let currentDistance: number = distances[currentX][currentY] + 1;\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighbor[0]][neighbor[1]]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighbor[0]][neighbor[1]] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((currentNode) => currentNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n\n  return [visited, []];\n};\n\n// This function is here to ensure that a value is not undefined (especially when using arrays).\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}