{"ast":null,"code":"// TODO: Refactor the code to use the different key-values pair as the nodes get changed when there is a setGrid that is applied\nconst createMazeGraph = (rowLength, columnLength, grid) => {\n  let pairGrid = [];\n\n  for (let i = 0; i < columnLength; i++) {\n    let pairRow = [];\n\n    for (let j = 0; j < rowLength; j++) {\n      let currentNode = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n\n    pairGrid.push(pairRow);\n  } // Create the maze graph\n\n\n  let mazeGraph = new Map();\n\n  for (let i = 0; i < columnLength; i++) {\n    for (let j = 0; j < rowLength; j++) {\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n\n  return [pairGrid, mazeGraph];\n};\n\nexport const createEmptyMazeGraph = (rowLength, columnLength, grid) => {\n  let pairGrid = [];\n\n  for (let i = 0; i < columnLength; i++) {\n    let pairRow = [];\n\n    for (let j = 0; j < rowLength; j++) {\n      let currentNode = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n\n    pairGrid.push(pairRow);\n  }\n\n  const dir = [0, 1, 0, -1, 0]; // Create the maze graph\n\n  let mazeGraph = new Map();\n\n  for (let i = 0; i < columnLength; i++) {\n    for (let j = 0; j < rowLength; j++) {\n      let neighbors = getNeighbors(grid, [i, j]);\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n\n  return [pairGrid, mazeGraph];\n};\nexport const generateMazeGraph = (rowLength, columnLength, grid) => {\n  let [pairGrid, mazeGraph] = createMazeGraph(rowLength, columnLength, grid); // 1. Choose the initial cell, mark it as visited and push it to the stack\n\n  let startNode = pairGrid[0][0];\n  let stack = [startNode];\n  let visited = [startNode]; // 2. While the stack is not empty\n\n  while (stack.length > 0) {\n    // 1. Pop a cell from the stack and make it a current cell\n    let currentNode = ensure(stack.pop());\n    let currentNonVisitedNeighbors = getNeighbors(pairGrid, currentNode, rowLength, columnLength, visited); // 2. If the current cell has any neighbours which have not been visited\n\n    if (currentNonVisitedNeighbors.length > 0) {\n      // 1. Push the current cell to the stack\n      stack.push(currentNode); // 2. Choose one of the unvisited neighbours\n\n      let randIndex = Math.floor(Math.random() * currentNonVisitedNeighbors.length);\n      let neighborNode = currentNonVisitedNeighbors[randIndex]; // 3. Remove the wall between the current cell and the chosen cell\n\n      let currentNodeNeighbors = ensure(mazeGraph.get(currentNode));\n      currentNodeNeighbors.push(neighborNode);\n      mazeGraph.set(currentNode, currentNodeNeighbors);\n      let neighborNodeNeighbors = ensure(mazeGraph.get(neighborNode));\n      neighborNodeNeighbors.push(currentNode);\n      mazeGraph.set(neighborNode, neighborNodeNeighbors); // 4. Mark the chosen cell as visited and push it to the stack\n\n      visited.push(neighborNode);\n      stack.push(neighborNode);\n    }\n  }\n\n  return [pairGrid, mazeGraph];\n};\n\nconst getNeighbors = (pairGrid, currentNode, rowLength, columnLength, visited) => {\n  const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n  let neighbors = [];\n  let neighborX = -1;\n  let neighborY = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n\n    if (neighborX >= 0 && neighborX < columnLength && neighborY >= 0 && neighborY < rowLength) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n\n  let newNeighbors = [];\n\n  for (let i = 0; i < neighbors.length; i++) {\n    if (!visited.includes(neighbors[i])) {\n      newNeighbors.push(neighbors[i]);\n    }\n  }\n\n  return newNeighbors;\n};\n\nexport const getNeighborsEmpty = (pairGrid, currentNode, columnLength, rowLength) => {\n  const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n  let neighbors = [];\n  let neighborX = -1;\n  let neighborY = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n\n    if (neighborX >= 0 && neighborX < columnLength && neighborY >= 0 && neighborY < rowLength) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  } // let newNeighbors: [number, number][] = [];\n  // for (let i: number = 0; i < neighbors.length; i++) {\n  //   newNeighbors.push(neighbors[i]);\n  // }\n\n\n  return neighbors;\n};\n\nfunction ensure(argument, message = \"This value was promised to be there.\") {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/simple-visualizer/src/helper_functions/mazeGenerators/mazeGraph.ts"],"names":["createMazeGraph","rowLength","columnLength","grid","pairGrid","i","pairRow","j","currentNode","push","x","y","mazeGraph","Map","set","createEmptyMazeGraph","dir","neighbors","getNeighbors","generateMazeGraph","startNode","stack","visited","length","ensure","pop","currentNonVisitedNeighbors","randIndex","Math","floor","random","neighborNode","currentNodeNeighbors","get","neighborNodeNeighbors","directions","neighborX","neighborY","newNeighbors","includes","getNeighborsEmpty","argument","message","undefined","TypeError"],"mappings":"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","sourcesContent":["import { node } from \"../usefulInterfaces\";\n\n// TODO: Refactor the code to use the different key-values pair as the nodes get changed when there is a setGrid that is applied\n\nconst createMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const createEmptyMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let pairGrid: [number, number][][] = [];\n  for (let i: number = 0; i < columnLength; i++) {\n    let pairRow: [number, number][] = [];\n    for (let j: number = 0; j < rowLength; j++) {\n      let currentNode: node = grid[i][j];\n      pairRow.push([currentNode.x, currentNode.y]);\n    }\n    pairGrid.push(pairRow);\n  }\n  const dir: number[] = [0, 1, 0, -1, 0];\n  // Create the maze graph\n  let mazeGraph: Map<[number, number], [number, number][]> = new Map();\n  for (let i: number = 0; i < columnLength; i++) {\n    for (let j: number = 0; j < rowLength; j++) {\n      let neighbors: node[] = getNeighbors(grid, [i, j]);\n      mazeGraph.set(pairGrid[i][j], []);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nexport const generateMazeGraph: (\n  rowLength: number,\n  columnLength: number,\n  grid: node[][]\n  // verticalSymetry: boolean,\n  // centralSymetry: boolean\n) => [[number, number][][], Map<[number, number], [number, number][]>] = (\n  rowLength,\n  columnLength,\n  grid\n) => {\n  let [pairGrid, mazeGraph] = createMazeGraph(rowLength, columnLength, grid);\n\n  // 1. Choose the initial cell, mark it as visited and push it to the stack\n  let startNode: [number, number] = pairGrid[0][0];\n  let stack: [number, number][] = [startNode];\n  let visited: [number, number][] = [startNode];\n\n  // 2. While the stack is not empty\n  while (stack.length > 0) {\n    // 1. Pop a cell from the stack and make it a current cell\n    let currentNode: [number, number] = ensure(stack.pop());\n    let currentNonVisitedNeighbors: [number, number][] = getNeighbors(\n      pairGrid,\n      currentNode,\n      rowLength,\n      columnLength,\n      visited\n    );\n    // 2. If the current cell has any neighbours which have not been visited\n    if (currentNonVisitedNeighbors.length > 0) {\n      // 1. Push the current cell to the stack\n      stack.push(currentNode);\n\n      // 2. Choose one of the unvisited neighbours\n      let randIndex: number = Math.floor(\n        Math.random() * currentNonVisitedNeighbors.length\n      );\n      let neighborNode: [number, number] =\n        currentNonVisitedNeighbors[randIndex];\n\n      // 3. Remove the wall between the current cell and the chosen cell\n      let currentNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(currentNode)\n      );\n      currentNodeNeighbors.push(neighborNode);\n      mazeGraph.set(currentNode, currentNodeNeighbors);\n\n      let neighborNodeNeighbors: [number, number][] = ensure(\n        mazeGraph.get(neighborNode)\n      );\n      neighborNodeNeighbors.push(currentNode);\n      mazeGraph.set(neighborNode, neighborNodeNeighbors);\n\n      // 4. Mark the chosen cell as visited and push it to the stack\n      visited.push(neighborNode);\n      stack.push(neighborNode);\n    }\n  }\n  return [pairGrid, mazeGraph];\n};\n\nconst getNeighbors: (\n  grid: [number, number][][],\n  currentNode: [number, number],\n  rowLength: number,\n  columnLength: number,\n  visited: [number, number][]\n) => [number, number][] = (\n  pairGrid,\n  currentNode,\n  rowLength,\n  columnLength,\n  visited\n) => {\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n\n  let newNeighbors: [number, number][] = [];\n  for (let i: number = 0; i < neighbors.length; i++) {\n    if (!visited.includes(neighbors[i])) {\n      newNeighbors.push(neighbors[i]);\n    }\n  }\n\n  return newNeighbors;\n};\n\nexport const getNeighborsEmpty: (\n  pairGrid: [number, number][][],\n  currentNode: [number, number],\n  columnLength: number,\n  rowLength: number\n) => [number, number][] = (pairGrid, currentNode, columnLength, rowLength) => {\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n  ];\n\n  let neighbors: [number, number][] = [];\n  let neighborX: number = -1;\n  let neighborY: number = -1;\n\n  for (const dir of directions) {\n    neighborX = currentNode[0] + dir[0];\n    neighborY = currentNode[1] + dir[1];\n    if (\n      neighborX >= 0 &&\n      neighborX < columnLength &&\n      neighborY >= 0 &&\n      neighborY < rowLength\n    ) {\n      neighbors.push(pairGrid[neighborX][neighborY]);\n    }\n  }\n\n  // let newNeighbors: [number, number][] = [];\n  // for (let i: number = 0; i < neighbors.length; i++) {\n  //   newNeighbors.push(neighbors[i]);\n  // }\n\n  return neighbors;\n};\n\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}