{"ast":null,"code":"import { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\nexport const twoEndedBfs = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n\n  predecessor[startNode.id] = startNode;\n  const successor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n\n  successor[targetList[0].id] = targetList[0]; // Initialize the visited nodes array\n\n  let visitedForward = [];\n  let visitedBackward = [];\n  let visited = []; // Initialize the discovered array\n\n  let discovered = [startNode]; // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n\n  let q = [startNode, targetList[0]]; // While the queue is not empty\n\n  while (q_forward.length > 0 || q_backward.length > 0) {\n    if (q_forward.length > 0) {\n      // Get the element in front of the queue\n      let currentForwardNode = ensure(q_forward.shift());\n\n      if (!visitedForward.find(visitedNode => visitedNode === currentForwardNode)) {\n        // Put the currentNode node in the visited set\n        visitedForward.push(currentForwardNode); // If we found the end node, return the path to it\n\n        if (visitedBackward.find(targetNode => currentForwardNode === targetNode)) {\n          // Retrieve the shortest path\n          const shortestPath = retrieveTwoEndedPath(predecessor, successor, currentForwardNode, startNode, targetList[0]);\n          return [visited, shortestPath];\n        }\n\n        visited.push(currentForwardNode); // iterate through the neighbors of the currentNode node\n\n        for (const neighbor of ensure(mazeGraph.get(pairGrid[currentForwardNode.x][currentForwardNode.y]))) {\n          // Get the coordinates of the neighbor node\n          let neighborX = neighbor[0][0],\n              neighborY = neighbor[0][1];\n          if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n          let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n          predecessor[nextNode.id] = currentForwardNode; // Add the node to the visited nodes\n\n          discovered.push(nextNode); // Push the next node to the queue\n\n          q_forward.push(nextNode);\n        }\n      }\n    }\n  }\n\n  return [visitedForward, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/twoEndedBfs.ts"],"names":["retrieveTwoEndedPath","ensure","twoEndedBfs","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","predecessor","i","push","id","successor","visitedForward","visitedBackward","visited","discovered","q","q_forward","q_backward","currentForwardNode","shift","find","visitedNode","targetNode","shortestPath","neighbor","get","x","y","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"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","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const twoEndedBfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  const successor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n  successor[targetList[0].id] = targetList[0];\n\n  // Initialize the visited nodes array\n  let visitedForward: node[] = [];\n  let visitedBackward: node[] = [];\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode, targetList[0]];\n\n  // While the queue is not empty\n  while (q_forward.length > 0 || q_backward.length > 0) {\n    if (q_forward.length > 0) {\n      // Get the element in front of the queue\n      let currentForwardNode: node = ensure(q_forward.shift());\n\n      if (\n        !visitedForward.find(\n          (visitedNode) => visitedNode === currentForwardNode\n        )\n      ) {\n        // Put the currentNode node in the visited set\n        visitedForward.push(currentForwardNode);\n\n        // If we found the end node, return the path to it\n        if (\n          visitedBackward.find(\n            (targetNode) => currentForwardNode === targetNode\n          )\n        ) {\n          // Retrieve the shortest path\n          const shortestPath = retrieveTwoEndedPath(\n            predecessor,\n            successor,\n            currentForwardNode,\n            startNode,\n            targetList[0]\n          );\n          return [visited, shortestPath];\n        }\n        visited.push(currentForwardNode);\n\n        // iterate through the neighbors of the currentNode node\n        for (const neighbor of ensure(\n          mazeGraph.get(pairGrid[currentForwardNode.x][currentForwardNode.y])\n        )) {\n          // Get the coordinates of the neighbor node\n          let neighborX: number = neighbor[0][0],\n            neighborY: number = neighbor[0][1];\n\n          if (\n            neighborX < 0 ||\n            neighborX >= m ||\n            neighborY < 0 ||\n            neighborY >= n ||\n            discovered.find(\n              (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n            )\n          )\n            continue;\n\n          // Get the node in the grid\n          let nextNode: node = grid[neighborX][neighborY];\n\n          // update the predecessor array\n          predecessor[nextNode.id] = currentForwardNode;\n\n          // Add the node to the visited nodes\n          discovered.push(nextNode);\n\n          // Push the next node to the queue\n          q_forward.push(nextNode);\n        }\n      }\n    }\n  }\n\n  return [visitedForward, []];\n};\n"]},"metadata":{},"sourceType":"module"}