{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx\";\nimport React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\nconst getAddedClassName = (neighbors, node) => {\n  let addedClassName = \"\";\n\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor = neighbors[i];\n    let neighborX = neighbor[0][0],\n        neighborY = neighbor[0][1],\n        distance = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += distance === 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n    if (neighborX === node.x - 1) addedClassName += distance === 1 ? \" no-wall-top\" : \" mud-top\";\n    if (neighborY === node.y + 1) addedClassName += distance === 1 ? \" no-wall-right\" : \" mud-right\";\n    if (neighborY === node.y - 1) addedClassName += distance === 1 ? \" no-wall-left\" : \" mud-left\";\n  }\n\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\nconst addEmoji = node => {\n  if (node.isStart) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"rat\",\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, \"\\uD83D\\uDC00\");\n  }\n\n  if (node.isEnd) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"rat\",\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"\\uD83E\\uDDC0\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  });\n}; // This component represents a single Node in the grid rendered in the DOM\n\n\nexport const _GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-node\" + getAddedClassName(neighbors, node),\n    onMouseDown: e => handleMouseDown(node.x, node.y),\n    onMouseEnter: e => handleMouseEnter(node.x, node.y),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, addEmoji(node));\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.node.isVisited === nextProps.node.isVisited && prevProps.node.isShortestPath === nextProps.node.isShortestPath && getAddedClassName(prevProps.neighbors, prevProps.node) === getAddedClassName(nextProps.neighbors, nextProps.node) && prevProps.node === nextProps.node && prevProps.mouseState === nextProps.mouseState;\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","node","getAddedClassName","neighbors","addedClassName","i","length","neighbor","neighborX","neighborY","distance","x","y","hasCheese","isShortestPath","isVisited","addEmoji","isStart","isEnd","_GridNode","numberOfElementsPerRow","mouseState","handleMouseDown","handleMouseEnter","e","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [[number, number], number][];\n  mouseState: boolean;\n  handleMouseDown: (x: number, y: number) => void;\n  handleMouseEnter: (x: number, y: number) => void;\n}\n\nconst getAddedClassName: (\n  neighbors: [[number, number], number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [[number, number], number] = neighbors[i];\n    let neighborX = neighbor[0][0],\n      neighborY = neighbor[0][1],\n      distance: number = neighbor[1];\n    if (neighborX === node.x + 1)\n      addedClassName += distance === 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n    if (neighborX === node.x - 1)\n      addedClassName += distance === 1 ? \" no-wall-top\" : \" mud-top\";\n    if (neighborY === node.y + 1)\n      addedClassName += distance === 1 ? \" no-wall-right\" : \" mud-right\";\n    if (neighborY === node.y - 1)\n      addedClassName += distance === 1 ? \" no-wall-left\" : \" mud-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\nconst addEmoji: (node: node) => any = (node) => {\n  if (node.isStart) {\n    return (\n      <span role=\"img\" aria-label=\"rat\" className=\"content\">\n        üêÄ\n      </span>\n    );\n  }\n  if (node.isEnd) {\n    return (\n      <span role=\"img\" aria-label=\"rat\" className=\"content\">\n        üßÄ\n      </span>\n    );\n  }\n  return <span></span>;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n  mouseState,\n  handleMouseDown,\n  handleMouseEnter,\n}) => {\n  return (\n    <div\n      className={\"grid-node\" + getAddedClassName(neighbors, node)}\n      onMouseDown={(e) => handleMouseDown(node.x, node.y)}\n      onMouseEnter={(e) => handleMouseEnter(node.x, node.y)}\n    >\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node) &&\n    prevProps.node === nextProps.node &&\n    prevProps.mouseState === nextProps.mouseState\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}