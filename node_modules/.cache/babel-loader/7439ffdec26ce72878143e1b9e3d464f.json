{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx\";\nimport React from \"react\";\nimport \"./GridNode.css\";\n// This component represents a single Node in the grid rendered in the DOM\nexport const GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors\n}) => {\n  const getAddedClassName = () => {\n    let addedClassName = \"\";\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor = neighbors[i];\n      let neighborX = neighbor[0];\n      let neighborY = neighbor[1];\n      if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n      if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n      if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n      if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n    }\n\n    if (node.hasCheese) addedClassName += \" cheese\";\n    return addedClassName;\n    if (node.isShortestPath) addedClassName += \" shortest-path-node\";else if (node.isVisited) addedClassName += \" isVisited\";\n  };\n\n  const addEmoji = node => {\n    if (node.isStart) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, \"\\uD83D\\uDC00\");\n    }\n\n    if (node.isEnd) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, \"\\uD83E\\uDDC0\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-node \" + getAddedClassName(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, addEmoji(node));\n}; // const areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n//   prevProps,\n//   nextProps\n// ) => {\n//   return prevProps.node.className === nextProps.node.className;\n// };\n// export const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","GridNode","numberOfElementsPerRow","node","neighbors","getAddedClassName","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","isShortestPath","isVisited","addEmoji","isStart","isEnd"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AASA;AACA,OAAO,MAAMC,QAAyB,GAAG,CAAC;AACxCC,EAAAA,sBADwC;AAExCC,EAAAA,IAFwC;AAGxCC,EAAAA;AAHwC,CAAD,KAInC;AACJ,QAAMC,iBAA+B,GAAG,MAAM;AAC5C,QAAIC,cAAsB,GAAG,EAA7B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,QAA0B,GAAGL,SAAS,CAACG,CAAD,CAA1C;AACA,UAAIG,SAAS,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,UAAIE,SAAS,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,UAAIC,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,iBAAlB;AAC9B,UAAII,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,cAAlB;AAC9B,UAAIK,SAAS,KAAKR,IAAI,CAACU,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,gBAAlB;AAC9B,UAAIK,SAAS,KAAKR,IAAI,CAACU,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,eAAlB;AAC/B;;AACD,QAAIH,IAAI,CAACW,SAAT,EAAoBR,cAAc,IAAI,SAAlB;AACpB,WAAOA,cAAP;AACA,QAAIH,IAAI,CAACY,cAAT,EAAyBT,cAAc,IAAI,qBAAlB,CAAzB,KACK,IAAIH,IAAI,CAACa,SAAT,EAAoBV,cAAc,IAAI,YAAlB;AAC1B,GAfD;;AAiBA,QAAMW,QAA6B,GAAId,IAAD,IAAU;AAC9C,QAAIA,IAAI,CAACe,OAAT,EAAkB;AAChB,0BACE;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,sBAAW,KAA5B;AAAkC,QAAA,SAAS,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;;AACD,QAAIf,IAAI,CAACgB,KAAT,EAAgB;AACd,0BACE;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,sBAAW,KAA5B;AAAkC,QAAA,SAAS,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF;AAKD;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAE,eAAed,iBAAiB,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDY,QAAQ,CAACd,IAAD,CAA7D,CADF;AAGD,CA3CM,C,CA6CP;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const getAddedClassName: () => string = () => {\n    let addedClassName: string = \"\";\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor: [number, number] = neighbors[i];\n      let neighborX = neighbor[0];\n      let neighborY = neighbor[1];\n      if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n      if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n      if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n      if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n    }\n    if (node.hasCheese) addedClassName += \" cheese\";\n    return addedClassName;\n    if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n    else if (node.isVisited) addedClassName += \" isVisited\";\n  };\n\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üêÄ\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üßÄ\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  return (\n    <div className={\"grid-node \" + getAddedClassName()}>{addEmoji(node)}</div>\n  );\n};\n\n// const areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n//   prevProps,\n//   nextProps\n// ) => {\n//   return prevProps.node.className === nextProps.node.className;\n// };\n\n// export const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}