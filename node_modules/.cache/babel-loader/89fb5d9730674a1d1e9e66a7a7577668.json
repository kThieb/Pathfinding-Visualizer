{"ast":null,"code":"import { BinaryHeap } from \"../../dataStructures/binaryHeap\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\nexport const aStar = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n        n = grid[0].length;\n  const endNode = targetList[0]; // Initialize the distances array\n\n  const distances = [];\n\n  for (let i = 0; i < m; i++) {\n    distances.push([]);\n\n    for (let j = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0; // Initialize the predecessor array\n\n  const predecessor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n\n  predecessor[startNode.id] = startNode; // Initialize the visited nodes array\n\n  let visited = []; //   Initialize the Binary Heap\n\n  let pq = new BinaryHeap((a, b) => {\n    let dA = manhattanDistance(a[0], endNode),\n        dB = manhattanDistance(b[0], endNode);\n\n    if (distances[a[0].x][a[0].y] + dA !== distances[b[0].x][b[0].y] + dB) {\n      return distances[a[0].x][a[0].y] + dA < distances[b[0].x][b[0].y] + dB;\n    }\n\n    return a[1] < b[1];\n  });\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode = ensure(pq.pop()); // add the current node to the visited nodes\n\n    visited.push(currentNode); // If we found the endNode, return the shortest path to it\n\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [[visited, shortestPath], distances[endNode.x][endNode.y]];\n    } // Get the coordinates of the nodes\n\n\n    let currentX = currentNode.x;\n    let currentY = currentNode.y; // Iterate the neighbors of the node\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentX][currentY]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1]; // Check if the coordinates are valid\n\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n) continue;\n      let nextNode = grid[neighborX][neighborY]; // Calculate the distance between the current node and the next node\n\n      let currentDistance = distances[currentX][currentY] + neighbor[1]; // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      } // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n\n\n      if (!visited.find(visitedNode => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n\n  return [visited, []];\n};\n\nconst manhattanDistance = (a, b) => {\n  return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/aStar.ts"],"names":["BinaryHeap","retrievePath","ensure","aStar","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","endNode","distances","i","push","j","Number","MAX_SAFE_INTEGER","x","y","predecessor","id","visited","pq","a","b","dA","manhattanDistance","dB","size","currentNode","pop","shortestPath","currentX","currentY","neighbor","get","neighborX","neighborY","nextNode","currentDistance","find","visitedNode","remove","Math","abs"],"mappings":"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","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { BinaryHeap } from \"../../dataStructures/binaryHeap\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const aStar: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [[node[], node[]], number] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  const m = grid.length,\n    n = grid[0].length;\n  const endNode: node = targetList[0];\n\n  // Initialize the distances array\n  const distances: number[][] = [];\n  for (let i: number = 0; i < m; i++) {\n    distances.push([]);\n    for (let j: number = 0; j < n; j++) {\n      distances[i].push(Number.MAX_SAFE_INTEGER);\n    }\n  }\n\n  distances[startNode.x][startNode.y] = 0;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  //   Initialize the Binary Heap\n  let pq: BinaryHeap<node> = new BinaryHeap<node>(\n    (a: [node, number], b: [node, number]) => {\n      let dA: number = manhattanDistance(a[0], endNode),\n        dB: number = manhattanDistance(b[0], endNode);\n      if (distances[a[0].x][a[0].y] + dA !== distances[b[0].x][b[0].y] + dB) {\n        return distances[a[0].x][a[0].y] + dA < distances[b[0].x][b[0].y] + dB;\n      }\n      return a[1] < b[1];\n    }\n  );\n\n  pq.push(startNode);\n\n  while (pq.size() > 0) {\n    let currentNode: node = ensure(pq.pop());\n\n    // add the current node to the visited nodes\n    visited.push(currentNode);\n\n    // If we found the endNode, return the shortest path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [[visited, shortestPath], distances[endNode.x][endNode.y]];\n    }\n\n    // Get the coordinates of the nodes\n    let currentX: number = currentNode.x;\n    let currentY: number = currentNode.y;\n\n    // Iterate the neighbors of the node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentX][currentY])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the coordinates are valid\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // Calculate the distance between the current node and the next node\n      let currentDistance: number = distances[currentX][currentY] + neighbor[1];\n\n      // If the distance is less than the distance in the array distances,\n      // change it and change the predecessor of the next node to be the current one\n      if (currentDistance < distances[neighborX][neighborY]) {\n        predecessor[nextNode.id] = currentNode;\n        distances[neighborX][neighborY] = currentDistance;\n      }\n\n      // If the node is not yet visited, remove it from the heap and\n      // put it back in with its new distance as the score function\n      if (!visited.find((visitedNode) => visitedNode === nextNode)) {\n        pq.remove(nextNode);\n        pq.push(nextNode);\n      }\n    }\n  }\n  return [visited, []];\n};\n\nconst manhattanDistance: (a: node, b: node) => number = (a, b) => {\n  return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n};\n"]},"metadata":{},"sourceType":"module"}