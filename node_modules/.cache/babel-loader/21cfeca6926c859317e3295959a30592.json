{"ast":null,"code":"export class BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = void 0;\n    this.compare = void 0;\n    this.content = [];\n    this.compare = scoreFunction;\n  }\n\n  push(element) {\n    this.content.push(element);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    let result = this.content[0];\n    let end = this.content.pop();\n\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n\n    return result;\n  }\n\n  remove(node) {\n    let length = this.content.length; // To remove a value, we must search through the array to find\n    // it.\n\n    for (let i = 0; i < length; i++) {\n      if (this.content[i] !== node) continue; // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n\n      let end = this.content.pop(); // If the element we popped was the one we needed to remove,\n      // we're done.\n\n      if (i === length - 1) break; // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    let element = this.content[n]; // When at 0, an element can not go up any further.\n\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN = Math.floor((n + 1) / 2) - 1,\n          parent = this.content[parentN]; // If the parent has a lesser score, things are in order and we\n      // are done.\n\n      if (this.compare(ensure(element), ensure(parent))) break; // Otherwise, swap the parent with the current element and\n      // continue.\n\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    let length = this.content.length,\n        element = this.content[n];\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N = (n + 1) * 2,\n          child1N = child2N - 1; // This is used to store the new position of the element,\n      // if any.\n\n      let swap = null; // If the first child exists (is inside the array)...\n\n      if (child1N < length) {\n        // Look it up and compute its score.\n        let child1 = this.content[child1N]; // If the score is less than our element's, we need to swap.\n\n        if (this.compare(ensure(child1), ensure(element))) swap = child1N;\n      } // Do the same checks for the other child.\n\n\n      if (child2N < length) {\n        let child2 = this.content[child2N];\n        if (this.compare(ensure(child2), swap === null ? ensure(element) : ensure(child1))) swap = child2N;\n      } // No need to swap further, we are done.\n\n\n      if (swap == null) break; // Otherwise, swap and continue.\n\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n\n}\n\nfunction ensure(argument, message = \"This value was promised to be there.\") {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/binaryHeap.ts"],"names":["BinaryHeap","constructor","scoreFunction","content","compare","push","element","bubbleUp","length","pop","result","end","sinkDown","remove","node","i","size","n","parentN","Math","floor","parent","ensure","child2N","child1N","swap","child1","child2","argument","message","undefined","TypeError"],"mappings":"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","sourcesContent":["import { node } from \"./usefulInterfaces\";\n\nexport class BinaryHeap<T> {\n  content: (T | undefined)[];\n  compare: (x: T, y: T) => number;\n\n  constructor(scoreFunction: (x: T, y: T) => number) {\n    this.content = [];\n    this.compare = scoreFunction;\n  }\n\n  push(element: T) {\n    this.content.push(element);\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop(): T | undefined {\n    let result = this.content[0];\n    let end = this.content.pop();\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  remove(node: T) {\n    let length = this.content.length;\n    // To remove a value, we must search through the array to find\n    // it.\n    for (let i = 0; i < length; i++) {\n      if (this.content[i] !== node) continue;\n      // When it is found, the process seen in 'pop' is repeated\n      // to fill up the hole.\n      let end = this.content.pop();\n      // If the element we popped was the one we needed to remove,\n      // we're done.\n      if (i === length - 1) break;\n      // Otherwise, we replace the removed element with the popped\n      // one, and allow it to float up or sink down as appropriate.\n      this.content[i] = end;\n      this.bubbleUp(i);\n      this.sinkDown(i);\n      break;\n    }\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  private bubbleUp(n: number) {\n    // Fetch the element that has to be moved.\n    let element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentN = Math.floor((n + 1) / 2) - 1,\n        parent = this.content[parentN];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (this.compare(ensure(element), ensure(parent))) break;\n\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.content[parentN] = element;\n      this.content[n] = parent;\n      n = parentN;\n    }\n  }\n\n  private sinkDown(n: number) {\n    // Look up the target element and its score.\n    let length = this.content.length,\n      element = this.content[n];\n\n    while (true) {\n      // Compute the indices of the child elements.\n      let child2N = (n + 1) * 2,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        let child1 = this.content[child1N];\n        // If the score is less than our element's, we need to swap.\n        if (this.compare(ensure(child1), ensure(element))) swap = child1N;\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        let child2 = this.content[child2N];\n        if (\n          this.compare(\n            ensure(child2),\n            swap === null ? ensure(element) : ensure(child1)\n          )\n        )\n          swap = child2N;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.content[n] = this.content[swap];\n      this.content[swap] = element;\n      n = swap;\n    }\n  }\n}\n\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}