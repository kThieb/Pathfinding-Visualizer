{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/simple-visualizer/src/GridNode/GridNode.tsx\";\nimport React, { useState } from \"react\";\nimport \"./GridNode.css\";\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors\n}) => {\n  // const style = {\n  //   flexBasis: `${100 / numberOfElementsPerRow}% - 1px`,\n  //   backgroundColor: \"white\",\n  // };\n  // if (node.isStart) style.backgroundColor = \"green\";\n  // if (node.isEnd) style.backgroundColor = \"red\";\n  let addedClassName = \"\";\n\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n\n  if (node.hasCheese) addedClassName += \" cheese\";\n  const [classNames, setClassNames] = useState(addedClassName);\n  setClassNames(addedClassName);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: node.className + classNames,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }\n  });\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.node.className === nextProps.node.className;\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/simple-visualizer/src/GridNode/GridNode.tsx"],"names":["React","useState","_GridNode","numberOfElementsPerRow","node","neighbors","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","classNames","setClassNames","className","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AASA;AACA,OAAO,MAAMC,SAA0B,GAAG,CAAC;AACzCC,EAAAA,sBADyC;AAEzCC,EAAAA,IAFyC;AAGzCC,EAAAA;AAHyC,CAAD,KAIpC;AACJ;AACA;AACA;AACA;AACA;AACA;AAEA,MAAIC,cAAsB,GAAG,EAA7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIE,QAA0B,GAAGJ,SAAS,CAACE,CAAD,CAA1C;AACA,QAAIG,SAAS,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAIE,SAAS,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAIC,SAAS,KAAKN,IAAI,CAACQ,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,iBAAlB;AAC9B,QAAII,SAAS,KAAKN,IAAI,CAACQ,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,cAAlB;AAC9B,QAAIK,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,gBAAlB;AAC9B,QAAIK,SAAS,KAAKP,IAAI,CAACS,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,eAAlB;AAC/B;;AACD,MAAIF,IAAI,CAACU,SAAT,EAAoBR,cAAc,IAAI,SAAlB;AAEpB,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAACK,cAAD,CAA5C;AACAU,EAAAA,aAAa,CAACV,cAAD,CAAb;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAEF,IAAI,CAACa,SAAL,GAAiBF,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA5BM;;AA8BP,MAAMG,QAAyD,GAAG,CAChEC,SADgE,EAEhEC,SAFgE,KAG7D;AACH,SAAOD,SAAS,CAACf,IAAV,CAAea,SAAf,KAA6BG,SAAS,CAAChB,IAAV,CAAea,SAAnD;AACD,CALD;;AAOA,OAAO,MAAMI,QAAQ,GAAGrB,KAAK,CAACsB,IAAN,CAAWpB,SAAX,EAAsBgB,QAAtB,CAAjB","sourcesContent":["import React, { useState } from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  // const style = {\n  //   flexBasis: `${100 / numberOfElementsPerRow}% - 1px`,\n  //   backgroundColor: \"white\",\n  // };\n  // if (node.isStart) style.backgroundColor = \"green\";\n  // if (node.isEnd) style.backgroundColor = \"red\";\n\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [number, number] = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n\n  const [classNames, setClassNames] = useState(addedClassName);\n  setClassNames(addedClassName);\n\n  return <div className={node.className + classNames}></div>;\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return prevProps.node.className === nextProps.node.className;\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}