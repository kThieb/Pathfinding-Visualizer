{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/simple-visualizer/src/GridNode/GridNode.tsx\";\nimport React, { useState } from \"react\";\nimport \"./GridNode.css\";\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors\n}) => {\n  const [classNames, setClassNames] = useState(\"\");\n\n  const getAddedClassName = () => {\n    let addedClassName = \"\";\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor = neighbors[i];\n      let neighborX = neighbor[0];\n      let neighborY = neighbor[1];\n      if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n      if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n      if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n      if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n    }\n\n    if (node.hasCheese) addedClassName += \" cheese\";\n    return addedClassName;\n  }; // setClassNames(getAddedClassName());\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: node.className + classNames,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  });\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.node.className === nextProps.node.className;\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/simple-visualizer/src/GridNode/GridNode.tsx"],"names":["React","useState","_GridNode","numberOfElementsPerRow","node","neighbors","classNames","setClassNames","getAddedClassName","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","className","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AASA;AACA,OAAO,MAAMC,SAA0B,GAAG,CAAC;AACzCC,EAAAA,sBADyC;AAEzCC,EAAAA,IAFyC;AAGzCC,EAAAA;AAHyC,CAAD,KAIpC;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMO,iBAA+B,GAAG,MAAM;AAC5C,QAAIC,cAAsB,GAAG,EAA7B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACM,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIE,QAA0B,GAAGP,SAAS,CAACK,CAAD,CAA1C;AACA,UAAIG,SAAS,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,UAAIE,SAAS,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,UAAIC,SAAS,KAAKT,IAAI,CAACW,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,iBAAlB;AAC9B,UAAII,SAAS,KAAKT,IAAI,CAACW,CAAL,GAAS,CAA3B,EAA8BN,cAAc,IAAI,cAAlB;AAC9B,UAAIK,SAAS,KAAKV,IAAI,CAACY,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,gBAAlB;AAC9B,UAAIK,SAAS,KAAKV,IAAI,CAACY,CAAL,GAAS,CAA3B,EAA8BP,cAAc,IAAI,eAAlB;AAC/B;;AACD,QAAIL,IAAI,CAACa,SAAT,EAAoBR,cAAc,IAAI,SAAlB;AACpB,WAAOA,cAAP;AACD,GAbD,CAHI,CAkBJ;;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAEL,IAAI,CAACc,SAAL,GAAiBZ,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAzBM;;AA2BP,MAAMa,QAAyD,GAAG,CAChEC,SADgE,EAEhEC,SAFgE,KAG7D;AACH,SAAOD,SAAS,CAAChB,IAAV,CAAec,SAAf,KAA6BG,SAAS,CAACjB,IAAV,CAAec,SAAnD;AACD,CALD;;AAOA,OAAO,MAAMI,QAAQ,GAAGtB,KAAK,CAACuB,IAAN,CAAWrB,SAAX,EAAsBiB,QAAtB,CAAjB","sourcesContent":["import React, { useState } from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const [classNames, setClassNames] = useState(\"\");\n\n  const getAddedClassName: () => string = () => {\n    let addedClassName: string = \"\";\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor: [number, number] = neighbors[i];\n      let neighborX = neighbor[0];\n      let neighborY = neighbor[1];\n      if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n      if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n      if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n      if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n    }\n    if (node.hasCheese) addedClassName += \" cheese\";\n    return addedClassName;\n  };\n\n  // setClassNames(getAddedClassName());\n\n  return <div className={node.className + classNames}></div>;\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return prevProps.node.className === nextProps.node.className;\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}