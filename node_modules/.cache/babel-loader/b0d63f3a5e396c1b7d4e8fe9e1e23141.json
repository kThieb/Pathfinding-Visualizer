{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{retrievePath}from\"../retrievePath\";import{ensure}from\"../../ensureNotUndefined\";export var dfs=function dfs(grid,pairGrid,mazeGraph,startNode,targetList){var m=grid.length,n=grid[0].length;// Initialize the predecessor array\nvar predecessor=[];predecessor.fill(startNode,0,m*n);predecessor[startNode.id]=startNode;// Initialize the visited nodes array\nvar visited=[];// Discovered array\nvar discovered=[startNode];// Initialize the stack\nvar stack=[startNode];// While the stack is not empty\nvar _loop=function _loop(){// Get the element in front of the stack\nvar currentNode=ensure(stack.pop());if(visited.find(function(visitedNode){return visitedNode===currentNode;}))return\"continue\";// Put the currentNode node in the visited set\nvisited.push(currentNode);// If we found the end node, return the path to it\nif(targetList.find(function(targetNode){return currentNode;})){// Retrieve the shortest path\nvar shortestPath=retrievePath(predecessor,startNode,currentNode);return{v:[visited,shortestPath]};}// iterate through the neighbors of the currentNode node\nvar _iterator=_createForOfIteratorHelper(ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))),_step;try{var _loop2=function _loop2(){var neighbor=_step.value;// Get the coordinates of the neighbor node\nvar neighborX=neighbor[0][0],neighborY=neighbor[0][1];// Check if the node is on the board\nif(neighborX<0||neighborX>=m||neighborY<0||neighborY>=n||discovered.find(function(discoveredNode){return discoveredNode===grid[neighborX][neighborY];}))return\"continue\";// Get the node in the grid\nvar nextNode=grid[neighborX][neighborY];// update the predecessor array\npredecessor[nextNode.id]=currentNode;// Add the node to the discovered array\ndiscovered.push(nextNode);// Push the nextNode to the stack\nstack.push(nextNode);};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret2=_loop2();if(_ret2===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};while(stack.length>0){var _ret=_loop();if(_ret===\"continue\")continue;if(typeof _ret===\"object\")return _ret.v;}return[visited,[]];};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/dfs.ts"],"names":["retrievePath","ensure","dfs","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","predecessor","fill","id","visited","discovered","stack","currentNode","pop","find","visitedNode","push","targetNode","shortestPath","get","x","y","neighbor","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"sNACA,OAASA,YAAT,KAA6B,iBAA7B,CACA,OAASC,MAAT,KAAuB,0BAAvB,CAEA,MAAO,IAAMC,CAAAA,GAMQ,CAAG,QANXA,CAAAA,GAMW,CAACC,IAAD,CAAOC,QAAP,CAAiBC,SAAjB,CAA4BC,SAA5B,CAAuCC,UAAvC,CAAsD,CAC5E,GAAMC,CAAAA,CAAC,CAAGL,IAAI,CAACM,MAAf,CACEC,CAAC,CAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CAGA;AACA,GAAME,CAAAA,WAAmB,CAAG,EAA5B,CACAA,WAAW,CAACC,IAAZ,CAAiBN,SAAjB,CAA4B,CAA5B,CAA+BE,CAAC,CAAGE,CAAnC,EACAC,WAAW,CAACL,SAAS,CAACO,EAAX,CAAX,CAA4BP,SAA5B,CAEA;AACA,GAAIQ,CAAAA,OAAe,CAAG,EAAtB,CAEA;AACA,GAAIC,CAAAA,UAAkB,CAAG,CAACT,SAAD,CAAzB,CAEA;AACA,GAAIU,CAAAA,KAAa,CAAG,CAACV,SAAD,CAApB,CAEA;AAlB4E,2BAoB1E;AACA,GAAIW,CAAAA,WAAiB,CAAGhB,MAAM,CAACe,KAAK,CAACE,GAAN,EAAD,CAA9B,CAEA,GAAIJ,OAAO,CAACK,IAAR,CAAa,SAACC,WAAD,QAAiBA,CAAAA,WAAW,GAAKH,WAAjC,EAAb,CAAJ,CAAgE,iBAEhE;AACAH,OAAO,CAACO,IAAR,CAAaJ,WAAb,EAEA;AACA,GAAIV,UAAU,CAACY,IAAX,CAAgB,SAACG,UAAD,QAAgBL,CAAAA,WAAhB,EAAhB,CAAJ,CAAkD,CAChD;AACA,GAAMM,CAAAA,YAAY,CAAGvB,YAAY,CAACW,WAAD,CAAcL,SAAd,CAAyBW,WAAzB,CAAjC,CACA,SAAO,CAACH,OAAD,CAAUS,YAAV,CAAP,EACD,CAED;AAnC0E,yCAoCnDtB,MAAM,CAC3BI,SAAS,CAACmB,GAAV,CAAcpB,QAAQ,CAACa,WAAW,CAACQ,CAAb,CAAR,CAAwBR,WAAW,CAACS,CAApC,CAAd,CAD2B,CApC6C,4CAoC/DC,CAAAA,QApC+D,aAuCxE;AACA,GAAIC,CAAAA,SAAiB,CAAGD,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAxB,CACEE,SAAiB,CAAGF,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CADtB,CAGA;AACA,GACEC,SAAS,CAAG,CAAZ,EACAA,SAAS,EAAIpB,CADb,EAEAqB,SAAS,CAAG,CAFZ,EAGAA,SAAS,EAAInB,CAHb,EAIAK,UAAU,CAACI,IAAX,CACE,SAACW,cAAD,QAAoBA,CAAAA,cAAc,GAAK3B,IAAI,CAACyB,SAAD,CAAJ,CAAgBC,SAAhB,CAAvC,EADF,CALF,CASE,iBAEF;AACA,GAAIE,CAAAA,QAAc,CAAG5B,IAAI,CAACyB,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CAEA;AACAlB,WAAW,CAACoB,QAAQ,CAAClB,EAAV,CAAX,CAA2BI,WAA3B,CAEA;AACAF,UAAU,CAACM,IAAX,CAAgBU,QAAhB,EAEA;AACAf,KAAK,CAACK,IAAN,CAAWU,QAAX,EAjEwE,EAoC1E,+CAEG,0CAeC,SAaH,CAlEyE,uDAmB5E,MAAOf,KAAK,CAACP,MAAN,CAAe,CAAtB,CAAyB,uCAIyC,SAJzC,wCAgDxB,CAED,MAAO,CAACK,OAAD,CAAU,EAAV,CAAP,CACD,CA5EM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const dfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the stack\n  let stack: node[] = [startNode];\n\n  // While the stack is not empty\n  while (stack.length > 0) {\n    // Get the element in front of the stack\n    let currentNode: node = ensure(stack.pop());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (targetList.find((targetNode) => currentNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      // Check if the node is on the board\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the discovered array\n      discovered.push(nextNode);\n\n      // Push the nextNode to the stack\n      stack.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}