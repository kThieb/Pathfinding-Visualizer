{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavItem, DropDownMenu, DropDownAlgo, DropDownSlider, NavButton } from \"../NavBar/NavBar\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { CSSTransition } from \"react-transition-group\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 60; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [6, 3], [6, 24]);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, 0.6); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.6);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\"); // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  // States of the start and end node\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeAlgorithm = (visited, path) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: false,\n          isShortestPath: true\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return algorithmName => {\n      setAlgorithm(algorithmName);\n    };\n  }; // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n\n\n  const chooseAlgorithm = () => {\n    return algorithms[algorithm];\n  };\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path] = chooseAlgorithm()(grid, pairGrid, maze, startNode, endNode);\n      const n = visited.length,\n            m = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, newGrid, wallsDensity);\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitialize = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], [endNode.x, endNode.y]);\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, newGrid, 0.6);\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setWallsDensity(0.6);\n      setIsVisualized(0);\n    }\n  }; // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n  // Render the app\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Reinitialize\",\n    isVisualized: isVisualized,\n    className: \"reinitialize\",\n    startClassName: \"greyed-out\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"highlight\",\n    handleClick: reinitialize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls\",\n    minValue: 0.1,\n    maxValue: 1,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Visualize \" + algorithm + \"!\",\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CSSTransition, {\n    in: algoActiveMenu === \"main\",\n    unmountOnExit: true,\n    timeout: 500,\n    className: \"menu-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    className: \"menu-unweighted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownAlgo, {\n    changeAlgorithm: handleAlgorithmChange,\n    algorithmName: \"Depth First Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, \"Depth First Search\"), algorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 55\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownAlgo, {\n    changeAlgorithm: handleAlgorithmChange,\n    algorithmName: \"Breadth First Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), algorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\"))), /*#__PURE__*/React.createElement(CSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    className: \"menu-weighted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownAlgo, {\n    changeAlgorithm: handleAlgorithmChange,\n    algorithmName: \"Dijkstra's algorithm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), algorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownAlgo, {\n    changeAlgorithm: handleAlgorithmChange,\n    algorithmName: \"A* algorithm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), algorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 49\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownAlgo","DropDownSlider","NavButton","algorithms","generateMazeGraph","constructGrid","CSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","isVisualized","setIsVisualized","algoActiveMenu","setAlgoActiveMenu","startNode","setStartNode","endNode","setEndNode","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","node","x","y","newNode","isVisited","m","isShortestPath","handleAlgorithmChange","algorithmName","chooseAlgorithm","handleVisualization","generateMaze","newPairGrid","newMaze","reinitialize","newStartNode","newEndNode"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownAlgo,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 60;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.6\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.6);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return (algorithmName) => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [number, number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNode\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitialize: () => void = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNode.x, endNode.y]\n      );\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        0.6\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setWallsDensity(0.6);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n\n  // Render the app\n  return (\n    <div className=\"App\">\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitialize}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0.1}\n              maxValue={1}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <CSSTransition\n            in={algoActiveMenu === \"main\"}\n            unmountOnExit\n            timeout={500}\n            className=\"menu-main\"\n          ></CSSTransition>\n          <CSSTransition\n            in={algoActiveMenu === \"unweighted\"}\n            unmountOnExit\n            timeout={500}\n            className=\"menu-unweighted\"\n          >\n            <DropDownMenu>\n              <DropDownAlgo\n                changeAlgorithm={handleAlgorithmChange}\n                algorithmName=\"Depth First Search\"\n              >\n                <p>Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownAlgo>\n              <DropDownAlgo\n                changeAlgorithm={handleAlgorithmChange}\n                algorithmName=\"Breadth First Search\"\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownAlgo>\n            </DropDownMenu>\n          </CSSTransition>\n          <CSSTransition\n            in={algoActiveMenu === \"weighted\"}\n            unmountOnExit\n            timeout={500}\n            className=\"menu-weighted\"\n          >\n            <DropDownMenu>\n              <DropDownAlgo\n                changeAlgorithm={handleAlgorithmChange}\n                algorithmName=\"Dijkstra's algorithm\"\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownAlgo>\n              <DropDownAlgo\n                changeAlgorithm={handleAlgorithmChange}\n                algorithmName=\"A* algorithm\"\n              >\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownAlgo>\n            </DropDownMenu>\n          </CSSTransition>\n        </NavItem>\n      </NavBar>\n      {/* <SecondaryHeader>\n        <button\n          className=\"visualize-button\"\n          onClick={(e) => {\n            visualizeAlgorithm(\n              ...chooseAlgorithm(algorithm)(\n                grid,\n                pairGrid,\n                mazeGraph,\n                startNode,\n                endNode\n              )\n            );\n          }}\n        >\n          Visualize the path!\n        </button>\n      </SecondaryHeader> */}\n      <Grid grid={grid} pairGrid={pairGrid} maze={maze} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}