{"ast":null,"code":"import _objectSpread from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./Visualizer.css\";import{Grid}from\"../Grid/Grid\";import{NavBar,NavItem,DropDownMenu,DropDownItem,DropDownSlider,NavButton}from\"../NavBar/NavBar\";import{algorithms}from\"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";import{generateMazeGraph}from\"../helperFunctions/mazeGenerators/mazeGraph\";import{constructGrid}from\"../helperFunctions/constructGrid\";import{WrapperCSSTransition}from\"../Wrapper/Wrapper\";var NUMBER_OF_COLUMNS=28;var NUMBER_OF_ROWS=13;var VISITED_ANIMATION_TIMEOUT=35;var PATH_ANIMATION_TIMEOUT=60;// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nvar _constructGrid=constructGrid(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,[6,3],[6,24]),_constructGrid2=_slicedToArray(_constructGrid,3),firstGrid=_constructGrid2[0],firstStartNode=_constructGrid2[1],firstEndNode=_constructGrid2[2];var _generateMazeGraph=generateMazeGraph(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,firstGrid,0.6),_generateMazeGraph2=_slicedToArray(_generateMazeGraph,2),firstpairGrid=_generateMazeGraph2[0],mazeGraph=_generateMazeGraph2[1];// Component rendering everything in the webpage.\nvar Visualizer=function Visualizer(){// States managing the grid\nvar _useState=useState(firstGrid),_useState2=_slicedToArray(_useState,2),grid=_useState2[0],setGrid=_useState2[1];var _useState3=useState(mazeGraph),_useState4=_slicedToArray(_useState3,2),maze=_useState4[0],setMaze=_useState4[1];var _useState5=useState(firstpairGrid),_useState6=_slicedToArray(_useState5,2),pairGrid=_useState6[0],setPairGrid=_useState6[1];var _useState7=useState(\"Dijkstra's algorithm\"),_useState8=_slicedToArray(_useState7,2),algorithm=_useState8[0],setAlgorithm=_useState8[1];var _useState9=useState(0.6),_useState10=_slicedToArray(_useState9,2),wallsDensity=_useState10[0],setWallsDensity=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),isVisualized=_useState12[0],setIsVisualized=_useState12[1];// States managing the dropdown menu\nvar _useState13=useState(\"main\"),_useState14=_slicedToArray(_useState13,2),algoActiveMenu=_useState14[0],setAlgoActiveMenu=_useState14[1];var _useState15=useState(undefined),_useState16=_slicedToArray(_useState15,2),height=_useState16[0],setHeight=_useState16[1];// const [mouseIsPressed, setMouseIsPressed] = useState(false);\n// States of the start and end node\nvar _useState17=useState(firstStartNode),_useState18=_slicedToArray(_useState17,2),startNode=_useState18[0],setStartNode=_useState18[1];var _useState19=useState(firstEndNode),_useState20=_slicedToArray(_useState19,2),endNode=_useState20[0],setEndNode=_useState20[1];// This function is there to visualize the algorithm chosen in the drop down menu\nvar visualizeAlgorithm=function visualizeAlgorithm(visited,path){var n=visited.length;var _loop=function _loop(i){setTimeout(function(){var newGrid=grid.slice();var node=visited[i];// define the x and y of the current node\nvar x=node.x;var y=node.y;var newNode=_objectSpread(_objectSpread({},node),{},{isVisited:true});newGrid[x][y]=newNode;setGrid(newGrid);},VISITED_ANIMATION_TIMEOUT*i);};for(var i=0;i<n;i++){_loop(i);}var m=path.length;var _loop2=function _loop2(_i){setTimeout(function(){var newGrid=grid.slice();var node=path[_i];// define the x and y of the current node\nvar x=node.x;var y=node.y;var newNode=_objectSpread(_objectSpread({},node),{},{isVisited:false,isShortestPath:true});newGrid[x][y]=newNode;setGrid(newGrid);},VISITED_ANIMATION_TIMEOUT*n+PATH_ANIMATION_TIMEOUT*_i);};for(var _i=0;_i<m;_i++){_loop2(_i);}};// This function is passed to the drop down menu to handle the change of algorithm\nvar handleAlgorithmChange=function handleAlgorithmChange(algorithmName){return function(){setAlgorithm(algorithmName);};};// This function handles the click on the menu buttons\nvar handleMenuChange=function handleMenuChange(menuName){return function(){return setAlgoActiveMenu(menuName);};};// This function changes the algorithm that will be run, at the moment only dijkstra is implemented\nvar chooseAlgorithm=function chooseAlgorithm(){return algorithms[algorithm];};// This function handles the logic of the visualization of the algorithms\nvar handleVisualization=function handleVisualization(){if(isVisualized===0){setIsVisualized(1);var _chooseAlgorithm=chooseAlgorithm()(grid,pairGrid,maze,startNode,endNode),_chooseAlgorithm2=_slicedToArray(_chooseAlgorithm,2),_visited=_chooseAlgorithm2[0],_path=_chooseAlgorithm2[1];var n=_visited.length,m=_path.length;visualizeAlgorithm(_visited,_path);setTimeout(function(){setIsVisualized(2);},VISITED_ANIMATION_TIMEOUT*n+PATH_ANIMATION_TIMEOUT*m);}};// This function calls the generate maze function\nvar generateMaze=function generateMaze(){if(isVisualized===0){var newGrid=grid.slice();var _generateMazeGraph3=generateMazeGraph(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,newGrid,wallsDensity),_generateMazeGraph4=_slicedToArray(_generateMazeGraph3,2),newPairGrid=_generateMazeGraph4[0],newMaze=_generateMazeGraph4[1];setGrid(newGrid);setPairGrid(newPairGrid);setMaze(newMaze);}};// Reinitialize the the board\nvar reinitialize=function reinitialize(){if(isVisualized===2){var _constructGrid3=constructGrid(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,[startNode.x,startNode.y],[endNode.x,endNode.y]),_constructGrid4=_slicedToArray(_constructGrid3,3),newGrid=_constructGrid4[0],newStartNode=_constructGrid4[1],newEndNode=_constructGrid4[2];var _generateMazeGraph5=generateMazeGraph(NUMBER_OF_COLUMNS,NUMBER_OF_ROWS,newGrid,0.6),_generateMazeGraph6=_slicedToArray(_generateMazeGraph5,2),newPairGrid=_generateMazeGraph6[0],newMaze=_generateMazeGraph6[1];setGrid(newGrid);setPairGrid(newPairGrid);setMaze(newMaze);setStartNode(newStartNode);setEndNode(newEndNode);setWallsDensity(0.6);setIsVisualized(0);}};// The following block of functions handles the making of walls in the grid\n// This feature is currently not used as it is not a good fit with the current direction of the app\n// const toggleWall: (x: number, y: number) => void = (x, y) => {\n//   const newGrid: node[][] = grid.slice();\n//   let newNode;\n//   if (!newGrid[x][y].isWall) {\n//     newNode = {\n//       ...newGrid[x][y],\n//       isWall: !newGrid[x][y].isWall,\n//       className: \"grid-node wall-node\",\n//     };\n//   } else {\n//     newNode = {\n//       ...newGrid[x][y],\n//       isWall: !newGrid[x][y].isWall,\n//       className: \"grid-node\",\n//     };\n//   }\n//   newGrid[x][y] = newNode;\n//   setGrid(newGrid);\n// };\n// // handles the case when the mouse button is down\n// const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n//   toggleWall(x, y);\n//   setMouseIsPressed(false);\n// };\n// // handles the case whan the mouse button is down and you enter a node\n// const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n//   if (mouseIsPressed) {\n//     toggleWall(x, y);\n//   }\n// };\n// // handles the case when you mouse up\n// const handleMouseUp: () => void = () => {\n//   setMouseIsPressed(false);\n// };\n// Render the app\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(NavBar,null,/*#__PURE__*/React.createElement(NavButton,{text:\"Reinitialize\",isVisualized:isVisualized,className:\"reinitialize\",startClassName:\"greyed-out\",visualizingClassName:\"greyed-out\",visualizedClassName:\"highlight\",handleClick:reinitialize}),/*#__PURE__*/React.createElement(NavButton,{text:\"Generate Maze\",isVisualized:isVisualized,className:\"generate-maze\",visualizingClassName:\"greyed-out\",visualizedClassName:\"greyed-out\",handleClick:generateMaze}),/*#__PURE__*/React.createElement(NavItem,{text:\"Maze options\",id:\"maze-options\",isVisualized:isVisualized,shouldGreyOut:true},/*#__PURE__*/React.createElement(DropDownMenu,null,/*#__PURE__*/React.createElement(DropDownSlider,{text:\"Density of walls\",minValue:0.1,maxValue:1,defaultValue:wallsDensity,handleChange:setWallsDensity}))),/*#__PURE__*/React.createElement(NavButton,{text:\"Visualize \"+algorithm+\"!\",isVisualized:isVisualized,className:\"visualize-button\",visualizingClassName:\"greyed-out\",visualizedClassName:\"greyed-out\",handleClick:handleVisualization}),/*#__PURE__*/React.createElement(NavItem,{text:\"Algorithms\",id:\"algorithms\",isVisualized:isVisualized,shouldGreyOut:false},/*#__PURE__*/React.createElement(DropDownMenu,{height:height},/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"main\",unmountOnExit:true,timeout:500,classNames:\"menu-primary\",handleEnter:setHeight,appear:true},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"unweighted\")},\"Algorithms for unweighted graphs\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"weighted\")},\"Algorithms for weighted graphs\")),/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"unweighted\",unmountOnExit:true,timeout:500,classNames:\"menu-unweighted\",handleEnter:setHeight},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"main\")},\"<<<\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Depth First Search\")},/*#__PURE__*/React.createElement(\"p\",null,\"Depth First Search\"),algorithm===\"Depth First Search\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Breadth First Search\")},/*#__PURE__*/React.createElement(\"p\",null,\"Breadth First Search\"),algorithm===\"Breadth First Search\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\")),/*#__PURE__*/React.createElement(WrapperCSSTransition,{in:algoActiveMenu===\"weighted\",unmountOnExit:true,timeout:500,classNames:\"menu-weighted\",handleEnter:setHeight},/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleMenuChange(\"main\")},\"<<<\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"Dijkstra's algorithm\")},/*#__PURE__*/React.createElement(\"p\",null,\"Dijkstra's Algorithm\"),algorithm===\"Dijkstra's algorithm\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"),/*#__PURE__*/React.createElement(DropDownItem,{handleClick:handleAlgorithmChange(\"A* algorithm\")},/*#__PURE__*/React.createElement(\"p\",null,\"A* Algorithm\"),algorithm===\"A* algorithm\"?/*#__PURE__*/React.createElement(\"p\",null,\"\\u2713\"):\"\"))))),/*#__PURE__*/React.createElement(Grid,{grid:grid,pairGrid:pairGrid,maze:maze}));};export default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","algorithms","generateMazeGraph","constructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","isVisualized","setIsVisualized","algoActiveMenu","setAlgoActiveMenu","undefined","height","setHeight","startNode","setStartNode","endNode","setEndNode","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","node","x","y","newNode","isVisited","m","isShortestPath","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","chooseAlgorithm","handleVisualization","generateMaze","newPairGrid","newMaze","reinitialize","newStartNode","newEndNode"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 60;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.6\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.6);\n  const [isVisualized, setIsVisualized] = useState(0);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined);\n  // const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNode, setEndNode] = useState(firstEndNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [number, number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNode\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitialize: () => void = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNode.x, endNode.y]\n      );\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        0.6\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setWallsDensity(0.6);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  // // handles the case when the mouse button is down\n  // const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n  //   toggleWall(x, y);\n  //   setMouseIsPressed(false);\n  // };\n\n  // // handles the case whan the mouse button is down and you enter a node\n  // const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n  //   if (mouseIsPressed) {\n  //     toggleWall(x, y);\n  //   }\n  // };\n\n  // // handles the case when you mouse up\n  // const handleMouseUp: () => void = () => {\n  //   setMouseIsPressed(false);\n  // };\n\n  // Render the app\n  return (\n    <div className=\"App\">\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitialize}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0.1}\n              maxValue={1}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n      {/* <SecondaryHeader>\n        <button\n          className=\"visualize-button\"\n          onClick={(e) => {\n            visualizeAlgorithm(\n              ...chooseAlgorithm(algorithm)(\n                grid,\n                pairGrid,\n                mazeGraph,\n                startNode,\n                endNode\n              )\n            );\n          }}\n        >\n          Visualize the path!\n        </button>\n      </SecondaryHeader> */}\n      <Grid grid={grid} pairGrid={pairGrid} maze={maze} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}