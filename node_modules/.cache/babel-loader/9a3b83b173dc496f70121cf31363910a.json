{"ast":null,"code":"import _slicedToArray from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{dijkstraHelper}from\"../singleTarget/dijkstra\";export var greedy=function greedy(grid,pairGrid,mazeGraph,startNode,targetList){var currentStartNode=startNode;var allVisitedAndPaths=[];var _loop=function _loop(){var _dijkstraHelper=dijkstraHelper(grid,pairGrid,mazeGraph,currentStartNode,targetList),_dijkstraHelper2=_slicedToArray(_dijkstraHelper,3),visited=_dijkstraHelper2[0],path=_dijkstraHelper2[1],endNode=_dijkstraHelper2[2];targetList=targetList.filter(function(targetNode){return targetNode!==endNode;});currentStartNode=endNode;allVisitedAndPaths.push([visited,path]);};while(targetList.length>0){_loop();}return allVisitedAndPaths;};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/multipleTarget/greedy.ts"],"names":["dijkstraHelper","greedy","grid","pairGrid","mazeGraph","startNode","targetList","currentStartNode","allVisitedAndPaths","visited","path","endNode","filter","targetNode","push","length"],"mappings":"8LACA,OAASA,cAAT,KAA+B,0BAA/B,CAEA,MAAO,IAAMC,CAAAA,MAMU,CAAG,QANbA,CAAAA,MAMa,CACxBC,IADwB,CAExBC,QAFwB,CAGxBC,SAHwB,CAIxBC,SAJwB,CAKxBC,UALwB,CAMrB,CACH,GAAIC,CAAAA,gBAAsB,CAAGF,SAA7B,CACA,GAAIG,CAAAA,kBAAsC,CAAG,EAA7C,CAFG,+CAI8BR,cAAc,CAC3CE,IAD2C,CAE3CC,QAF2C,CAG3CC,SAH2C,CAI3CG,gBAJ2C,CAK3CD,UAL2C,CAJ5C,oDAIIG,OAJJ,qBAIaC,IAJb,qBAImBC,OAJnB,qBAWDL,UAAU,CAAGA,UAAU,CAACM,MAAX,CAAkB,SAACC,UAAD,QAAgBA,CAAAA,UAAU,GAAKF,OAA/B,EAAlB,CAAb,CACAJ,gBAAgB,CAAGI,OAAnB,CACAH,kBAAkB,CAACM,IAAnB,CAAwB,CAACL,OAAD,CAAUC,IAAV,CAAxB,EAbC,EAGH,MAAOJ,UAAU,CAACS,MAAX,CAAoB,CAA3B,CAA8B,SAW7B,CACD,MAAOP,CAAAA,kBAAP,CACD,CA5BM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { dijkstraHelper } from \"../singleTarget/dijkstra\";\n\nexport const greedy: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]][] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  let currentStartNode: node = startNode;\n  let allVisitedAndPaths: [node[], node[]][] = [];\n  while (targetList.length > 0) {\n    let [visited, path, endNode] = dijkstraHelper(\n      grid,\n      pairGrid,\n      mazeGraph,\n      currentStartNode,\n      targetList\n    );\n    targetList = targetList.filter((targetNode) => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n  return allVisitedAndPaths;\n};\n"]},"metadata":{},"sourceType":"module"}