{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Tutorial/Tutorial.tsx\";\nimport React, { useState } from \"react\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport \"./Tutorial.css\";\nexport const Tutorial = props => {\n  const [activePage, setActivePage] = useState(\"first-page\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tutorial-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"first-page\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"first-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: false,\n    rightButton: true,\n    rightOnClick: () => setActivePage(\"second-page\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"Welcome to the \\\"Rat in a maze\\\" Pathfinding Visulazing tool!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"emoji-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"rat\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDC00\"), /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"cheese\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDC0\")), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"This is a tool I built to learn more about graph algorithm, and particularly Pathfinding Algorithms. There are some cool features in this tool.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"So without further ado, let's dive into how it works!\")))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"second-page\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"second-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"first-page\"),\n    rightOnClick: () => setActivePage(\"third-page\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"The Maze.\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"The maze is composed of squares. Each square is linked to the adjacent squares (left, right, top and bottom). The rat in the maze is hungry, and it wants to eat all the cheese there is! to do that it need to move in the maze. Each move costs 1 point of energy. The goal of the rat is to minimize the energy points it will use to eat all the cheese. But the maze is full of obstacles!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"The first obstacles are the walls, the rat cannot go through those thin black walls.\"), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"black-walls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"The second obstacles are the mud. The mud is different from the walls: the rat can go through the mud but it will cost more energy than moving through nothing. The energy it costs compared to a normal move is display on the mud. A normal move costs 1 energy point, a move through the mud costs 4 energy points (the value is changeable). This is what I call the \\\"mud weight\\\".\"), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"light-brown-mud\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"third-page\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"third-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"second-page\"),\n    rightOnClick: () => setActivePage(\"fifth-page\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"The Maze.\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"fourth-page\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"fourth-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"third-page\"),\n    rightOnClick: () => setActivePage(\"fifth-page\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Maze Generator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"You can choose different options regarding the maze in the dropdown menu labeled \\\"Maze Options\\\". You have to click on the \\\"Generate New Maze\\\" button if you want to reflect the changes on the maze.\"), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"dropdown-generate-maze\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"fifth-page\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"fourth-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"The Rat and the cheeses\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, \"You can either choose to help the rat eat 1 cheese or several cheeses. The algorithms used are different with several targets as the problem with several cheeses is more difficult. It is a variant of a well-know problem called the Travelling Salesman Problem (or TSP).\")));\n};\n\nconst Page = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, props.children, props.leftButton && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button button-prev\",\n    onClick: props.leftOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"<\", \" Previous\"), props.rightButton && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button button-next\",\n    onClick: props.rightOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, \"Next \", \">\"));\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Tutorial/Tutorial.tsx"],"names":["React","useState","WrapperCSSTransition","Tutorial","props","activePage","setActivePage","Page","children","leftButton","leftOnClick","rightButton","rightOnClick"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport \"./Tutorial.css\";\n\ninterface TutorialProps {}\n\nexport const Tutorial: React.FC<TutorialProps> = (props) => {\n  const [activePage, setActivePage] = useState(\"first-page\");\n  return (\n    <div className=\"tutorial-panel\">\n      <WrapperCSSTransition\n        in={activePage === \"first-page\"}\n        unmountOnExit\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"first-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton={false}\n          rightButton={true}\n          rightOnClick={() => setActivePage(\"second-page\")}\n        >\n          <h1 className=\"big-title\">\n            Welcome to the \"Rat in a maze\" Pathfinding Visulazing tool!\n          </h1>\n          <div className=\"emoji-container\">\n            <span role=\"img\" aria-label=\"rat\" className=\"tutorial-emoji\">\n              🐀\n            </span>\n            <span role=\"img\" aria-label=\"cheese\" className=\"tutorial-emoji\">\n              🧀\n            </span>\n          </div>\n          <span>\n            <h3 className=\"text\">\n              This is a tool I built to learn more about graph algorithm, and\n              particularly Pathfinding Algorithms. There are some cool features\n              in this tool.\n            </h3>\n            <h2>So without further ado, let's dive into how it works!</h2>\n          </span>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"second-page\"}\n        unmountOnExit\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"second-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"first-page\")}\n          rightOnClick={() => setActivePage(\"third-page\")}\n        >\n          <h1 className=\"big-title\">The Maze.</h1>\n\n          <h3 className=\"text\">\n            The maze is composed of squares. Each square is linked to the\n            adjacent squares (left, right, top and bottom). The rat in the maze\n            is hungry, and it wants to eat all the cheese there is! to do that\n            it need to move in the maze. Each move costs 1 point of energy. The\n            goal of the rat is to minimize the energy points it will use to eat\n            all the cheese. But the maze is full of obstacles!\n          </h3>\n          <h3>\n            The first obstacles are the walls, the rat cannot go through those\n            thin black walls.\n          </h3>\n          <img alt=\"black-walls\"></img>\n          <h3>\n            The second obstacles are the mud. The mud is different from the\n            walls: the rat can go through the mud but it will cost more energy\n            than moving through nothing. The energy it costs compared to a\n            normal move is display on the mud. A normal move costs 1 energy\n            point, a move through the mud costs 4 energy points (the value is\n            changeable). This is what I call the \"mud weight\".\n          </h3>\n          <img alt=\"light-brown-mud\"></img>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"third-page\"}\n        unmountOnExit\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"third-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"second-page\")}\n          rightOnClick={() => setActivePage(\"fifth-page\")}\n        >\n          <h1 className=\"big-title\">The Maze.</h1>\n          <h3 className=\"text\"></h3>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"fourth-page\"}\n        unmountOnExit\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"fourth-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"third-page\")}\n          rightOnClick={() => setActivePage(\"fifth-page\")}\n        ></Page>\n        <h1 className=\"big-title\">Maze Generator</h1>\n\n        <h3 className=\"text\">\n          You can choose different options regarding the maze in the dropdown\n          menu labeled \"Maze Options\". You have to click on the \"Generate New\n          Maze\" button if you want to reflect the changes on the maze.\n        </h3>\n        <img alt=\"dropdown-generate-maze\"></img>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"fifth-page\"}\n        unmountOnExit\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"fourth-page page\"}\n        handleEnter={() => {}}\n      >\n        <h1 className=\"big-title\">The Rat and the cheeses</h1>\n\n        <h3 className=\"text\">\n          You can either choose to help the rat eat 1 cheese or several cheeses.\n          The algorithms used are different with several targets as the problem\n          with several cheeses is more difficult. It is a variant of a well-know\n          problem called the Travelling Salesman Problem (or TSP).\n        </h3>\n      </WrapperCSSTransition>\n    </div>\n  );\n};\n\ninterface PageProps {\n  leftButton: boolean;\n  rightButton: boolean;\n  leftOnClick?: () => void;\n  rightOnClick?: () => void;\n}\n\nconst Page: React.FC<PageProps> = (props) => {\n  return (\n    <div className=\"page\">\n      {props.children}\n      {props.leftButton && (\n        <button className=\"button button-prev\" onClick={props.leftOnClick}>\n          {\"<\"} Previous\n        </button>\n      )}\n      {props.rightButton && (\n        <button className=\"button button-next\" onClick={props.rightOnClick}>\n          Next {\">\"}\n        </button>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}