{"ast":null,"code":"import _slicedToArray from\"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{dijkstraHelper}from\"../singleTarget/dijkstra\";export var greedy=function greedy(grid,pairGrid,mazeGraph,startNode,targetList){var currentStartNode=startNode,totalDistance=0;var allVisitedAndPaths=[];var _loop=function _loop(){var _dijkstraHelper=dijkstraHelper(grid,pairGrid,mazeGraph,currentStartNode,targetList.slice()),_dijkstraHelper2=_slicedToArray(_dijkstraHelper,4),visited=_dijkstraHelper2[0],path=_dijkstraHelper2[1],endNode=_dijkstraHelper2[2],distance=_dijkstraHelper2[3];totalDistance+=distance;targetList=targetList.filter(function(targetNode){return targetNode!==endNode;});currentStartNode=endNode;allVisitedAndPaths.push([visited,path]);};while(targetList.length>0){_loop();}return[allVisitedAndPaths,totalDistance];};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/multipleTarget/greedy.ts"],"names":["dijkstraHelper","greedy","grid","pairGrid","mazeGraph","startNode","targetList","currentStartNode","totalDistance","allVisitedAndPaths","slice","visited","path","endNode","distance","filter","targetNode","push","length"],"mappings":"8LACA,OAASA,cAAT,KAA+B,0BAA/B,CAEA,MAAO,IAAMC,CAAAA,MAMoB,CAAG,QANvBA,CAAAA,MAMuB,CAClCC,IADkC,CAElCC,QAFkC,CAGlCC,SAHkC,CAIlCC,SAJkC,CAKlCC,UALkC,CAM/B,CACH,GAAIC,CAAAA,gBAAsB,CAAGF,SAA7B,CACEG,aAAqB,CAAG,CAD1B,CAEA,GAAIC,CAAAA,kBAAsC,CAAG,EAA7C,CAHG,+CAKwCT,cAAc,CACrDE,IADqD,CAErDC,QAFqD,CAGrDC,SAHqD,CAIrDG,gBAJqD,CAKrDD,UAAU,CAACI,KAAX,EALqD,CALtD,oDAKIC,OALJ,qBAKaC,IALb,qBAKmBC,OALnB,qBAK4BC,QAL5B,qBAYDN,aAAa,EAAIM,QAAjB,CACAR,UAAU,CAAGA,UAAU,CAACS,MAAX,CAAkB,SAACC,UAAD,QAAgBA,CAAAA,UAAU,GAAKH,OAA/B,EAAlB,CAAb,CACAN,gBAAgB,CAAGM,OAAnB,CACAJ,kBAAkB,CAACQ,IAAnB,CAAwB,CAACN,OAAD,CAAUC,IAAV,CAAxB,EAfC,EAIH,MAAON,UAAU,CAACY,MAAX,CAAoB,CAA3B,CAA8B,SAY7B,CACD,MAAO,CAACT,kBAAD,CAAqBD,aAArB,CAAP,CACD,CA9BM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { dijkstraHelper } from \"../singleTarget/dijkstra\";\n\nexport const greedy: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [[node[], node[]][], number] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  let currentStartNode: node = startNode,\n    totalDistance: number = 0;\n  let allVisitedAndPaths: [node[], node[]][] = [];\n  while (targetList.length > 0) {\n    let [visited, path, endNode, distance] = dijkstraHelper(\n      grid,\n      pairGrid,\n      mazeGraph,\n      currentStartNode,\n      targetList.slice()\n    );\n    totalDistance += distance;\n    targetList = targetList.filter((targetNode) => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n  return [allVisitedAndPaths, totalDistance];\n};\n"]},"metadata":{},"sourceType":"module"}