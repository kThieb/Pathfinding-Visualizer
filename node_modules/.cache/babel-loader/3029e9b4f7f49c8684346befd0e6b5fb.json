{"ast":null,"code":"export var retrievePath=function retrievePath(predecessor,startNode,endNode){var shortestPath=[endNode];var current=endNode;while(current.x!==startNode.x||current.y!==startNode.y){current=predecessor[current.id];shortestPath.unshift(current);}return shortestPath;};export var retrieveTwoEndedPath=function retrieveTwoEndedPath(predecessor,successor,middleNode,startNode,endNode){var shortestPath=[middleNode];var current=middleNode;while(current.x!==startNode.x||current.y!==startNode.y){current=predecessor[current.id];shortestPath.unshift(current);}current=middleNode;while(current.x!==endNode.x||current.y!==endNode.y){current=successor[current.id];shortestPath.push(current);}return shortestPath;};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/retrievePath.ts"],"names":["retrievePath","predecessor","startNode","endNode","shortestPath","current","x","y","id","unshift","retrieveTwoEndedPath","successor","middleNode","push"],"mappings":"AAEA,MAAO,IAAMA,CAAAA,YAIF,CAAG,QAJDA,CAAAA,YAIC,CAACC,WAAD,CAAcC,SAAd,CAAyBC,OAAzB,CAAqC,CACjD,GAAIC,CAAAA,YAAY,CAAG,CAACD,OAAD,CAAnB,CACA,GAAIE,CAAAA,OAAa,CAAGF,OAApB,CACA,MAAOE,OAAO,CAACC,CAAR,GAAcJ,SAAS,CAACI,CAAxB,EAA6BD,OAAO,CAACE,CAAR,GAAcL,SAAS,CAACK,CAA5D,CAA+D,CAC7DF,OAAO,CAAGJ,WAAW,CAACI,OAAO,CAACG,EAAT,CAArB,CACAJ,YAAY,CAACK,OAAb,CAAqBJ,OAArB,EACD,CAED,MAAOD,CAAAA,YAAP,CACD,CAbM,CAeP,MAAO,IAAMM,CAAAA,oBAMF,CAAG,QANDA,CAAAA,oBAMC,CAACT,WAAD,CAAcU,SAAd,CAAyBC,UAAzB,CAAqCV,SAArC,CAAgDC,OAAhD,CAA4D,CACxE,GAAIC,CAAAA,YAAY,CAAG,CAACQ,UAAD,CAAnB,CACA,GAAIP,CAAAA,OAAa,CAAGO,UAApB,CACA,MAAOP,OAAO,CAACC,CAAR,GAAcJ,SAAS,CAACI,CAAxB,EAA6BD,OAAO,CAACE,CAAR,GAAcL,SAAS,CAACK,CAA5D,CAA+D,CAC7DF,OAAO,CAAGJ,WAAW,CAACI,OAAO,CAACG,EAAT,CAArB,CACAJ,YAAY,CAACK,OAAb,CAAqBJ,OAArB,EACD,CACDA,OAAO,CAAGO,UAAV,CACA,MAAOP,OAAO,CAACC,CAAR,GAAcH,OAAO,CAACG,CAAtB,EAA2BD,OAAO,CAACE,CAAR,GAAcJ,OAAO,CAACI,CAAxD,CAA2D,CACzDF,OAAO,CAAGM,SAAS,CAACN,OAAO,CAACG,EAAT,CAAnB,CACAJ,YAAY,CAACS,IAAb,CAAkBR,OAAlB,EACD,CACD,MAAOD,CAAAA,YAAP,CACD,CAnBM","sourcesContent":["import { node } from \"../usefulInterfaces\";\n\nexport const retrievePath: (\n  predecessor: node[],\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, startNode, endNode) => {\n  let shortestPath = [endNode];\n  let current: node = endNode;\n  while (current.x !== startNode.x || current.y !== startNode.y) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n\n  return shortestPath;\n};\n\nexport const retrieveTwoEndedPath: (\n  predecessor: node[],\n  successor: node[],\n  middleNode: node,\n  startNode: node,\n  endNode: node\n) => node[] = (predecessor, successor, middleNode, startNode, endNode) => {\n  let shortestPath = [middleNode];\n  let current: node = middleNode;\n  while (current.x !== startNode.x || current.y !== startNode.y) {\n    current = predecessor[current.id];\n    shortestPath.unshift(current);\n  }\n  current = middleNode;\n  while (current.x !== endNode.x || current.y !== endNode.y) {\n    current = successor[current.id];\n    shortestPath.push(current);\n  }\n  return shortestPath;\n};\n"]},"metadata":{},"sourceType":"module"}