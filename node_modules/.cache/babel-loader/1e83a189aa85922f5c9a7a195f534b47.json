{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavItem, DropDownMenu, DropDownItem, DropDownSlider, NavButton } from \"../NavBar/NavBar\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 60; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [6, 3], [6, 24]);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, 0.6, 0.3, 5); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.6);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [mudWeight, setMudWeight] = useState(5);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [startNode, setStartNode] = useState([firstStartNode.x, firstStartNode.y]);\n  const [endNode, setEndNode] = useState([firstEndNode.x, firstStartNode.y]); // States managing the dropdown menu\n\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined); // Mouse State\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeAlgorithm = (visited, path) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: false,\n          isShortestPath: true\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  }; // This function handles the click on the menu buttons\n\n\n  const handleMenuChange = menuName => {\n    return () => setAlgoActiveMenu(menuName);\n  }; // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n\n\n  const chooseAlgorithm = () => {\n    return algorithms[algorithm];\n  }; // This function handles the logic of the visualization of the algorithms\n\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path] = chooseAlgorithm()(grid, pairGrid, maze, grid[startNode[0]][startNode[1]], grid[endNode[0]][endNode[1]]);\n      const n = visited.length,\n            m = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, newGrid, wallsDensity, mudDensity, mudWeight);\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitializeGrid = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], [endNode.x, endNode.y]);\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setIsVisualized(0);\n    }\n  }; // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n  // handles the case when the mouse button is down\n\n\n  const handleMouseDown = current => {\n    if (current.x === startNode.x && current.y === startNode.y) return () => {\n      startNode.isStart = false;\n      setMouseIsPressed(true);\n    };\n    return () => {};\n  }; // handles the case whan the mouse button is down and you enter a node\n\n\n  const handleMouseEnter = current => {\n    if (mouseIsPressed) return () => {\n      current.isStart = true;\n      setStartNode(current);\n    };\n    return () => {};\n  }; // handles the case when you mouse up\n\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  }; // Render the app\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onMouseUp: handleMouseUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Reinitialize\",\n    isVisualized: isVisualized,\n    className: \"reinitialize\",\n    startClassName: \"greyed-out\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"highlight\",\n    handleClick: reinitializeGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls\",\n    step: 0.01,\n    minValue: 0,\n    maxValue: 1,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of mud\",\n    step: 0.01,\n    minValue: 0,\n    maxValue: 1,\n    defaultValue: mudDensity,\n    handleChange: setMudDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Mud weight\",\n    step: 1,\n    minValue: 1,\n    maxValue: 10,\n    defaultValue: mudWeight,\n    handleChange: setMudWeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Visualize \" + algorithm + \"!\",\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-primary\",\n    handleEnter: setHeight,\n    appear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"unweighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 15\n    }\n  }, \"Algorithms for unweighted graphs\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"weighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 15\n    }\n  }, \"Algorithms for weighted graphs\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Depth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, \"Depth First Search\"), algorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 55\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Breadth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), algorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-weighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Dijkstra's algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), algorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"A* algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), algorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 49\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    onMouseDown: handleMouseDown,\n    onMouseEnter: handleMouseEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","algorithms","generateMazeGraph","constructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","mudDensity","setMudDensity","mudWeight","setMudWeight","isVisualized","setIsVisualized","startNode","setStartNode","x","y","endNode","setEndNode","algoActiveMenu","setAlgoActiveMenu","height","setHeight","undefined","mouseIsPressed","setMouseIsPressed","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","node","newNode","isVisited","m","isShortestPath","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","chooseAlgorithm","handleVisualization","generateMaze","newPairGrid","newMaze","reinitializeGrid","newStartNode","newEndNode","handleMouseDown","current","isStart","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 60;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24]\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.6,\n  0.3,\n  5\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.6);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [mudWeight, setMudWeight] = useState(5);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [startNode, setStartNode] = useState([\n    firstStartNode.x,\n    firstStartNode.y,\n  ]);\n  const [endNode, setEndNode] = useState([firstEndNode.x, firstStartNode.y]);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined);\n\n  // Mouse State\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        grid[startNode[0]][startNode[1]],\n        grid[endNode[0]][endNode[1]]\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized === 2) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNode.x, endNode.y]\n      );\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNode(newEndNode);\n      setIsVisualized(0);\n    }\n  };\n\n  // The following block of functions handles the making of walls in the grid\n  // This feature is currently not used as it is not a good fit with the current direction of the app\n\n  // const toggleWall: (x: number, y: number) => void = (x, y) => {\n  //   const newGrid: node[][] = grid.slice();\n  //   let newNode;\n  //   if (!newGrid[x][y].isWall) {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node wall-node\",\n  //     };\n  //   } else {\n  //     newNode = {\n  //       ...newGrid[x][y],\n  //       isWall: !newGrid[x][y].isWall,\n  //       className: \"grid-node\",\n  //     };\n  //   }\n  //   newGrid[x][y] = newNode;\n  //   setGrid(newGrid);\n  // };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (current: node) => () => void = (current) => {\n    if (current.x === startNode.x && current.y === startNode.y)\n      return () => {\n        startNode.isStart = false;\n        setMouseIsPressed(true);\n      };\n    return () => {};\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (current: node) => () => void = (current) => {\n    if (mouseIsPressed)\n      return () => {\n        current.isStart = true;\n        setStartNode(current);\n      };\n    return () => {};\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={handleMouseUp}>\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitializeGrid}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              step={0.01}\n              minValue={0}\n              maxValue={1}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              step={0.01}\n              minValue={0}\n              maxValue={1}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud weight\"\n              step={1}\n              minValue={1}\n              maxValue={10}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        onMouseDown={handleMouseDown}\n        onMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}