{"ast":null,"code":"import { dijkstraHelper } from \"../singleTarget/dijkstra\";\nexport const greedy = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  let currentStartNode = startNode,\n      totalDistance = 0;\n  let allVisitedAndPaths = [];\n\n  while (targetList.length > 0) {\n    let [visited, path, endNode, distance] = dijkstraHelper(grid, pairGrid, mazeGraph, currentStartNode, targetList.slice());\n    totalDistance += distance;\n    targetList = targetList.filter(targetNode => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n\n  return [allVisitedAndPaths, totalDistance];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/multipleTarget/greedy.ts"],"names":["dijkstraHelper","greedy","grid","pairGrid","mazeGraph","startNode","targetList","currentStartNode","totalDistance","allVisitedAndPaths","length","visited","path","endNode","distance","slice","filter","targetNode","push"],"mappings":"AACA,SAASA,cAAT,QAA+B,0BAA/B;AAEA,OAAO,MAAMC,MAMoB,GAAG,CAClCC,IADkC,EAElCC,QAFkC,EAGlCC,SAHkC,EAIlCC,SAJkC,EAKlCC,UALkC,KAM/B;AACH,MAAIC,gBAAsB,GAAGF,SAA7B;AAAA,MACEG,aAAqB,GAAG,CAD1B;AAEA,MAAIC,kBAAsC,GAAG,EAA7C;;AACA,SAAOH,UAAU,CAACI,MAAX,GAAoB,CAA3B,EAA8B;AAC5B,QAAI,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,QAAzB,IAAqCd,cAAc,CACrDE,IADqD,EAErDC,QAFqD,EAGrDC,SAHqD,EAIrDG,gBAJqD,EAKrDD,UAAU,CAACS,KAAX,EALqD,CAAvD;AAOAP,IAAAA,aAAa,IAAIM,QAAjB;AACAR,IAAAA,UAAU,GAAGA,UAAU,CAACU,MAAX,CAAmBC,UAAD,IAAgBA,UAAU,KAAKJ,OAAjD,CAAb;AACAN,IAAAA,gBAAgB,GAAGM,OAAnB;AACAJ,IAAAA,kBAAkB,CAACS,IAAnB,CAAwB,CAACP,OAAD,EAAUC,IAAV,CAAxB;AACD;;AACD,SAAO,CAACH,kBAAD,EAAqBD,aAArB,CAAP;AACD,CA9BM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { dijkstraHelper } from \"../singleTarget/dijkstra\";\n\nexport const greedy: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [[node[], node[]][], number] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  let currentStartNode: node = startNode,\n    totalDistance: number = 0;\n  let allVisitedAndPaths: [node[], node[]][] = [];\n  while (targetList.length > 0) {\n    let [visited, path, endNode, distance] = dijkstraHelper(\n      grid,\n      pairGrid,\n      mazeGraph,\n      currentStartNode,\n      targetList.slice()\n    );\n    totalDistance += distance;\n    targetList = targetList.filter((targetNode) => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n  return [allVisitedAndPaths, totalDistance];\n};\n"]},"metadata":{},"sourceType":"module"}