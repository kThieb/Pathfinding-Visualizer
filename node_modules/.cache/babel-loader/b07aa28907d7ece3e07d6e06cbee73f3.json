{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavItem, DropDownMenu, DropDownItem, DropDownSlider, NavButton } from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 80; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [6, 3], [6, 24], false);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, 0.3, 0.3, 5); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(3);\n  const [multipleTargets, setMultipleTargets] = useState(false); // States of the start and end node\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNodeList, setEndNodeList] = useState([firstEndNode]); // States managing the dropdown menu\n\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined); // State of the mouse\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeAlgorithm = (visited, path) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = grid.slice();\n        let successor = i < m - 1 ? path[i + 1] : path[i];\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        const newNode = { ...node,\n          isVisited: false,\n          isShortestPath: true,\n          successorPosition: getSuccessorPosition(node, successor)\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  }; // This function returns the position of the successor of a node in the shortest path\n\n\n  const getSuccessorPosition = (node, successor) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  }; // This function handles the click on the menu buttons\n\n\n  const handleMenuChange = menuName => {\n    return () => setAlgoActiveMenu(menuName);\n  }; // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n\n\n  const chooseAlgorithm = () => {\n    return algorithms[algorithm];\n  }; // This function handles the logic of the visualization of the algorithms\n\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path] = chooseAlgorithm()(grid, pairGrid, maze, startNode, endNodeList[0]);\n      const n = visited.length,\n            m = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, newGrid, wallsDensity, mudDensity, mudWeight);\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitializeGrid = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], [endNodeList[0].x, endNodeList[0].y], multipleTargets);\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNodeList([newEndNode]);\n      setIsVisualized(0);\n    }\n  };\n\n  useEffect(() => {\n    reinitializeGrid();\n  }, [multipleTargets, reinitializeGrid]);\n\n  const toggleStartNode = (x, y) => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [x, y], [endNodeList[0].x, endNodeList[0].y], multipleTargets);\n    setStartNode(newStartNode);\n    setEndNodeList([newEndNode]);\n    setGrid(newGrid);\n  }; // handles the case when the mouse button is down\n\n\n  const handleMouseDown = (x, y) => {\n    if (grid[x][y] === startNode) {\n      setMouseIsPressed(true);\n    }\n  }; // handles the case whan the mouse button is down and you enter a node\n\n\n  const handleMouseEnter = (x, y) => {\n    if (mouseIsPressed) {\n      toggleStartNode(x, y);\n    }\n  }; // handles the case when you mouse up\n\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  }; // Render the app\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onMouseUp: () => handleMouseUp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Reinitialize\",\n    isVisualized: isVisualized,\n    className: \"reinitialize\",\n    startClassName: \"greyed-out\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"highlight\",\n    handleClick: reinitializeGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of mud\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: mudDensity,\n    handleChange: setMudDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Mud Weight\",\n    minValue: 1,\n    maxValue: 5,\n    step: 1,\n    defaultValue: mudWeight,\n    handleChange: setMudWeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Visualize \" + algorithm + \"!\",\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Enable Multiple Targets\",\n    isVisualized: isVisualized,\n    className: \"\",\n    visualizingClassName: \"\",\n    visualizedClassName: \"\",\n    handleClick: () => setMultipleTargets(!multipleTargets),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-primary\",\n    handleEnter: setHeight,\n    appear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"unweighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 15\n    }\n  }, \"Algorithms for unweighted graphs\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"weighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 15\n    }\n  }, \"Algorithms for weighted graphs\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Depth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 17\n    }\n  }, \"Random Depth First Search\"), algorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 55\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Breadth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), algorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-weighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Dijkstra's algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), algorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 57\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"A* algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), algorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 49\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    mouseState: mouseIsPressed,\n    handleMouseDown: handleMouseDown,\n    handleMouseEnter: handleMouseEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useEffect","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","node","algorithms","generateMazeGraph","constructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstEndNode","firstpairGrid","mazeGraph","Visualizer","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","algorithm","setAlgorithm","wallsDensity","setWallsDensity","mudDensity","setMudDensity","isVisualized","setIsVisualized","mudWeight","setMudWeight","multipleTargets","setMultipleTargets","startNode","setStartNode","endNodeList","setEndNodeList","algoActiveMenu","setAlgoActiveMenu","height","setHeight","undefined","mouseIsPressed","setMouseIsPressed","visualizeAlgorithm","visited","path","n","length","i","setTimeout","newGrid","slice","x","y","newNode","isVisited","m","successor","isShortestPath","successorPosition","getSuccessorPosition","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","chooseAlgorithm","handleVisualization","generateMaze","newPairGrid","newMaze","reinitializeGrid","newStartNode","newEndNode","toggleStartNode","handleMouseDown","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { algorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { constructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 80;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstEndNode] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24],\n  false\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  5\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(3);\n  const [multipleTargets, setMultipleTargets] = useState(false);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [endNodeList, setEndNodeList] = useState([firstEndNode]);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main\");\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeAlgorithm: (visited: node[], path: node[]) => void = (\n    visited,\n    path\n  ) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        const newNode: node = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = grid.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        const newNode: node = {\n          ...node,\n          isVisited: false,\n          isShortestPath: true,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        newGrid[x][y] = newNode;\n        setGrid(newGrid);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i);\n    }\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      setAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function changes the algorithm that will be run, at the moment only dijkstra is implemented\n  const chooseAlgorithm: () => (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    endNode: node\n  ) => [node[], node[]] = () => {\n    return algorithms[algorithm];\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      const [visited, path]: [node[], node[]] = chooseAlgorithm()(\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        endNodeList[0]\n      );\n      const n: number = visited.length,\n        m: number = path.length;\n      visualizeAlgorithm(visited, path);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const newGrid = grid.slice();\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        newGrid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setGrid(newGrid);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newEndNode] = constructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        [endNodeList[0].x, endNodeList[0].y],\n        multipleTargets\n      );\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setEndNodeList([newEndNode]);\n      setIsVisualized(0);\n    }\n  };\n\n  useEffect(() => {\n    reinitializeGrid();\n  }, [multipleTargets, reinitializeGrid]);\n\n  const toggleStartNode: (x: number, y: number) => void = (x, y) => {\n    const [newGrid, newStartNode, newEndNode] = constructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [x, y],\n      [endNodeList[0].x, endNodeList[0].y],\n      multipleTargets\n    );\n    setStartNode(newStartNode);\n    setEndNodeList([newEndNode]);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n    if (grid[x][y] === startNode) {\n      setMouseIsPressed(true);\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n    if (mouseIsPressed) {\n      toggleStartNode(x, y);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"greyed-out\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"highlight\"\n          handleClick={reinitializeGrid}\n        />\n        <NavButton\n          text=\"Generate Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1}\n              maxValue={5}\n              step={1}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={\"Visualize \" + algorithm + \"!\"}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleVisualization}\n        />\n        <NavButton\n          text=\"Enable Multiple Targets\"\n          isVisualized={isVisualized}\n          className=\"\"\n          visualizingClassName=\"\"\n          visualizedClassName=\"\"\n          handleClick={() => setMultipleTargets(!multipleTargets)}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {algorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {algorithm === \"Breadth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem handleClick={handleMenuChange(\"main\")}>\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {algorithm === \"Dijkstra's algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {algorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}