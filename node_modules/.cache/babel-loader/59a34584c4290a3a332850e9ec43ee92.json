{"ast":null,"code":"import React from\"react\";import\"./GridNode.css\";import{node}from\"../helper_functions/usefulInterfaces\";var getAddedClassName=function getAddedClassName(neighbors,node){var addedClassName=\"\";for(var i=0;i<neighbors.length;i++){var neighbor=neighbors[i];var neighborX=neighbor[0];var neighborY=neighbor[1];if(neighborX===node.x+1)addedClassName+=\" no-wall-bottom\";if(neighborX===node.x-1)addedClassName+=\" no-wall-top\";if(neighborY===node.y+1)addedClassName+=\" no-wall-right\";if(neighborY===node.y-1)addedClassName+=\" no-wall-left\";}if(node.hasCheese)addedClassName+=\" cheese\";if(node.isShortestPath)addedClassName+=\" shortest-path-node\";if(node.isVisited)addedClassName+=\" visited-node\";return addedClassName;};// This component represents a single Node in the grid rendered in the DOM\nexport var _GridNode=function _GridNode(_ref){var numberOfElementsPerRow=_ref.numberOfElementsPerRow,node=_ref.node,neighbors=_ref.neighbors;var addEmoji=function addEmoji(node){if(node.isStart){return/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"rat\",className:\"content\"},\"\\uD83D\\uDC00\");}if(node.isEnd){return/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"rat\",className:\"content\"},\"\\uD83E\\uDDC0\");}return/*#__PURE__*/React.createElement(\"span\",null);};return/*#__PURE__*/React.createElement(\"div\",{className:\"grid-node\"+getAddedClassName(neighbors,node)},addEmoji(node));};var areEqual=function areEqual(prevProps,nextProps){return prevProps.node.isVisited===nextProps.node.isVisited&&prevProps.node.isShortestPath===nextProps.node.isShortestPath&&getAddedClassName(prevProps.neighbors,prevProps.node)===getAddedClassName(nextProps.neighbors,nextProps.node);};export var GridNode=React.memo(_GridNode,areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","node","getAddedClassName","neighbors","addedClassName","i","length","neighbor","neighborX","neighborY","x","y","hasCheese","isShortestPath","isVisited","_GridNode","numberOfElementsPerRow","addEmoji","isStart","isEnd","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,gBAAP,CACA,OAASC,IAAT,KAAqB,sCAArB,CAQA,GAAMC,CAAAA,iBAGK,CAAG,QAHRA,CAAAA,iBAGQ,CAACC,SAAD,CAAYF,IAAZ,CAAqB,CACjC,GAAIG,CAAAA,cAAsB,CAAG,EAA7B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,SAAS,CAACG,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,GAAIE,CAAAA,QAA0B,CAAGJ,SAAS,CAACE,CAAD,CAA1C,CACA,GAAIG,CAAAA,SAAS,CAAGD,QAAQ,CAAC,CAAD,CAAxB,CACA,GAAIE,CAAAA,SAAS,CAAGF,QAAQ,CAAC,CAAD,CAAxB,CACA,GAAIC,SAAS,GAAKP,IAAI,CAACS,CAAL,CAAS,CAA3B,CAA8BN,cAAc,EAAI,iBAAlB,CAC9B,GAAII,SAAS,GAAKP,IAAI,CAACS,CAAL,CAAS,CAA3B,CAA8BN,cAAc,EAAI,cAAlB,CAC9B,GAAIK,SAAS,GAAKR,IAAI,CAACU,CAAL,CAAS,CAA3B,CAA8BP,cAAc,EAAI,gBAAlB,CAC9B,GAAIK,SAAS,GAAKR,IAAI,CAACU,CAAL,CAAS,CAA3B,CAA8BP,cAAc,EAAI,eAAlB,CAC/B,CACD,GAAIH,IAAI,CAACW,SAAT,CAAoBR,cAAc,EAAI,SAAlB,CACpB,GAAIH,IAAI,CAACY,cAAT,CAAyBT,cAAc,EAAI,qBAAlB,CACzB,GAAIH,IAAI,CAACa,SAAT,CAAoBV,cAAc,EAAI,eAAlB,CACpB,MAAOA,CAAAA,cAAP,CACD,CAlBD,CAoBA;AACA,MAAO,IAAMW,CAAAA,SAA0B,CAAG,QAA7BA,CAAAA,SAA6B,MAIpC,IAHJC,CAAAA,sBAGI,MAHJA,sBAGI,CAFJf,IAEI,MAFJA,IAEI,CADJE,SACI,MADJA,SACI,CACJ,GAAMc,CAAAA,QAA6B,CAAG,QAAhCA,CAAAA,QAAgC,CAAChB,IAAD,CAAU,CAC9C,GAAIA,IAAI,CAACiB,OAAT,CAAkB,CAChB,mBACE,4BAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,KAA5B,CAAkC,SAAS,CAAC,SAA5C,iBADF,CAKD,CACD,GAAIjB,IAAI,CAACkB,KAAT,CAAgB,CACd,mBACE,4BAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,KAA5B,CAAkC,SAAS,CAAC,SAA5C,iBADF,CAKD,CACD,mBAAO,gCAAP,CACD,CAhBD,CAkBA,mBACE,2BAAK,SAAS,CAAE,YAAcjB,iBAAiB,CAACC,SAAD,CAAYF,IAAZ,CAA/C,EACGgB,QAAQ,CAAChB,IAAD,CADX,CADF,CAKD,CA5BM,CA8BP,GAAMmB,CAAAA,QAAyD,CAAG,QAA5DA,CAAAA,QAA4D,CAChEC,SADgE,CAEhEC,SAFgE,CAG7D,CACH,MACED,CAAAA,SAAS,CAACpB,IAAV,CAAea,SAAf,GAA6BQ,SAAS,CAACrB,IAAV,CAAea,SAA5C,EACAO,SAAS,CAACpB,IAAV,CAAeY,cAAf,GAAkCS,SAAS,CAACrB,IAAV,CAAeY,cADjD,EAEAX,iBAAiB,CAACmB,SAAS,CAAClB,SAAX,CAAsBkB,SAAS,CAACpB,IAAhC,CAAjB,GACEC,iBAAiB,CAACoB,SAAS,CAACnB,SAAX,CAAsBmB,SAAS,CAACrB,IAAhC,CAJrB,CAMD,CAVD,CAYA,MAAO,IAAMsB,CAAAA,QAAQ,CAAGvB,KAAK,CAACwB,IAAN,CAAWT,SAAX,CAAsBK,QAAtB,CAAjB","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helper_functions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [number, number][];\n}\n\nconst getAddedClassName: (\n  neighbors: [number, number][],\n  node: node\n) => string = (neighbors, node) => {\n  let addedClassName: string = \"\";\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor: [number, number] = neighbors[i];\n    let neighborX = neighbor[0];\n    let neighborY = neighbor[1];\n    if (neighborX === node.x + 1) addedClassName += \" no-wall-bottom\";\n    if (neighborX === node.x - 1) addedClassName += \" no-wall-top\";\n    if (neighborY === node.y + 1) addedClassName += \" no-wall-right\";\n    if (neighborY === node.y - 1) addedClassName += \" no-wall-left\";\n  }\n  if (node.hasCheese) addedClassName += \" cheese\";\n  if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n  if (node.isVisited) addedClassName += \" visited-node\";\n  return addedClassName;\n};\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üêÄ\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üßÄ\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  return (\n    <div className={\"grid-node\" + getAddedClassName(neighbors, node)}>\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node)\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}