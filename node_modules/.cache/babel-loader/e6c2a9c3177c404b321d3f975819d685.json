{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar } from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { singleTargetAlgorithms, multipleTargetsAlgorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { addPiecesOfCheese, constructGrid, reconstructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport { Tutorial } from \"../Tutorial/Tutorial\";\nimport { NavButton } from \"../NavBar/NavButton\";\nimport { DropDownItem } from \"../NavBar/DropDownAlgo\";\nimport { DropDownMenu } from \"../NavBar/DropDownMenu\";\nimport { DropDownSlider } from \"../NavBar/DropDownSlider\";\nimport { DropDownToggleSwich } from \"../NavBar/DropDownToggleSwitch\";\nimport { NavItem } from \"../NavBar/NavItem\";\nimport { NavSlider } from \"../NavBar/NavSlider\";\nimport { InfoButton } from \"../Tutorial/InfoButton\";\nimport { EnergyCost } from \"../NavBar/EnergyCost\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 125;\nconst FIRST_START_NODE = [6, 3];\nconst FIRST_END_NODE = [6, 24];\nconst FIRST_WALLS_DENSITY = 0.4;\nconst FIRST_MUD_DENSITY = 0.4;\nconst FIRST_MUD_WEIGHT = 4; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, FIRST_START_NODE, FIRST_END_NODE, 0);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, FIRST_WALLS_DENSITY, FIRST_MUD_DENSITY, FIRST_MUD_WEIGHT); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  // State managing the tutorial of the project\n  const [showTutorial, setShowTutorial] = useState(true);\n  const gridRef = useRef(firstGrid); // States managing the grid\n\n  const [grid, setGrid] = useState(firstGrid);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [isVisualized, setIsVisualized] = useState(0); // States managing the maze\n\n  const [maze, setMaze] = useState(mazeGraph);\n  const [wallsDensity, setWallsDensity] = useState(FIRST_WALLS_DENSITY);\n  const [mudDensity, setMudDensity] = useState(FIRST_MUD_DENSITY);\n  const [mudWeight, setMudWeight] = useState(FIRST_MUD_WEIGHT);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n  const [shouldGenerateMaze, setShouldGenerateMaze] = useState(false);\n  const didMount = useRef(false);\n  const [showNumbers, setShowNumbers] = useState(true); // States of the start and end nodes\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [targetList, setTargetList] = useState(firstTargetList); // States managing the dropdown menu\n\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\"Nearest Neighbors Heuristic\");\n  const [showDistance, setShowDistance] = useState(false);\n  const [distance, setDistance] = useState(-1);\n  const [height, setHeight] = useState(undefined); // State of the mouse\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const draggedNode = useRef(startNode); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeSingleTargetAlgorithm = (visited, path, timeout) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isVisited: true\n        };\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        const successor = i < m - 1 ? path[i + 1] : path[i];\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor)\n        };\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  }; // This function returns the position of the successor of a node in the shortest path\n\n\n  const getSuccessorPosition = (node, successor) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  }; // This function is there to visualize multipleTargetsAlgorithms\n\n\n  const visualizeMultipleTargetsAlgorithm = allVisitedAndPathsArray => {\n    let n = allVisitedAndPathsArray.length;\n    let currentTimeout = 0;\n\n    for (let i = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(visited, path, currentTimeout);\n      currentTimeout += visited.length > 0 ? 1250 : 0;\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n\n        for (let x = 0; x < newGrid.length; x++) {\n          for (let y = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = { ...gridRef.current[x][y],\n              isVisited: false\n            };\n          }\n        }\n\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n\n    return currentTimeout - 1000;\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return () => {\n      numberOfTargets > 1 ? setMultipleTargetsAlgorithm(algorithmName) : setSingleTargetAlgorithm(algorithmName);\n    };\n  }; // This function handles the click on the menu buttons\n\n\n  const handleMenuChange = menuName => {\n    return () => setAlgoActiveMenu(menuName);\n  }; // This function handles the logic of the visualization of the algorithms\n\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n\n      if (numberOfTargets === 1) {\n        const [[visited, path], newDistance] = singleTargetAlgorithms[singleTargetAlgorithm](grid, pairGrid, maze, startNode, targetList.map(targetNode => grid[targetNode.x][targetNode.y]));\n        const n = visited.length,\n              m = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n          setDistance(newDistance);\n          setShowDistance(true);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 500);\n        return;\n      }\n\n      const [allVisitedAndPaths, newDistance] = multipleTargetsAlgorithms[multipleTargetsAlgorithm](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout = visualizeMultipleTargetsAlgorithm(allVisitedAndPaths);\n      setTimeout(() => {\n        setIsVisualized(2);\n        setDistance(newDistance);\n        setShowDistance(true);\n      }, timeout);\n    }\n\n    if (isVisualized === 2) {\n      reinitializeGrid();\n      setShowDistance(false);\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, grid, wallsDensity, mudDensity, mudWeight);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setShouldGenerateMaze(false);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitializeGrid = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], targetList);\n\n      for (let i = 0; i < newGrid.length; i++) {\n        for (let j = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n\n      gridRef.current = newGrid;\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // toggles on and off the multiple targets\n\n\n  const toggleMultipleTargetGrid = () => {\n    if (isVisualized !== 1) {\n      let newGrid, newStartNode, newTargetList;\n\n      if (numberOfTargets > 1) {\n        [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, startNode, targetList, numberOfTargets - targetList.length);\n\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[0].length; j++) {\n            gridRef.current[i][j] = newGrid[i][j];\n          }\n        }\n      } else {\n        [newGrid, newStartNode, newTargetList] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], FIRST_END_NODE, 0);\n      }\n\n      gridRef.current = newGrid;\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // If the value of multipleTargets change, call the reinitialize function\n\n\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]); // handle the change of the number of targets\n\n  const handleChangeNumberOfTargets = val => {\n    setNumberOfTargets(parseInt(val));\n  }; // handle the click on the multiple targets button\n\n\n  const handleMultipleTargets = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\");\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  const handleMudChange = input => {\n    setMudWeight(parseFloat(input));\n  }; // Toggle the cheese or rat on the node\n\n\n  const toggleNode = currentNode => {\n    let oldStartNode = startNode,\n        oldTargetList = targetList.slice();\n\n    if (draggedNode.current === startNode) {\n      oldStartNode = currentNode;\n    } else {\n      const isTargetNode = targetList.find(targetNode => targetNode === currentNode) ? true : false;\n\n      if (!isTargetNode) {\n        oldTargetList = oldTargetList.filter(targetNode => targetNode !== draggedNode.current);\n        oldTargetList.push(currentNode);\n      }\n    }\n\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [oldStartNode.x, oldStartNode.y], oldTargetList);\n\n    for (let x = 0; x < newGrid.length; x++) {\n      for (let y = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n\n    draggedNode.current = newGrid[currentNode.x][currentNode.y];\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    gridRef.current = newGrid;\n    setGrid(newGrid);\n  }; // handles the case when the mouse button is down\n\n\n  const handleMouseDown = currentNode => {\n    const isTargetNode = targetList.find(targetNode => targetNode === currentNode) ? true : false;\n\n    if (isVisualized === 0 && (currentNode === startNode || isTargetNode)) {\n      setMouseIsPressed(true);\n      draggedNode.current = currentNode;\n    }\n  }; // handles the case whan the mouse button is down and you enter a node\n\n\n  const handleMouseEnter = currentNode => {\n    if (mouseIsPressed) {\n      toggleNode(currentNode);\n    }\n  }; // handles the case when you mouse up\n\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  }; // function that returns the text in the visualization button\n\n\n  const getVisualizeText = () => {\n    if (isVisualized <= 0) return \"Visualize \" + (numberOfTargets > 1 ? multipleTargetsAlgorithm : singleTargetAlgorithm) + \"!\";\n    return \"Reinitialize Visualization\";\n  }; // updates the maze in real time\n\n\n  useEffect(() => {\n    if (didMount.current) setShouldGenerateMaze(true);else didMount.current = true;\n  }, [wallsDensity, mudDensity, mudWeight]); // Render the app\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onMouseUp: () => handleMouseUp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate New Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze \" + (shouldGenerateMaze ? \"should-generate\" : \"\"),\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    left: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls:\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of mud:\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: mudDensity,\n    handleChange: setMudDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Mud Weight:\",\n    minValue: 1.1,\n    maxValue: 10,\n    step: 0.1,\n    defaultValue: mudWeight,\n    handleChange: handleMudChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownToggleSwich, {\n    text: \"Show Mud Weights ?\",\n    shouldShowWeights: showNumbers,\n    handleChange: () => setShowNumbers(!showNumbers),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavSlider, {\n    className: numberOfTargets > 1 ? \"show-nav-slider\" : \"hide-nav-slider\",\n    text: \"Number of Targets:\",\n    minValue: 2,\n    maxValue: 10,\n    step: 1,\n    defaultValue: numberOfTargets,\n    handleChange: handleChangeNumberOfTargets,\n    isVisualized: isVisualized,\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\",\n    isVisualized: isVisualized,\n    className: numberOfTargets > 1 ? \"disable-multiple-targets\" : \"enable-multiple-targets\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleMultipleTargets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(EnergyCost, {\n    distance: distance,\n    showDistance: showDistance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: getVisualizeText(),\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out highlight\",\n    visualizedClassName: \"highlight\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-single-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-primary\",\n    divClassName: \"menu\",\n    handleEnter: setHeight,\n    appear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"unweighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 17\n    }\n  }, \"Algorithms for unweighted graphs\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 17\n    }\n  }, \">\")), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"weighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 17\n    }\n  }, \"Algorithms for weighted graphs\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 17\n    }\n  }, \">\"))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    divClassName: \"menu\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 17\n    }\n  }, \"<\")), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Depth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 17\n    }\n  }, \"Random Depth First Search\"), singleTargetAlgorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Breadth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), singleTargetAlgorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Meet in the Middle BFS\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 17\n    }\n  }, \"Meet in the Middle BFS\"), singleTargetAlgorithm === \"Meet in the Middle BFS\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-weighted\",\n    divClassName: \"menu\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 17\n    }\n  }, \"<\")), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Dijkstra's algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), singleTargetAlgorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"A* algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), singleTargetAlgorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-multiple-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    divClassName: \"menu\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Brute Force Algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 17\n    }\n  }, \"Brute Force Algorithm\"), multipleTargetsAlgorithm === \"Brute Force Algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Nearest Neighbors Heuristic\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 17\n    }\n  }, \"Nearest Neighbors Heuristic\"), multipleTargetsAlgorithm === \"Nearest Neighbors Heuristic\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"tickmark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Tutorial, {\n    handleDismiss: () => setShowTutorial(false),\n    showTutorial: showTutorial,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    mouseState: mouseIsPressed,\n    handleMouseDown: handleMouseDown,\n    handleMouseEnter: handleMouseEnter,\n    showNumbers: showNumbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoButton, {\n    showTutorial: showTutorial,\n    handleClick: () => setShowTutorial(!showTutorial),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/kThieb/pathfinding-visualizer\",\n    className: \"link-to-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"octocat\",\n    src: require(\"../icon/Octocat.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"github-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 13\n    }\n  }, \"Link to Source Code\")))));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useEffect","useRef","useState","Grid","NavBar","node","singleTargetAlgorithms","multipleTargetsAlgorithms","generateMazeGraph","addPiecesOfCheese","constructGrid","reconstructGrid","WrapperCSSTransition","Tutorial","NavButton","DropDownItem","DropDownMenu","DropDownSlider","DropDownToggleSwich","NavItem","NavSlider","InfoButton","EnergyCost","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","FIRST_START_NODE","FIRST_END_NODE","FIRST_WALLS_DENSITY","FIRST_MUD_DENSITY","FIRST_MUD_WEIGHT","firstGrid","firstStartNode","firstTargetList","firstpairGrid","mazeGraph","Visualizer","showTutorial","setShowTutorial","gridRef","grid","setGrid","pairGrid","setPairGrid","isVisualized","setIsVisualized","maze","setMaze","wallsDensity","setWallsDensity","mudDensity","setMudDensity","mudWeight","setMudWeight","numberOfTargets","setNumberOfTargets","shouldGenerateMaze","setShouldGenerateMaze","didMount","showNumbers","setShowNumbers","startNode","setStartNode","targetList","setTargetList","algoActiveMenu","setAlgoActiveMenu","singleTargetAlgorithm","setSingleTargetAlgorithm","multipleTargetsAlgorithm","setMultipleTargetsAlgorithm","showDistance","setShowDistance","distance","setDistance","height","setHeight","undefined","mouseIsPressed","setMouseIsPressed","draggedNode","visualizeSingleTargetAlgorithm","visited","path","timeout","n","length","i","setTimeout","newGrid","current","slice","x","y","isVisited","m","successor","isShortestPath","successorPosition","getSuccessorPosition","visualizeMultipleTargetsAlgorithm","allVisitedAndPathsArray","currentTimeout","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","handleVisualization","newDistance","map","targetNode","allVisitedAndPaths","reinitializeGrid","generateMaze","newPairGrid","newMaze","newStartNode","newTargetList","j","toggleMultipleTargetGrid","handleChangeNumberOfTargets","val","parseInt","handleMultipleTargets","handleMudChange","input","parseFloat","toggleNode","currentNode","oldStartNode","oldTargetList","isTargetNode","find","filter","push","handleMouseDown","handleMouseEnter","handleMouseUp","getVisualizeText","require"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar } from \"../NavBar/NavBar\";\n\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport {\n  singleTargetAlgorithms,\n  multipleTargetsAlgorithms,\n} from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport {\n  addPiecesOfCheese,\n  constructGrid,\n  reconstructGrid,\n} from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport { Tutorial } from \"../Tutorial/Tutorial\";\nimport { NavButton } from \"../NavBar/NavButton\";\nimport { DropDownItem } from \"../NavBar/DropDownAlgo\";\nimport { DropDownMenu } from \"../NavBar/DropDownMenu\";\nimport { DropDownSlider } from \"../NavBar/DropDownSlider\";\nimport { DropDownToggleSwich } from \"../NavBar/DropDownToggleSwitch\";\nimport { NavItem } from \"../NavBar/NavItem\";\nimport { NavSlider } from \"../NavBar/NavSlider\";\nimport { InfoButton } from \"../Tutorial/InfoButton\";\nimport { EnergyCost } from \"../NavBar/EnergyCost\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 125;\nconst FIRST_START_NODE: [number, number] = [6, 3];\nconst FIRST_END_NODE: [number, number] = [6, 24];\nconst FIRST_WALLS_DENSITY: number = 0.4;\nconst FIRST_MUD_DENSITY: number = 0.4;\nconst FIRST_MUD_WEIGHT: number = 4;\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  FIRST_START_NODE,\n  FIRST_END_NODE,\n  0\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  FIRST_WALLS_DENSITY,\n  FIRST_MUD_DENSITY,\n  FIRST_MUD_WEIGHT\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  // State managing the tutorial of the project\n  const [showTutorial, setShowTutorial] = useState(true);\n\n  const gridRef = useRef(firstGrid);\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [isVisualized, setIsVisualized] = useState(0);\n\n  // States managing the maze\n  const [maze, setMaze] = useState(mazeGraph);\n  const [wallsDensity, setWallsDensity] = useState(FIRST_WALLS_DENSITY);\n  const [mudDensity, setMudDensity] = useState(FIRST_MUD_DENSITY);\n  const [mudWeight, setMudWeight] = useState(FIRST_MUD_WEIGHT);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n  const [shouldGenerateMaze, setShouldGenerateMaze] = useState(false);\n  const didMount = useRef(false);\n  const [showNumbers, setShowNumbers] = useState(true);\n\n  // States of the start and end nodes\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [targetList, setTargetList] = useState(firstTargetList);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\n    \"Dijkstra's algorithm\"\n  );\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\n    \"Nearest Neighbors Heuristic\"\n  );\n  const [showDistance, setShowDistance] = useState(false);\n  const [distance, setDistance] = useState(-1);\n\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const draggedNode = useRef(startNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeSingleTargetAlgorithm: (\n    visited: node[],\n    path: node[],\n    timeout: number\n  ) => number = (visited, path, timeout) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isVisited: true,\n        };\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        const successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is there to visualize multipleTargetsAlgorithms\n  const visualizeMultipleTargetsAlgorithm: (\n    allVisitedAndPathsArray: [node[], node[]][]\n  ) => number = (allVisitedAndPathsArray) => {\n    let n: number = allVisitedAndPathsArray.length;\n    let currentTimeout: number = 0;\n    for (let i: number = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(\n        visited,\n        path,\n        currentTimeout\n      );\n\n      currentTimeout += visited.length > 0 ? 1250 : 0;\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        for (let x: number = 0; x < newGrid.length; x++) {\n          for (let y: number = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = {\n              ...gridRef.current[x][y],\n              isVisited: false,\n            };\n          }\n        }\n        gridRef.current = newGrid;\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n    return currentTimeout - 1000;\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      numberOfTargets > 1\n        ? setMultipleTargetsAlgorithm(algorithmName)\n        : setSingleTargetAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      if (numberOfTargets === 1) {\n        const [[visited, path], newDistance]: [\n          [node[], node[]],\n          number\n        ] = singleTargetAlgorithms[singleTargetAlgorithm](\n          grid,\n          pairGrid,\n          maze,\n          startNode,\n          targetList.map((targetNode) => grid[targetNode.x][targetNode.y])\n        );\n        const n: number = visited.length,\n          m: number = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n          setDistance(newDistance);\n          setShowDistance(true);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 500);\n        return;\n      }\n      const [allVisitedAndPaths, newDistance]: [\n        [node[], node[]][],\n        number\n      ] = multipleTargetsAlgorithms[multipleTargetsAlgorithm](\n        grid,\n        pairGrid,\n        maze,\n        startNode,\n        targetList.slice()\n      );\n      const timeout: number = visualizeMultipleTargetsAlgorithm(\n        allVisitedAndPaths\n      );\n      setTimeout(() => {\n        setIsVisualized(2);\n        setDistance(newDistance);\n        setShowDistance(true);\n      }, timeout);\n    }\n    if (isVisualized === 2) {\n      reinitializeGrid();\n      setShowDistance(false);\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        grid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setShouldGenerateMaze(false);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        targetList\n      );\n      for (let i: number = 0; i < newGrid.length; i++) {\n        for (let j: number = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n      gridRef.current = newGrid;\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // toggles on and off the multiple targets\n  const toggleMultipleTargetGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      let newGrid, newStartNode, newTargetList;\n      if (numberOfTargets > 1) {\n        [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          startNode,\n          targetList,\n          numberOfTargets - targetList.length\n        );\n        for (let i: number = 0; i < newGrid.length; i++) {\n          for (let j: number = 0; j < newGrid[0].length; j++) {\n            gridRef.current[i][j] = newGrid[i][j];\n          }\n        }\n      } else {\n        [newGrid, newStartNode, newTargetList] = constructGrid(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          [startNode.x, startNode.y],\n          FIRST_END_NODE,\n          0\n        );\n      }\n      gridRef.current = newGrid;\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // If the value of multipleTargets change, call the reinitialize function\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]);\n\n  // handle the change of the number of targets\n  const handleChangeNumberOfTargets: (val: any) => void = (val) => {\n    setNumberOfTargets(parseInt(val));\n  };\n\n  // handle the click on the multiple targets button\n  const handleMultipleTargets: () => void = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(\n        numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\"\n      );\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  const handleMudChange: (input: any) => void = (input) => {\n    setMudWeight(parseFloat(input));\n  };\n\n  // Toggle the cheese or rat on the node\n  const toggleNode: (currentNode: node) => void = (currentNode) => {\n    let oldStartNode: node = startNode,\n      oldTargetList: node[] = targetList.slice();\n    if (draggedNode.current === startNode) {\n      oldStartNode = currentNode;\n    } else {\n      const isTargetNode: boolean = targetList.find(\n        (targetNode) => targetNode === currentNode\n      )\n        ? true\n        : false;\n      if (!isTargetNode) {\n        oldTargetList = oldTargetList.filter(\n          (targetNode) => targetNode !== draggedNode.current\n        );\n        oldTargetList.push(currentNode);\n      }\n    }\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [oldStartNode.x, oldStartNode.y],\n      oldTargetList\n    );\n    for (let x: number = 0; x < newGrid.length; x++) {\n      for (let y: number = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n    draggedNode.current = newGrid[currentNode.x][currentNode.y];\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    gridRef.current = newGrid;\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (currentNode: node) => void = (currentNode) => {\n    const isTargetNode: boolean = targetList.find(\n      (targetNode) => targetNode === currentNode\n    )\n      ? true\n      : false;\n    if (isVisualized === 0 && (currentNode === startNode || isTargetNode)) {\n      setMouseIsPressed(true);\n      draggedNode.current = currentNode;\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (currentNode: node) => void = (currentNode) => {\n    if (mouseIsPressed) {\n      toggleNode(currentNode);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  // function that returns the text in the visualization button\n  const getVisualizeText: () => string = () => {\n    if (isVisualized <= 0)\n      return (\n        \"Visualize \" +\n        (numberOfTargets > 1\n          ? multipleTargetsAlgorithm\n          : singleTargetAlgorithm) +\n        \"!\"\n      );\n    return \"Reinitialize Visualization\";\n  };\n\n  // updates the maze in real time\n  useEffect(() => {\n    if (didMount.current) setShouldGenerateMaze(true);\n    else didMount.current = true;\n  }, [wallsDensity, mudDensity, mudWeight]);\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Generate New Maze\"\n          isVisualized={isVisualized}\n          className={\n            \"generate-maze \" + (shouldGenerateMaze ? \"should-generate\" : \"\")\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu left={true}>\n            <DropDownSlider\n              text=\"Density of walls:\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud:\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight:\"\n              minValue={1.1}\n              maxValue={10}\n              step={0.1}\n              defaultValue={mudWeight}\n              handleChange={handleMudChange}\n            ></DropDownSlider>\n            <DropDownToggleSwich\n              text=\"Show Mud Weights ?\"\n              shouldShowWeights={showNumbers}\n              handleChange={() => setShowNumbers(!showNumbers)}\n            />\n          </DropDownMenu>\n        </NavItem>\n        <NavSlider\n          className={\n            numberOfTargets > 1 ? \"show-nav-slider\" : \"hide-nav-slider\"\n          }\n          text=\"Number of Targets:\"\n          minValue={2}\n          maxValue={10}\n          step={1}\n          defaultValue={numberOfTargets}\n          handleChange={handleChangeNumberOfTargets}\n          isVisualized={isVisualized}\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n        />\n\n        <NavButton\n          text={\n            (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\"\n          }\n          isVisualized={isVisualized}\n          className={\n            numberOfTargets > 1\n              ? \"disable-multiple-targets\"\n              : \"enable-multiple-targets\"\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleMultipleTargets}\n        />\n        <EnergyCost distance={distance} showDistance={showDistance} />\n        <NavButton\n          text={getVisualizeText()}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out highlight\"\n          visualizedClassName=\"highlight\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-single-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              divClassName=\"menu\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                <p>Algorithms for unweighted graphs</p>\n                <p className=\"arrow-right\">{\">\"}</p>\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                <p>Algorithms for weighted graphs</p>\n                <p className=\"arrow-right\">{\">\"}</p>\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              divClassName=\"menu\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                <p className=\"arrow-left\">{\"<\"}</p>\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {singleTargetAlgorithm === \"Depth First Search\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {singleTargetAlgorithm === \"Breadth First Search\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Meet in the Middle BFS\")}\n              >\n                <p>Meet in the Middle BFS</p>\n                {singleTargetAlgorithm === \"Meet in the Middle BFS\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              divClassName=\"menu\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                <p className=\"arrow-left\">{\"<\"}</p>\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {singleTargetAlgorithm === \"Dijkstra's algorithm\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {singleTargetAlgorithm === \"A* algorithm\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-multiple-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              divClassName=\"menu\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Brute Force Algorithm\")}\n              >\n                <p>Brute Force Algorithm</p>\n                {multipleTargetsAlgorithm === \"Brute Force Algorithm\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\n                  \"Nearest Neighbors Heuristic\"\n                )}\n              >\n                <p>Nearest Neighbors Heuristic</p>\n                {multipleTargetsAlgorithm === \"Nearest Neighbors Heuristic\" ? (\n                  <p className=\"tickmark\">✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n      <Tutorial\n        handleDismiss={() => setShowTutorial(false)}\n        showTutorial={showTutorial}\n      />\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n        showNumbers={showNumbers}\n      >\n        <InfoButton\n          showTutorial={showTutorial}\n          handleClick={() => setShowTutorial(!showTutorial)}\n        />\n        <div className=\"github\">\n          <a\n            href=\"https://github.com/kThieb/pathfinding-visualizer\"\n            className=\"link-to-github\"\n          >\n            <img alt=\"octocat\" src={require(\"../icon/Octocat.png\")}></img>\n            <p className=\"github-tooltip\">Link to Source Code</p>\n          </a>\n        </div>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}