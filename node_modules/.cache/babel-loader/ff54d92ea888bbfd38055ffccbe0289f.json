{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavItem, DropDownMenu, DropDownItem, DropDownSlider, NavButton } from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { singleTargetAlgorithms, multipleTargetsAlgorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { addPiecesOfCheese, constructGrid, reconstructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 125; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [6, 3], [6, 24], 0);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, 0.3, 0.3, 2); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  const gridRef = useRef(firstGrid); // States managing the grid\n\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(1.5); // const [multipleTargets, setMultipleTargets] = useState(false);\n\n  const [numberOfTargets, setNumberOfTargets] = useState(1); // States of the start and end node\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [targetList, setTargetList] = useState(firstTargetList); // States managing the dropdown menu\n\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\"Nearest Neighbors (Greedy)\");\n  const [height, setHeight] = useState(undefined); // State of the mouse\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeSingleTargetAlgorithm = (visited, path, timeout) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isVisited: true\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        let successor = i < m - 1 ? path[i + 1] : path[i];\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor)\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  }; // This function returns the position of the successor of a node in the shortest path\n\n\n  const getSuccessorPosition = (node, successor) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  }; // This function is there to visualize multipleTargetsAlgorithms\n\n\n  const visualizeMultipleTargetsAlgorithm = allVisitedAndPathsArray => {\n    let n = allVisitedAndPathsArray.length;\n    let currentTimeout = 0;\n\n    for (let i = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(visited, path, currentTimeout);\n      currentTimeout += 1250;\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n\n        for (let x = 0; x < newGrid.length; x++) {\n          for (let y = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = { ...gridRef.current[x][y],\n              isVisited: false\n            };\n          }\n        }\n\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n\n    return currentTimeout;\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return () => {\n      numberOfTargets > 1 ? setMultipleTargetsAlgorithm(algorithmName) : setSingleTargetAlgorithm(algorithmName);\n    };\n  }; // This function handles the click on the menu buttons\n\n\n  const handleMenuChange = menuName => {\n    return () => setAlgoActiveMenu(menuName);\n  }; // This function handles the logic of the visualization of the algorithms\n\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n\n      if (numberOfTargets === 1) {\n        const [visited, path] = singleTargetAlgorithms[singleTargetAlgorithm](grid, pairGrid, maze, startNode, targetList);\n        const n = visited.length,\n              m = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 1250);\n        return;\n      }\n\n      const allVisitedAndPaths = multipleTargetsAlgorithms[multipleTargetsAlgorithm](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout = visualizeMultipleTargetsAlgorithm(allVisitedAndPaths);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, timeout);\n    }\n\n    if (isVisualized === 2) {\n      reinitializeGrid();\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, grid, wallsDensity, mudDensity, mudWeight);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitializeGrid = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], targetList);\n\n      for (let i = 0; i < newGrid.length; i++) {\n        for (let j = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // toggles on and off the multiple targets\n\n\n  const toggleMultipleTargetGrid = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, startNode, targetList, numberOfTargets - targetList.length);\n\n      for (let i = 0; i < newGrid.length; i++) {\n        for (let j = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // If the value of multipleTargets change, call the reinitialize function\n\n\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]);\n\n  const handleChangeNumberOfTargets = val => {\n    setNumberOfTargets(Math.floor(val));\n  };\n\n  const handleMultipleTargets = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\");\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  const toggleStartNode = (x, y) => {\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [x, y], targetList);\n\n    for (let x = 0; x < newGrid.length; x++) {\n      for (let y = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  }; // handles the case when the mouse button is down\n\n\n  const handleMouseDown = (x, y) => {\n    if (grid[x][y] === startNode) {\n      setMouseIsPressed(true);\n    }\n  }; // handles the case whan the mouse button is down and you enter a node\n\n\n  const handleMouseEnter = (x, y) => {\n    if (mouseIsPressed) {\n      toggleStartNode(x, y);\n    }\n  }; // handles the case when you mouse up\n\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n\n  const getVisualizeText = () => {\n    if (isVisualized <= 0) return \"Visualize \" + (numberOfTargets > 1 ? multipleTargetsAlgorithm : singleTargetAlgorithm) + \"!\";\n    return \"Reinitialize Visualization\";\n  }; // Render the app\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onMouseUp: () => handleMouseUp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate New Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of mud\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: mudDensity,\n    handleChange: setMudDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Mud Weight\",\n    minValue: 1.1,\n    maxValue: 3,\n    step: 0.01,\n    defaultValue: mudWeight,\n    handleChange: setMudWeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }\n  }), numberOfTargets > 1 && /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Number of Targets\",\n    minValue: 2,\n    maxValue: 10,\n    step: 1,\n    defaultValue: numberOfTargets,\n    handleChange: handleChangeNumberOfTargets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(NavButton, {\n    text: getVisualizeText(),\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out highlight\",\n    visualizedClassName: \"highlight\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\",\n    isVisualized: isVisualized,\n    className: \"enable-multiple-targets\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleMultipleTargets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-single-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-primary\",\n    handleEnter: setHeight,\n    appear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"unweighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 15\n    }\n  }, \"Algorithms for unweighted graphs\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"weighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 15\n    }\n  }, \"Algorithms for weighted graphs\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Depth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 17\n    }\n  }, \"Random Depth First Search\"), singleTargetAlgorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 67\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Breadth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), singleTargetAlgorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-weighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Dijkstra's algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), singleTargetAlgorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"A* algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), singleTargetAlgorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 61\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-multiple-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Nearest Neighbors (Greedy)\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 17\n    }\n  }, \"Nearest Neighbors (Greedy)\"), multipleTargetsAlgorithm === \"Nearest Neighbors (Greedy)\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    mouseState: mouseIsPressed,\n    handleMouseDown: handleMouseDown,\n    handleMouseEnter: handleMouseEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useEffect","useRef","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","node","singleTargetAlgorithms","multipleTargetsAlgorithms","generateMazeGraph","addPiecesOfCheese","constructGrid","reconstructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstTargetList","firstpairGrid","mazeGraph","Visualizer","gridRef","grid","setGrid","maze","setMaze","pairGrid","setPairGrid","wallsDensity","setWallsDensity","mudDensity","setMudDensity","isVisualized","setIsVisualized","mudWeight","setMudWeight","numberOfTargets","setNumberOfTargets","startNode","setStartNode","targetList","setTargetList","algoActiveMenu","setAlgoActiveMenu","singleTargetAlgorithm","setSingleTargetAlgorithm","multipleTargetsAlgorithm","setMultipleTargetsAlgorithm","height","setHeight","undefined","mouseIsPressed","setMouseIsPressed","visualizeSingleTargetAlgorithm","visited","path","timeout","n","length","i","setTimeout","newGrid","current","slice","x","y","isVisited","m","successor","isShortestPath","successorPosition","getSuccessorPosition","visualizeMultipleTargetsAlgorithm","allVisitedAndPathsArray","currentTimeout","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","handleVisualization","allVisitedAndPaths","reinitializeGrid","generateMaze","newPairGrid","newMaze","newStartNode","newTargetList","j","toggleMultipleTargetGrid","handleChangeNumberOfTargets","val","Math","floor","handleMultipleTargets","toggleStartNode","handleMouseDown","handleMouseEnter","handleMouseUp","getVisualizeText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport {\n  singleTargetAlgorithms,\n  multipleTargetsAlgorithms,\n} from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport {\n  addPiecesOfCheese,\n  constructGrid,\n  reconstructGrid,\n} from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 125;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24],\n  0\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  2\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  const gridRef = useRef(firstGrid);\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [maze, setMaze] = useState(mazeGraph);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [isVisualized, setIsVisualized] = useState(0);\n  const [mudWeight, setMudWeight] = useState(1.5);\n  // const [multipleTargets, setMultipleTargets] = useState(false);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n\n  // States of the start and end node\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const [targetList, setTargetList] = useState(firstTargetList);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\n    \"Dijkstra's algorithm\"\n  );\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\n    \"Nearest Neighbors (Greedy)\"\n  );\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeSingleTargetAlgorithm: (\n    visited: node[],\n    path: node[],\n    timeout: number\n  ) => number = (visited, path, timeout) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isVisited: true,\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is there to visualize multipleTargetsAlgorithms\n  const visualizeMultipleTargetsAlgorithm: (\n    allVisitedAndPathsArray: [node[], node[]][]\n  ) => number = (allVisitedAndPathsArray) => {\n    let n: number = allVisitedAndPathsArray.length;\n    let currentTimeout: number = 0;\n    for (let i: number = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(\n        visited,\n        path,\n        currentTimeout\n      );\n\n      currentTimeout += 1250;\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        for (let x: number = 0; x < newGrid.length; x++) {\n          for (let y: number = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = {\n              ...gridRef.current[x][y],\n              isVisited: false,\n            };\n          }\n        }\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n    return currentTimeout;\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      numberOfTargets > 1\n        ? setMultipleTargetsAlgorithm(algorithmName)\n        : setSingleTargetAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      if (numberOfTargets === 1) {\n        const [visited, path]: [node[], node[]] = singleTargetAlgorithms[\n          singleTargetAlgorithm\n        ](grid, pairGrid, maze, startNode, targetList);\n        const n: number = visited.length,\n          m: number = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 1250);\n        return;\n      }\n      const allVisitedAndPaths: [node[], node[]][] = multipleTargetsAlgorithms[\n        multipleTargetsAlgorithm\n      ](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout: number = visualizeMultipleTargetsAlgorithm(\n        allVisitedAndPaths\n      );\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, timeout);\n    }\n    if (isVisualized === 2) {\n      reinitializeGrid();\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        grid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        targetList\n      );\n      for (let i: number = 0; i < newGrid.length; i++) {\n        for (let j: number = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // toggles on and off the multiple targets\n  const toggleMultipleTargetGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        startNode,\n        targetList,\n        numberOfTargets - targetList.length\n      );\n      for (let i: number = 0; i < newGrid.length; i++) {\n        for (let j: number = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // If the value of multipleTargets change, call the reinitialize function\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]);\n\n  const handleChangeNumberOfTargets: (val: number) => void = (val) => {\n    setNumberOfTargets(Math.floor(val));\n  };\n\n  const handleMultipleTargets: () => void = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(\n        numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\"\n      );\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  const toggleStartNode: (x: number, y: number) => void = (x, y) => {\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [x, y],\n      targetList\n    );\n    for (let x: number = 0; x < newGrid.length; x++) {\n      for (let y: number = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (x: number, y: number) => void = (x, y) => {\n    if (grid[x][y] === startNode) {\n      setMouseIsPressed(true);\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (x: number, y: number) => void = (x, y) => {\n    if (mouseIsPressed) {\n      toggleStartNode(x, y);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  const getVisualizeText: () => string = () => {\n    if (isVisualized <= 0)\n      return (\n        \"Visualize \" +\n        (numberOfTargets > 1\n          ? multipleTargetsAlgorithm\n          : singleTargetAlgorithm) +\n        \"!\"\n      );\n    return \"Reinitialize Visualization\";\n  };\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        {/* <NavButton\n          text=\"Reinitialize\"\n          isVisualized={isVisualized}\n          className=\"reinitialize\"\n          startClassName=\"highlight\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={reinitializeGrid}\n        /> */}\n        <NavButton\n          text=\"Generate New Maze\"\n          isVisualized={isVisualized}\n          className=\"generate-maze\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1.1}\n              maxValue={3}\n              step={0.01}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n            {numberOfTargets > 1 && (\n              <DropDownSlider\n                text=\"Number of Targets\"\n                minValue={2}\n                maxValue={10}\n                step={1}\n                defaultValue={numberOfTargets}\n                handleChange={handleChangeNumberOfTargets}\n              ></DropDownSlider>\n            )}\n          </DropDownMenu>\n        </NavItem>\n        <NavButton\n          text={getVisualizeText()}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out highlight\"\n          visualizedClassName=\"highlight\"\n          handleClick={handleVisualization}\n        />\n        <NavButton\n          text={\n            (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\"\n          }\n          isVisualized={isVisualized}\n          className=\"enable-multiple-targets\"\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleMultipleTargets}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-single-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                Algorithms for unweighted graphs\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                Algorithms for weighted graphs\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {singleTargetAlgorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {singleTargetAlgorithm === \"Breadth First Search\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {singleTargetAlgorithm === \"Dijkstra's algorithm\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {singleTargetAlgorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-multiple-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\n                  \"Nearest Neighbors (Greedy)\"\n                )}\n              >\n                <p>Nearest Neighbors (Greedy)</p>\n                {multipleTargetsAlgorithm === \"Nearest Neighbors (Greedy)\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}