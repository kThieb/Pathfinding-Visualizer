{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx\";\nimport React from \"react\";\nimport \"./GridNode.css\";\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors\n}) => {\n  const getAddedClassName = (neighbors, node) => {\n    let addedClassName = \"\";\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor = neighbors[i];\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1],\n          distance = neighbor[1];\n      if (neighborX === node.x + 1) addedClassName += distance == 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n      if (neighborX === node.x - 1) addedClassName += distance == 1 ? \" no-wall-top\" : \" mud-top\";\n      if (neighborY === node.y + 1) addedClassName += distance == 1 ? \" no-wall-right\" : \" mud-right\";\n      if (neighborY === node.y - 1) addedClassName += distance == 1 ? \" no-wall-left\" : \" mud-left\";\n    }\n\n    if (node.hasCheese) addedClassName += \" cheese\";\n    if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n    if (node.isVisited) addedClassName += \" visited-node\";\n    return addedClassName;\n  };\n\n  const addEmoji = node => {\n    if (node.isStart) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, \"\\uD83D\\uDC00\");\n    }\n\n    if (node.isEnd) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"rat\",\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, \"\\uD83E\\uDDC0\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }\n    });\n  }; //   const addMud: (node: node) => any = (node) => {\n  //     for (let i = 0; i < neighbors.length; i++) {\n  //       let neighbor: [[number, number], number] = neighbors[i];\n  //       let neighborX = neighbor[0][0],\n  //         neighborY = neighbor[0][1],\n  //         distance: number = neighbor[1];\n  //       if (neighborX === node.x + 1)\n  //         addedClassName += distance == 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n  //       if (neighborX === node.x - 1)\n  //         addedClassName += distance == 1 ? \" no-wall-top\" : \" mud-top\";\n  //       if (neighborY === node.y + 1)\n  //         addedClassName += distance == 1 ? \" no-wall-right\" : \" mud-right\";\n  //       if (neighborY === node.y - 1)\n  //         addedClassName += distance == 1 ? \" no-wall-left\" : \" mud-left\";\n  //     }\n  //     return();\n  //   }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-node\" + getAddedClassName(neighbors, node),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, addEmoji(node));\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.node.isVisited === nextProps.node.isVisited && prevProps.node.isShortestPath === nextProps.node.isShortestPath && getAddedClassName(prevProps.neighbors, prevProps.node) === getAddedClassName(nextProps.neighbors, nextProps.node);\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/GridNode/GridNode.tsx"],"names":["React","_GridNode","numberOfElementsPerRow","node","neighbors","getAddedClassName","addedClassName","i","length","neighbor","neighborX","neighborY","distance","x","y","hasCheese","isShortestPath","isVisited","addEmoji","isStart","isEnd","areEqual","prevProps","nextProps","GridNode","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./GridNode.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  numberOfElementsPerRow: number;\n  node: node;\n  neighbors: [[number, number], number][];\n}\n\n// This component represents a single Node in the grid rendered in the DOM\nexport const _GridNode: React.FC<Props> = ({\n  numberOfElementsPerRow,\n  node,\n  neighbors,\n}) => {\n  const getAddedClassName: (\n    neighbors: [[number, number], number][],\n    node: node\n  ) => string = (neighbors, node) => {\n    let addedClassName: string = \"\";\n    for (let i = 0; i < neighbors.length; i++) {\n      let neighbor: [[number, number], number] = neighbors[i];\n      let neighborX = neighbor[0][0],\n        neighborY = neighbor[0][1],\n        distance: number = neighbor[1];\n      if (neighborX === node.x + 1)\n        addedClassName += distance == 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n      if (neighborX === node.x - 1)\n        addedClassName += distance == 1 ? \" no-wall-top\" : \" mud-top\";\n      if (neighborY === node.y + 1)\n        addedClassName += distance == 1 ? \" no-wall-right\" : \" mud-right\";\n      if (neighborY === node.y - 1)\n        addedClassName += distance == 1 ? \" no-wall-left\" : \" mud-left\";\n    }\n    if (node.hasCheese) addedClassName += \" cheese\";\n    if (node.isShortestPath) addedClassName += \" shortest-path-node\";\n    if (node.isVisited) addedClassName += \" visited-node\";\n    return addedClassName;\n  };\n\n  const addEmoji: (node: node) => any = (node) => {\n    if (node.isStart) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üêÄ\n        </span>\n      );\n    }\n    if (node.isEnd) {\n      return (\n        <span role=\"img\" aria-label=\"rat\" className=\"content\">\n          üßÄ\n        </span>\n      );\n    }\n    return <span></span>;\n  };\n\n  //   const addMud: (node: node) => any = (node) => {\n\n  //     for (let i = 0; i < neighbors.length; i++) {\n  //       let neighbor: [[number, number], number] = neighbors[i];\n  //       let neighborX = neighbor[0][0],\n  //         neighborY = neighbor[0][1],\n  //         distance: number = neighbor[1];\n  //       if (neighborX === node.x + 1)\n  //         addedClassName += distance == 1 ? \" no-wall-bottom\" : \" mud-bottom\";\n  //       if (neighborX === node.x - 1)\n  //         addedClassName += distance == 1 ? \" no-wall-top\" : \" mud-top\";\n  //       if (neighborY === node.y + 1)\n  //         addedClassName += distance == 1 ? \" no-wall-right\" : \" mud-right\";\n  //       if (neighborY === node.y - 1)\n  //         addedClassName += distance == 1 ? \" no-wall-left\" : \" mud-left\";\n  //     }\n  //     return();\n  //   }\n\n  return (\n    <div className={\"grid-node\" + getAddedClassName(neighbors, node)}>\n      {addEmoji(node)}\n    </div>\n  );\n};\n\nconst areEqual: (prevProps: Props, nextProps: Props) => boolean = (\n  prevProps,\n  nextProps\n) => {\n  return (\n    prevProps.node.isVisited === nextProps.node.isVisited &&\n    prevProps.node.isShortestPath === nextProps.node.isShortestPath &&\n    getAddedClassName(prevProps.neighbors, prevProps.node) ===\n      getAddedClassName(nextProps.neighbors, nextProps.node)\n  );\n};\n\nexport const GridNode = React.memo(_GridNode, areEqual);\n"]},"metadata":{},"sourceType":"module"}