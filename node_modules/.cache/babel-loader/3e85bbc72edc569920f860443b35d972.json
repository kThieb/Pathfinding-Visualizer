{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport { NavBar, NavItem, DropDownMenu, DropDownItem, DropDownSlider, NavButton, DropDownToggleSwich, NavSlider } from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport { singleTargetAlgorithms, multipleTargetsAlgorithms } from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport { addPiecesOfCheese, constructGrid, reconstructGrid } from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nconst NUMBER_OF_COLUMNS = 28;\nconst NUMBER_OF_ROWS = 13;\nconst VISITED_ANIMATION_TIMEOUT = 35;\nconst PATH_ANIMATION_TIMEOUT = 125; // We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\n\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [6, 3], [6, 24], 0);\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, firstGrid, 0.3, 0.3, 2); // Component rendering everything in the webpage.\n\nconst Visualizer = () => {\n  const gridRef = useRef(firstGrid); // States managing the grid\n\n  const [grid, setGrid] = useState(firstGrid);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [isVisualized, setIsVisualized] = useState(0); // States managing the maze\n\n  const [maze, setMaze] = useState(mazeGraph);\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [mudWeight, setMudWeight] = useState(2);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n  const [shouldGenerateMaze, setShouldGenerateMaze] = useState(false);\n  const didMount = useRef(false);\n  const [showNumbers, setShowNumbers] = useState(false); // States of the start and end nodes\n\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const ratNode = useRef(startNode);\n  const [targetList, setTargetList] = useState(firstTargetList); // States managing the dropdown menu\n\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\"Dijkstra's algorithm\");\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\"Nearest Neighbors (Greedy)\");\n  const [height, setHeight] = useState(undefined); // State of the mouse\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const draggedNode = useRef(startNode); // This function is there to visualize the algorithm chosen in the drop down menu\n\n  const visualizeSingleTargetAlgorithm = (visited, path, timeout) => {\n    const n = visited.length;\n\n    for (let i = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        const node = visited[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isVisited: true\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n\n    for (let i = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n        let successor = i < m - 1 ? path[i + 1] : path[i];\n        const node = path[i]; // define the x and y of the current node\n\n        const x = node.x;\n        const y = node.y;\n        newGrid[x][y] = { ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor)\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  }; // This function returns the position of the successor of a node in the shortest path\n\n\n  const getSuccessorPosition = (node, successor) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  }; // This function is there to visualize multipleTargetsAlgorithms\n\n\n  const visualizeMultipleTargetsAlgorithm = allVisitedAndPathsArray => {\n    let n = allVisitedAndPathsArray.length;\n    let currentTimeout = 0;\n\n    for (let i = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(visited, path, currentTimeout);\n      currentTimeout += 1250;\n      setTimeout(() => {\n        const newGrid = gridRef.current.slice();\n\n        for (let x = 0; x < newGrid.length; x++) {\n          for (let y = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = { ...gridRef.current[x][y],\n              isVisited: false\n            };\n          }\n        }\n\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n\n    let returnTimeout = currentTimeout;\n\n    for (let i = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n\n      for (let j = 0; j < path.length; j++) {\n        setTimeout(() => {\n          const newGrid = gridRef.current.slice();\n          const prevNode = ratNode.current;\n          newGrid[prevNode.x][prevNode.y] = { ...gridRef.current[prevNode.x][prevNode.y],\n            hasRat: false\n          };\n          newGrid[path[j].x][path[j].y] = { ...gridRef.current[path[j].x][path[j].y],\n            hasRat: true\n          };\n          ratNode.current = newGrid[path[j].x][path[j].y];\n          setGrid(newGrid);\n        }, currentTimeout);\n        currentTimeout += 300;\n      }\n    }\n\n    return currentTimeout;\n  }; // This function is passed to the drop down menu to handle the change of algorithm\n\n\n  const handleAlgorithmChange = algorithmName => {\n    return () => {\n      numberOfTargets > 1 ? setMultipleTargetsAlgorithm(algorithmName) : setSingleTargetAlgorithm(algorithmName);\n    };\n  }; // This function handles the click on the menu buttons\n\n\n  const handleMenuChange = menuName => {\n    return () => setAlgoActiveMenu(menuName);\n  }; // This function handles the logic of the visualization of the algorithms\n\n\n  const handleVisualization = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n\n      if (numberOfTargets === 1) {\n        const [visited, path] = singleTargetAlgorithms[singleTargetAlgorithm](grid, pairGrid, maze, startNode, targetList);\n        const n = visited.length,\n              m = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 1250);\n        return;\n      }\n\n      const allVisitedAndPaths = multipleTargetsAlgorithms[multipleTargetsAlgorithm](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout = visualizeMultipleTargetsAlgorithm(allVisitedAndPaths);\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, timeout);\n    }\n\n    if (isVisualized === 2) {\n      reinitializeGrid();\n    }\n  }; // This function calls the generate maze function\n\n\n  const generateMaze = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, grid, wallsDensity, mudDensity, mudWeight);\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setShouldGenerateMaze(false);\n    }\n  }; // Reinitialize the the board\n\n\n  const reinitializeGrid = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], targetList);\n\n      for (let i = 0; i < newGrid.length; i++) {\n        for (let j = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // toggles on and off the multiple targets\n\n\n  const toggleMultipleTargetGrid = () => {\n    if (isVisualized !== 1) {\n      let newGrid, newStartNode, newTargetList;\n\n      if (numberOfTargets > 1) {\n        [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, startNode, targetList, numberOfTargets - targetList.length);\n\n        for (let i = 0; i < newGrid.length; i++) {\n          for (let j = 0; j < newGrid[0].length; j++) {\n            gridRef.current[i][j] = newGrid[i][j];\n          }\n        }\n      } else {\n        [newGrid, newStartNode, newTargetList] = constructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [startNode.x, startNode.y], [6, 24], 0);\n      }\n\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  }; // If the value of multipleTargets change, call the reinitialize function\n\n\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]); // handle the change of the number of targets\n\n  const handleChangeNumberOfTargets = val => {\n    setNumberOfTargets(Math.floor(val));\n  }; // handle the click on the multiple targets button\n\n\n  const handleMultipleTargets = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\");\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  }; // toggle the start node in the grid\n\n\n  const toggleStartNode = currentNode => {\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [currentNode.x, currentNode.y], targetList);\n\n    for (let x = 0; x < newGrid.length; x++) {\n      for (let y = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  };\n\n  const toggleNode = currentNode => {\n    let oldStartNode = startNode,\n        oldTargetList = targetList.slice();\n\n    if (draggedNode.current === startNode) {\n      oldStartNode = currentNode;\n    } else {\n      const isTargetNode = targetList.find(targetNode => targetNode === currentNode) ? true : false;\n\n      if (!isTargetNode) {\n        oldTargetList = oldTargetList.filter(targetNode => targetNode !== draggedNode.current);\n        oldTargetList.push(currentNode);\n      }\n    }\n\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(NUMBER_OF_COLUMNS, NUMBER_OF_ROWS, [oldStartNode.x, oldStartNode.y], oldTargetList);\n\n    for (let x = 0; x < newGrid.length; x++) {\n      for (let y = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n\n    draggedNode.current = newGrid[currentNode.x][currentNode.y];\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  }; // handles the case when the mouse button is down\n\n\n  const handleMouseDown = currentNode => {\n    const isTargetNode = targetList.find(targetNode => targetNode === currentNode) ? true : false;\n\n    if (currentNode === startNode || isTargetNode) {\n      setMouseIsPressed(true);\n      draggedNode.current = currentNode;\n    }\n  }; // handles the case whan the mouse button is down and you enter a node\n\n\n  const handleMouseEnter = currentNode => {\n    if (mouseIsPressed) {\n      toggleNode(currentNode);\n    }\n  }; // handles the case when you mouse up\n\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  }; // function that returns the text in the visualization button\n\n\n  const getVisualizeText = () => {\n    if (isVisualized <= 0) return \"Visualize \" + (numberOfTargets > 1 ? multipleTargetsAlgorithm : singleTargetAlgorithm) + \"!\";\n    return \"Reinitialize Visualization\";\n  }; // updates the maze in real time\n\n\n  useEffect(() => {\n    if (didMount.current) setShouldGenerateMaze(true);else didMount.current = true;\n  }, [wallsDensity, mudDensity, mudWeight]); // Render the app\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onMouseUp: () => handleMouseUp(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavButton, {\n    text: \"Generate New Maze\",\n    isVisualized: isVisualized,\n    className: \"generate-maze \" + (shouldGenerateMaze ? \"should-generate\" : \"\"),\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: generateMaze,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Maze options\",\n    id: \"maze-options\",\n    isVisualized: isVisualized,\n    shouldGreyOut: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    left: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of walls\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: wallsDensity,\n    handleChange: setWallsDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Density of mud\",\n    minValue: 0,\n    maxValue: 1,\n    step: 0.01,\n    defaultValue: mudDensity,\n    handleChange: setMudDensity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownSlider, {\n    text: \"Mud Weight\",\n    minValue: 1.1,\n    maxValue: 5,\n    step: 0.1,\n    defaultValue: mudWeight,\n    handleChange: setMudWeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(DropDownToggleSwich, {\n    text: \"Show Mud Weights ?\",\n    shouldShowWeights: showNumbers,\n    handleChange: () => setShowNumbers(!showNumbers),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NavSlider, {\n    className: numberOfTargets > 1 ? \"show-nav-slider\" : \"hide-nav-slider\",\n    text: \"Number of Targets\",\n    minValue: 2,\n    maxValue: 10,\n    step: 1,\n    defaultValue: numberOfTargets,\n    handleChange: handleChangeNumberOfTargets,\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\",\n    isVisualized: isVisualized,\n    className: numberOfTargets > 1 ? \"disable-multiple-targets\" : \"enable-multiple-targets\",\n    visualizingClassName: \"greyed-out\",\n    visualizedClassName: \"greyed-out\",\n    handleClick: handleMultipleTargets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavButton, {\n    text: getVisualizeText(),\n    isVisualized: isVisualized,\n    className: \"visualize-button\",\n    visualizingClassName: \"greyed-out highlight\",\n    visualizedClassName: \"highlight\",\n    handleClick: handleVisualization,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NavItem, {\n    text: \"Algorithms\",\n    id: \"algorithms\",\n    isVisualized: isVisualized,\n    shouldGreyOut: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropDownMenu, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-single-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-primary\",\n    handleEnter: setHeight,\n    appear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"unweighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 17\n    }\n  }, \"Algorithms for unweighted graphs\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 17\n    }\n  }, \">>>\")), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"weighted\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 17\n    }\n  }, \"Algorithms for weighted graphs\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"arrow-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 17\n    }\n  }, \">>>\"))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"unweighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Depth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 17\n    }\n  }, \"Random Depth First Search\"), singleTargetAlgorithm === \"Depth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 67\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Breadth First Search\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 17\n    }\n  }, \"Breadth First Search\"), singleTargetAlgorithm === \"Breadth First Search\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"weighted\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-weighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleMenuChange(\"main-single-target\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 15\n    }\n  }, \"<<<\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Dijkstra's algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 17\n    }\n  }, \"Dijkstra's Algorithm\"), singleTargetAlgorithm === \"Dijkstra's algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"), /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"A* algorithm\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 17\n    }\n  }, \"A* Algorithm\"), singleTargetAlgorithm === \"A* algorithm\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 61\n    }\n  }, \"\\u2713\") : \"\")), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: algoActiveMenu === \"main-multiple-target\",\n    unmountOnExit: true,\n    timeout: 500,\n    classNames: \"menu-unweighted\",\n    handleEnter: setHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DropDownItem, {\n    handleClick: handleAlgorithmChange(\"Nearest Neighbors (Greedy)\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 17\n    }\n  }, \"Nearest Neighbors (Greedy)\"), multipleTargetsAlgorithm === \"Nearest Neighbors (Greedy)\" ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 19\n    }\n  }, \"\\u2713\") : \"\"))))), /*#__PURE__*/React.createElement(Grid, {\n    grid: grid,\n    pairGrid: pairGrid,\n    maze: maze,\n    mouseState: mouseIsPressed,\n    handleMouseDown: handleMouseDown,\n    handleMouseEnter: handleMouseEnter,\n    showNumbers: showNumbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Visualizer;","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Visualizer/Visualizer.tsx"],"names":["React","useEffect","useRef","useState","Grid","NavBar","NavItem","DropDownMenu","DropDownItem","DropDownSlider","NavButton","DropDownToggleSwich","NavSlider","node","singleTargetAlgorithms","multipleTargetsAlgorithms","generateMazeGraph","addPiecesOfCheese","constructGrid","reconstructGrid","WrapperCSSTransition","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","VISITED_ANIMATION_TIMEOUT","PATH_ANIMATION_TIMEOUT","firstGrid","firstStartNode","firstTargetList","firstpairGrid","mazeGraph","Visualizer","gridRef","grid","setGrid","pairGrid","setPairGrid","isVisualized","setIsVisualized","maze","setMaze","wallsDensity","setWallsDensity","mudDensity","setMudDensity","mudWeight","setMudWeight","numberOfTargets","setNumberOfTargets","shouldGenerateMaze","setShouldGenerateMaze","didMount","showNumbers","setShowNumbers","startNode","setStartNode","ratNode","targetList","setTargetList","algoActiveMenu","setAlgoActiveMenu","singleTargetAlgorithm","setSingleTargetAlgorithm","multipleTargetsAlgorithm","setMultipleTargetsAlgorithm","height","setHeight","undefined","mouseIsPressed","setMouseIsPressed","draggedNode","visualizeSingleTargetAlgorithm","visited","path","timeout","n","length","i","setTimeout","newGrid","current","slice","x","y","isVisited","m","successor","isShortestPath","successorPosition","getSuccessorPosition","visualizeMultipleTargetsAlgorithm","allVisitedAndPathsArray","currentTimeout","returnTimeout","j","prevNode","hasRat","handleAlgorithmChange","algorithmName","handleMenuChange","menuName","handleVisualization","allVisitedAndPaths","reinitializeGrid","generateMaze","newPairGrid","newMaze","newStartNode","newTargetList","toggleMultipleTargetGrid","handleChangeNumberOfTargets","val","Math","floor","handleMultipleTargets","toggleStartNode","currentNode","toggleNode","oldStartNode","oldTargetList","isTargetNode","find","targetNode","filter","push","handleMouseDown","handleMouseEnter","handleMouseUp","getVisualizeText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Visualizer.css\";\nimport { Grid } from \"../Grid/Grid\";\nimport {\n  NavBar,\n  NavItem,\n  DropDownMenu,\n  DropDownItem,\n  DropDownSlider,\n  NavButton,\n  DropDownToggleSwich,\n  NavSlider,\n} from \"../NavBar/NavBar\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\nimport {\n  singleTargetAlgorithms,\n  multipleTargetsAlgorithms,\n} from \"../helperFunctions/shortestPathAlgorithms/allAlgorithms\";\nimport { generateMazeGraph } from \"../helperFunctions/mazeGenerators/mazeGraph\";\nimport {\n  addPiecesOfCheese,\n  constructGrid,\n  reconstructGrid,\n} from \"../helperFunctions/constructGrid\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\n\nconst NUMBER_OF_COLUMNS: number = 28;\nconst NUMBER_OF_ROWS: number = 13;\nconst VISITED_ANIMATION_TIMEOUT: number = 35;\nconst PATH_ANIMATION_TIMEOUT: number = 125;\n\n// We define these constants out of the functional component\n// that the App uses to avoid re-running the functions to create\n// these each time there is a re-render\nconst [firstGrid, firstStartNode, firstTargetList] = constructGrid(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  [6, 3],\n  [6, 24],\n  0\n);\n\nconst [firstpairGrid, mazeGraph] = generateMazeGraph(\n  NUMBER_OF_COLUMNS,\n  NUMBER_OF_ROWS,\n  firstGrid,\n  0.3,\n  0.3,\n  2\n);\n\n// Component rendering everything in the webpage.\nconst Visualizer: React.FC = () => {\n  const gridRef = useRef(firstGrid);\n  // States managing the grid\n  const [grid, setGrid] = useState(firstGrid);\n  const [pairGrid, setPairGrid] = useState(firstpairGrid);\n  const [isVisualized, setIsVisualized] = useState(0);\n\n  // States managing the maze\n  const [maze, setMaze] = useState(mazeGraph);\n  const [wallsDensity, setWallsDensity] = useState(0.3);\n  const [mudDensity, setMudDensity] = useState(0.3);\n  const [mudWeight, setMudWeight] = useState(2);\n  const [numberOfTargets, setNumberOfTargets] = useState(1);\n  const [shouldGenerateMaze, setShouldGenerateMaze] = useState(false);\n  const didMount = useRef(false);\n  const [showNumbers, setShowNumbers] = useState(false);\n\n  // States of the start and end nodes\n  const [startNode, setStartNode] = useState(firstStartNode);\n  const ratNode = useRef(startNode);\n  const [targetList, setTargetList] = useState(firstTargetList);\n\n  // States managing the dropdown menu\n  const [algoActiveMenu, setAlgoActiveMenu] = useState(\"main-single-target\");\n  const [singleTargetAlgorithm, setSingleTargetAlgorithm] = useState(\n    \"Dijkstra's algorithm\"\n  );\n  const [multipleTargetsAlgorithm, setMultipleTargetsAlgorithm] = useState(\n    \"Nearest Neighbors (Greedy)\"\n  );\n  const [height, setHeight] = useState(undefined);\n\n  // State of the mouse\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const draggedNode = useRef(startNode);\n\n  // This function is there to visualize the algorithm chosen in the drop down menu\n  const visualizeSingleTargetAlgorithm: (\n    visited: node[],\n    path: node[],\n    timeout: number\n  ) => number = (visited, path, timeout) => {\n    const n = visited.length;\n    for (let i: number = 0; i < n; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        const node: node = visited[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isVisited: true,\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * i);\n    }\n\n    const m = path.length;\n    for (let i: number = 0; i < m; i++) {\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        let successor: node = i < m - 1 ? path[i + 1] : path[i];\n        const node: node = path[i];\n        // define the x and y of the current node\n        const x: number = node.x;\n        const y: number = node.y;\n\n        newGrid[x][y] = {\n          ...gridRef.current[x][y],\n          isShortestPath: true,\n          isVisited: false,\n          successorPosition: getSuccessorPosition(node, successor),\n        };\n        setGrid(newGrid);\n      }, timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * i + 500);\n    }\n    return timeout + VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m;\n  };\n\n  // This function returns the position of the successor of a node in the shortest path\n  const getSuccessorPosition: (node: node, successor: node) => string = (\n    node,\n    successor\n  ) => {\n    if (node.x + 1 === successor.x) return \"D\";\n    if (node.y + 1 === successor.y) return \"R\";\n    if (node.x - 1 === successor.x) return \"U\";\n    if (node.y - 1 === successor.y) return \"L\";\n    return \"\";\n  };\n\n  // This function is there to visualize multipleTargetsAlgorithms\n  const visualizeMultipleTargetsAlgorithm: (\n    allVisitedAndPathsArray: [node[], node[]][]\n  ) => number = (allVisitedAndPathsArray) => {\n    let n: number = allVisitedAndPathsArray.length;\n    let currentTimeout: number = 0;\n    for (let i: number = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      currentTimeout = visualizeSingleTargetAlgorithm(\n        visited,\n        path,\n        currentTimeout\n      );\n\n      currentTimeout += 1250;\n      setTimeout(() => {\n        const newGrid: node[][] = gridRef.current.slice();\n        for (let x: number = 0; x < newGrid.length; x++) {\n          for (let y: number = 0; y < newGrid[0].length; y++) {\n            newGrid[x][y] = {\n              ...gridRef.current[x][y],\n              isVisited: false,\n            };\n          }\n        }\n        setGrid(newGrid);\n      }, currentTimeout);\n      currentTimeout += 1000;\n    }\n    let returnTimeout: number = currentTimeout;\n    for (let i: number = 0; i < n; i++) {\n      const [visited, path] = allVisitedAndPathsArray[i];\n      for (let j: number = 0; j < path.length; j++) {\n        setTimeout(() => {\n          const newGrid: node[][] = gridRef.current.slice();\n          const prevNode: node = ratNode.current;\n          newGrid[prevNode.x][prevNode.y] = {\n            ...gridRef.current[prevNode.x][prevNode.y],\n            hasRat: false,\n          };\n          newGrid[path[j].x][path[j].y] = {\n            ...gridRef.current[path[j].x][path[j].y],\n            hasRat: true,\n          };\n          ratNode.current = newGrid[path[j].x][path[j].y];\n          setGrid(newGrid);\n        }, currentTimeout);\n        currentTimeout += 300;\n      }\n    }\n    return currentTimeout;\n  };\n\n  // This function is passed to the drop down menu to handle the change of algorithm\n  const handleAlgorithmChange: (algorithmName: string) => () => void = (\n    algorithmName\n  ) => {\n    return () => {\n      numberOfTargets > 1\n        ? setMultipleTargetsAlgorithm(algorithmName)\n        : setSingleTargetAlgorithm(algorithmName);\n    };\n  };\n\n  // This function handles the click on the menu buttons\n  const handleMenuChange: (menuName: string) => () => void = (menuName) => {\n    return () => setAlgoActiveMenu(menuName);\n  };\n\n  // This function handles the logic of the visualization of the algorithms\n  const handleVisualization: () => void = () => {\n    if (isVisualized === 0) {\n      setIsVisualized(1);\n      if (numberOfTargets === 1) {\n        const [visited, path]: [node[], node[]] = singleTargetAlgorithms[\n          singleTargetAlgorithm\n        ](grid, pairGrid, maze, startNode, targetList);\n        const n: number = visited.length,\n          m: number = path.length;\n        visualizeSingleTargetAlgorithm(visited, path, 0);\n        setTimeout(() => {\n          setIsVisualized(2);\n        }, VISITED_ANIMATION_TIMEOUT * n + PATH_ANIMATION_TIMEOUT * m + 1250);\n        return;\n      }\n      const allVisitedAndPaths: [node[], node[]][] = multipleTargetsAlgorithms[\n        multipleTargetsAlgorithm\n      ](grid, pairGrid, maze, startNode, targetList.slice());\n      const timeout: number = visualizeMultipleTargetsAlgorithm(\n        allVisitedAndPaths\n      );\n      setTimeout(() => {\n        setIsVisualized(2);\n      }, timeout);\n    }\n    if (isVisualized === 2) {\n      reinitializeGrid();\n    }\n  };\n\n  // This function calls the generate maze function\n  const generateMaze: () => void = () => {\n    if (isVisualized === 0) {\n      const [newPairGrid, newMaze] = generateMazeGraph(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        grid,\n        wallsDensity,\n        mudDensity,\n        mudWeight\n      );\n      setPairGrid(newPairGrid);\n      setMaze(newMaze);\n      setShouldGenerateMaze(false);\n    }\n  };\n\n  // Reinitialize the the board\n  const reinitializeGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n        NUMBER_OF_COLUMNS,\n        NUMBER_OF_ROWS,\n        [startNode.x, startNode.y],\n        targetList\n      );\n      for (let i: number = 0; i < newGrid.length; i++) {\n        for (let j: number = 0; j < newGrid[0].length; j++) {\n          gridRef.current[i][j] = newGrid[i][j];\n        }\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // toggles on and off the multiple targets\n  const toggleMultipleTargetGrid: () => void = () => {\n    if (isVisualized !== 1) {\n      let newGrid, newStartNode, newTargetList;\n      if (numberOfTargets > 1) {\n        [newGrid, newStartNode, newTargetList] = addPiecesOfCheese(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          startNode,\n          targetList,\n          numberOfTargets - targetList.length\n        );\n        for (let i: number = 0; i < newGrid.length; i++) {\n          for (let j: number = 0; j < newGrid[0].length; j++) {\n            gridRef.current[i][j] = newGrid[i][j];\n          }\n        }\n      } else {\n        [newGrid, newStartNode, newTargetList] = constructGrid(\n          NUMBER_OF_COLUMNS,\n          NUMBER_OF_ROWS,\n          [startNode.x, startNode.y],\n          [6, 24],\n          0\n        );\n      }\n      setGrid(newGrid);\n      setStartNode(newStartNode);\n      setTargetList(newTargetList);\n      setIsVisualized(0);\n    }\n  };\n\n  // If the value of multipleTargets change, call the reinitialize function\n  useEffect(toggleMultipleTargetGrid, [numberOfTargets]);\n\n  // handle the change of the number of targets\n  const handleChangeNumberOfTargets: (val: number) => void = (val) => {\n    setNumberOfTargets(Math.floor(val));\n  };\n\n  // handle the click on the multiple targets button\n  const handleMultipleTargets: () => void = () => {\n    if (isVisualized === 0) {\n      setAlgoActiveMenu(\n        numberOfTargets > 1 ? \"main-single-target\" : \"main-multiple-target\"\n      );\n      setNumberOfTargets(numberOfTargets > 1 ? 1 : 5);\n    }\n  };\n\n  // toggle the start node in the grid\n  const toggleStartNode: (currentNode: node) => void = (currentNode) => {\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [currentNode.x, currentNode.y],\n      targetList\n    );\n    for (let x: number = 0; x < newGrid.length; x++) {\n      for (let y: number = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  };\n\n  const toggleNode: (currentNode: node) => void = (currentNode) => {\n    let oldStartNode: node = startNode,\n      oldTargetList: node[] = targetList.slice();\n    if (draggedNode.current === startNode) {\n      oldStartNode = currentNode;\n    } else {\n      const isTargetNode: boolean = targetList.find(\n        (targetNode) => targetNode === currentNode\n      )\n        ? true\n        : false;\n      if (!isTargetNode) {\n        oldTargetList = oldTargetList.filter(\n          (targetNode) => targetNode !== draggedNode.current\n        );\n        oldTargetList.push(currentNode);\n      }\n    }\n    const [newGrid, newStartNode, newTargetList] = reconstructGrid(\n      NUMBER_OF_COLUMNS,\n      NUMBER_OF_ROWS,\n      [oldStartNode.x, oldStartNode.y],\n      oldTargetList\n    );\n    for (let x: number = 0; x < newGrid.length; x++) {\n      for (let y: number = 0; y < newGrid[0].length; y++) {\n        gridRef.current[x][y] = newGrid[x][y];\n      }\n    }\n    draggedNode.current = newGrid[currentNode.x][currentNode.y];\n    setStartNode(newStartNode);\n    setTargetList(newTargetList);\n    setGrid(newGrid);\n  };\n\n  // handles the case when the mouse button is down\n  const handleMouseDown: (currentNode: node) => void = (currentNode) => {\n    const isTargetNode: boolean = targetList.find(\n      (targetNode) => targetNode === currentNode\n    )\n      ? true\n      : false;\n    if (currentNode === startNode || isTargetNode) {\n      setMouseIsPressed(true);\n      draggedNode.current = currentNode;\n    }\n  };\n\n  // handles the case whan the mouse button is down and you enter a node\n  const handleMouseEnter: (currentNode: node) => void = (currentNode) => {\n    if (mouseIsPressed) {\n      toggleNode(currentNode);\n    }\n  };\n\n  // handles the case when you mouse up\n  const handleMouseUp: () => void = () => {\n    setMouseIsPressed(false);\n  };\n\n  // function that returns the text in the visualization button\n  const getVisualizeText: () => string = () => {\n    if (isVisualized <= 0)\n      return (\n        \"Visualize \" +\n        (numberOfTargets > 1\n          ? multipleTargetsAlgorithm\n          : singleTargetAlgorithm) +\n        \"!\"\n      );\n    return \"Reinitialize Visualization\";\n  };\n\n  // updates the maze in real time\n  useEffect(() => {\n    if (didMount.current) setShouldGenerateMaze(true);\n    else didMount.current = true;\n  }, [wallsDensity, mudDensity, mudWeight]);\n\n  // Render the app\n  return (\n    <div className=\"App\" onMouseUp={() => handleMouseUp()}>\n      <NavBar>\n        <NavButton\n          text=\"Generate New Maze\"\n          isVisualized={isVisualized}\n          className={\n            \"generate-maze \" + (shouldGenerateMaze ? \"should-generate\" : \"\")\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={generateMaze}\n        />\n        <NavItem\n          text=\"Maze options\"\n          id=\"maze-options\"\n          isVisualized={isVisualized}\n          shouldGreyOut={true}\n        >\n          <DropDownMenu left={true}>\n            <DropDownSlider\n              text=\"Density of walls\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={wallsDensity}\n              handleChange={setWallsDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Density of mud\"\n              minValue={0}\n              maxValue={1}\n              step={0.01}\n              defaultValue={mudDensity}\n              handleChange={setMudDensity}\n            ></DropDownSlider>\n            <DropDownSlider\n              text=\"Mud Weight\"\n              minValue={1.1}\n              maxValue={5}\n              step={0.1}\n              defaultValue={mudWeight}\n              handleChange={setMudWeight}\n            ></DropDownSlider>\n            <DropDownToggleSwich\n              text=\"Show Mud Weights ?\"\n              shouldShowWeights={showNumbers}\n              handleChange={() => setShowNumbers(!showNumbers)}\n            />\n          </DropDownMenu>\n        </NavItem>\n\n        <NavSlider\n          className={\n            numberOfTargets > 1 ? \"show-nav-slider\" : \"hide-nav-slider\"\n          }\n          text=\"Number of Targets\"\n          minValue={2}\n          maxValue={10}\n          step={1}\n          defaultValue={numberOfTargets}\n          handleChange={handleChangeNumberOfTargets}\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n        ></NavSlider>\n\n        <NavButton\n          text={\n            (numberOfTargets > 1 ? \"Disable\" : \"Enable\") + \" Multiple Targets\"\n          }\n          isVisualized={isVisualized}\n          className={\n            numberOfTargets > 1\n              ? \"disable-multiple-targets\"\n              : \"enable-multiple-targets\"\n          }\n          visualizingClassName=\"greyed-out\"\n          visualizedClassName=\"greyed-out\"\n          handleClick={handleMultipleTargets}\n        />\n        <NavButton\n          text={getVisualizeText()}\n          isVisualized={isVisualized}\n          className=\"visualize-button\"\n          visualizingClassName=\"greyed-out highlight\"\n          visualizedClassName=\"highlight\"\n          handleClick={handleVisualization}\n        />\n        <NavItem\n          text=\"Algorithms\"\n          id=\"algorithms\"\n          isVisualized={isVisualized}\n          shouldGreyOut={false}\n        >\n          <DropDownMenu height={height}>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-single-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-primary\"\n              handleEnter={setHeight}\n              appear\n            >\n              <DropDownItem handleClick={handleMenuChange(\"unweighted\")}>\n                <p>Algorithms for unweighted graphs</p>\n                <p className=\"arrow-right\">{\">>>\"}</p>\n              </DropDownItem>\n              <DropDownItem handleClick={handleMenuChange(\"weighted\")}>\n                <p>Algorithms for weighted graphs</p>\n                <p className=\"arrow-right\">{\">>>\"}</p>\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"unweighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Depth First Search\")}\n              >\n                <p>Random Depth First Search</p>\n                {singleTargetAlgorithm === \"Depth First Search\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Breadth First Search\")}\n              >\n                <p>Breadth First Search</p>\n                {singleTargetAlgorithm === \"Breadth First Search\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"weighted\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-weighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleMenuChange(\"main-single-target\")}\n              >\n                {\"<<<\"}\n              </DropDownItem>\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\"Dijkstra's algorithm\")}\n              >\n                <p>Dijkstra's Algorithm</p>\n                {singleTargetAlgorithm === \"Dijkstra's algorithm\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n              <DropDownItem handleClick={handleAlgorithmChange(\"A* algorithm\")}>\n                <p>A* Algorithm</p>\n                {singleTargetAlgorithm === \"A* algorithm\" ? <p>✓</p> : \"\"}\n              </DropDownItem>\n            </WrapperCSSTransition>\n            <WrapperCSSTransition\n              in={algoActiveMenu === \"main-multiple-target\"}\n              unmountOnExit\n              timeout={500}\n              classNames=\"menu-unweighted\"\n              handleEnter={setHeight}\n            >\n              <DropDownItem\n                handleClick={handleAlgorithmChange(\n                  \"Nearest Neighbors (Greedy)\"\n                )}\n              >\n                <p>Nearest Neighbors (Greedy)</p>\n                {multipleTargetsAlgorithm === \"Nearest Neighbors (Greedy)\" ? (\n                  <p>✓</p>\n                ) : (\n                  \"\"\n                )}\n              </DropDownItem>\n            </WrapperCSSTransition>\n          </DropDownMenu>\n        </NavItem>\n      </NavBar>\n\n      <Grid\n        grid={grid}\n        pairGrid={pairGrid}\n        maze={maze}\n        mouseState={mouseIsPressed}\n        handleMouseDown={handleMouseDown}\n        handleMouseEnter={handleMouseEnter}\n        showNumbers={showNumbers}\n      />\n    </div>\n  );\n};\n\nexport default Visualizer;\n"]},"metadata":{},"sourceType":"module"}