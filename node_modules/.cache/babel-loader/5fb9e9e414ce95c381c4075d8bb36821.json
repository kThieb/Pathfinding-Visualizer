{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavBar.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./NavBar.css\";\nexport const NavBar = props => {\n  return /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"navbar-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, props.children));\n};\nexport const NavChangingButtonItem = props => {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"nav-item \" + props.className + (props.isVisualized ? \" \" + props.visualizedClassName : \"\"),\n    onClick: e => {\n      props.handleClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nconst useOutsideAlerter = ref => {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        alert(\"You clicked outside of me!\");\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n};\n\nexport const NavDropDownItem = props => {\n  const [open, setOpen] = useState(false);\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n\n  const handleWindowClick = e => {\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    console.log(\"opened\");\n    if (open) document.addEventListener(\"blur\", handleWindowClick, true);else document.removeEventListener(\"blur\", handleWindowClick, true);\n  }, [open]);\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"nav-item \" + props.className + \" \" + (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"icon-button\",\n    onClick: () => {\n      if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, props.text), open && props.children);\n};\nexport const DropDownMenu = props => {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\" + (props.left ? \" left\" : \" right\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CSSTransition, {\n    in: activeMenu === \"main\",\n    unmountOnExit: true,\n    timeout: 100,\n    classNames: \"menu-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, props.children));\n};\nexport const DropDownAlgo = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-item\",\n    onClick: e => {\n      props.changeAlgorithm(props.algorithmName);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, props.children);\n};\nexport const DropDownSlider = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, props.text)), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"slider\",\n    type: \"range\",\n    value: props.defaultValue,\n    min: props.minValue.toString(),\n    max: props.maxValue.toString(),\n    step: 0.01,\n    onChange: e => props.handleChangeWallsDensity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavBar.tsx"],"names":["React","useState","useEffect","useRef","CSSTransition","NavBar","props","children","NavChangingButtonItem","className","isVisualized","visualizedClassName","e","handleClick","useOutsideAlerter","ref","handleClickOutside","event","current","contains","target","alert","document","addEventListener","removeEventListener","NavDropDownItem","open","setOpen","wrapperRef","handleWindowClick","console","log","shouldGreyOut","text","DropDownMenu","activeMenu","setActiveMenu","left","DropDownAlgo","changeAlgorithm","algorithmName","DropDownSlider","defaultValue","minValue","toString","maxValue","handleChangeWallsDensity","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./NavBar.css\";\n\nexport const NavBar: React.FC = (props) => {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n};\n\ninterface NavChangingButtonItemProps {\n  isVisualized: boolean;\n  className: string;\n  visualizedClassName: string;\n  handleClick: () => void;\n}\n\nexport const NavChangingButtonItem: React.FC<NavChangingButtonItemProps> = (\n  props\n) => {\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        props.className +\n        (props.isVisualized ? \" \" + props.visualizedClassName : \"\")\n      }\n      onClick={(e) => {\n        props.handleClick();\n      }}\n    >\n      <p>{props.children}</p>\n    </li>\n  );\n};\n\ninterface NavDropDownItemProps {\n  icon: string;\n  text: string;\n  className: string;\n  isVisualized: boolean;\n  shouldGreyOut: boolean;\n}\n\nconst useOutsideAlerter: (ref: any) => void = (ref) => {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        alert(\"You clicked outside of me!\");\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n};\n\nexport const NavDropDownItem: React.FC<NavDropDownItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n\n  const handleWindowClick: (e: any) => void = (e) => {\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    console.log(\"opened\");\n    if (open) document.addEventListener(\"blur\", handleWindowClick, true);\n    else document.removeEventListener(\"blur\", handleWindowClick, true);\n  }, [open]);\n\n  return (\n    <li\n      className={\n        \"nav-item \" +\n        props.className +\n        \" \" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n    >\n      <p\n        className=\"icon-button\"\n        onClick={() => {\n          if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n        }}\n      >\n        {props.text}\n      </p>\n      {open && props.children}\n    </li>\n  );\n};\n\ninterface DropDownMenu {\n  left: boolean;\n}\n\nexport const DropDownMenu: React.FC<DropDownMenu> = (props) => {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  return (\n    <div className={\"dropdown\" + (props.left ? \" left\" : \" right\")}>\n      <CSSTransition\n        in={activeMenu === \"main\"}\n        unmountOnExit\n        timeout={100}\n        classNames=\"menu-primary\"\n      >\n        {props.children}\n      </CSSTransition>\n    </div>\n  );\n};\n\ninterface DropDownAlgoProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  algorithmName: string;\n  changeAlgorithm: (algorithmName: string) => void;\n}\n\nexport const DropDownAlgo: React.FC<DropDownAlgoProps> = (props) => {\n  return (\n    <div\n      className=\"menu-item\"\n      onClick={(e) => {\n        props.changeAlgorithm(props.algorithmName);\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\ninterface DropDownSliderProps {\n  isVisualized: boolean;\n  minValue: number;\n  maxValue: number;\n  defaultValue: number;\n  text: string;\n  handleChangeWallsDensity: (event: any) => void;\n}\n\nexport const DropDownSlider: React.FC<DropDownSliderProps> = (props) => {\n  return (\n    <div className=\"slider-item\">\n      <div>\n        <p>{props.text}</p>\n      </div>\n      <input\n        className=\"slider\"\n        type=\"range\"\n        value={props.defaultValue}\n        min={props.minValue.toString()}\n        max={props.maxValue.toString()}\n        step={0.01}\n        onChange={(e) => props.handleChangeWallsDensity(e.target.value)}\n      ></input>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}