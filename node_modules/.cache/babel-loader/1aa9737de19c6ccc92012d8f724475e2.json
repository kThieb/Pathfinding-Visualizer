{"ast":null,"code":"import { dijkstraHelper } from \"../singleTarget/dijkstra\";\nexport const greedy = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  let currentStartNode = startNode;\n  let allVisitedAndPaths = [];\n\n  while (targetList.length > 0) {\n    let [visited, path, endNode] = dijkstraHelper(grid, pairGrid, mazeGraph, currentStartNode, targetList);\n    targetList = targetList.filter(targetNode => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n\n  return allVisitedAndPaths;\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/multipleTarget/greedy.ts"],"names":["dijkstraHelper","greedy","grid","pairGrid","mazeGraph","startNode","targetList","currentStartNode","allVisitedAndPaths","length","visited","path","endNode","filter","targetNode","push"],"mappings":"AACA,SAASA,cAAT,QAA+B,0BAA/B;AAEA,OAAO,MAAMC,MAMoB,GAAG,CAClCC,IADkC,EAElCC,QAFkC,EAGlCC,SAHkC,EAIlCC,SAJkC,EAKlCC,UALkC,KAM/B;AACH,MAAIC,gBAAsB,GAAGF,SAA7B;AACA,MAAIG,kBAAsC,GAAG,EAA7C;;AACA,SAAOF,UAAU,CAACG,MAAX,GAAoB,CAA3B,EAA8B;AAC5B,QAAI,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,IAA2BZ,cAAc,CAC3CE,IAD2C,EAE3CC,QAF2C,EAG3CC,SAH2C,EAI3CG,gBAJ2C,EAK3CD,UAL2C,CAA7C;AAOAA,IAAAA,UAAU,GAAGA,UAAU,CAACO,MAAX,CAAmBC,UAAD,IAAgBA,UAAU,KAAKF,OAAjD,CAAb;AACAL,IAAAA,gBAAgB,GAAGK,OAAnB;AACAJ,IAAAA,kBAAkB,CAACO,IAAnB,CAAwB,CAACL,OAAD,EAAUC,IAAV,CAAxB;AACD;;AACD,SAAOH,kBAAP;AACD,CA5BM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { dijkstraHelper } from \"../singleTarget/dijkstra\";\n\nexport const greedy: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [[node[], node[]][], number] = (\n  grid,\n  pairGrid,\n  mazeGraph,\n  startNode,\n  targetList\n) => {\n  let currentStartNode: node = startNode;\n  let allVisitedAndPaths: [node[], node[]][] = [];\n  while (targetList.length > 0) {\n    let [visited, path, endNode] = dijkstraHelper(\n      grid,\n      pairGrid,\n      mazeGraph,\n      currentStartNode,\n      targetList\n    );\n    targetList = targetList.filter((targetNode) => targetNode !== endNode);\n    currentStartNode = endNode;\n    allVisitedAndPaths.push([visited, path]);\n  }\n  return allVisitedAndPaths;\n};\n"]},"metadata":{},"sourceType":"module"}