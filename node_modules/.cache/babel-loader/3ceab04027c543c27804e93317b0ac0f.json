{"ast":null,"code":"import { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\nexport const bfs = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode; // Initialize the visited nodes array\n\n  let visited = []; // Initialize the discovered array\n\n  let discovered = [startNode]; // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n\n  let q = [startNode]; // While the queue is not empty\n\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode = ensure(q.shift());\n    if (visited.find(visitedNode => visitedNode === currentNode)) continue; // Put the currentNode node in the visited set\n\n    visited.push(currentNode); // If we found the end node, return the path to it\n\n    if (targetList.find(targetNode => currentNode === targetNode)) {\n      // Retrieve the shortest path\n      targetList = targetList.filter(targetNode => currentNode !== targetNode);\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath];\n    } // iterate through the neighbors of the currentNode node\n\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n      predecessor[nextNode.id] = currentNode; // Add the node to the visited nodes\n\n      discovered.push(nextNode); // Push the next node to the queue\n\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/bfs.ts"],"names":["retrievePath","ensure","bfs","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","predecessor","fill","id","visited","discovered","q","currentNode","shift","find","visitedNode","push","targetNode","filter","shortestPath","neighbor","get","x","y","neighborX","neighborY","discoveredNode","nextNode"],"mappings":"AACA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,OAAO,MAAMC,GAMQ,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,UAAvC,KAAsD;AAC5E,QAAMC,CAAC,GAAGL,IAAI,CAACM,MAAf;AAAA,QACEC,CAAC,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CAD4E,CAI5E;;AACA,QAAME,WAAmB,GAAG,EAA5B;AACAA,EAAAA,WAAW,CAACC,IAAZ,CAAiBN,SAAjB,EAA4B,CAA5B,EAA+BE,CAAC,GAAGE,CAAnC;AACAC,EAAAA,WAAW,CAACL,SAAS,CAACO,EAAX,CAAX,GAA4BP,SAA5B,CAP4E,CAS5E;;AACA,MAAIQ,OAAe,GAAG,EAAtB,CAV4E,CAY5E;;AACA,MAAIC,UAAkB,GAAG,CAACT,SAAD,CAAzB,CAb4E,CAe5E;;AACA,MAAIU,CAAS,GAAG,CAACV,SAAD,CAAhB,CAhB4E,CAkB5E;;AACA,SAAOU,CAAC,CAACP,MAAF,GAAW,CAAlB,EAAqB;AACnB;AACA,QAAIQ,WAAiB,GAAGhB,MAAM,CAACe,CAAC,CAACE,KAAF,EAAD,CAA9B;AAEA,QAAIJ,OAAO,CAACK,IAAR,CAAcC,WAAD,IAAiBA,WAAW,KAAKH,WAA9C,CAAJ,EAAgE,SAJ7C,CAMnB;;AACAH,IAAAA,OAAO,CAACO,IAAR,CAAaJ,WAAb,EAPmB,CASnB;;AACA,QAAIV,UAAU,CAACY,IAAX,CAAiBG,UAAD,IAAgBL,WAAW,KAAKK,UAAhD,CAAJ,EAAiE;AAC/D;AACAf,MAAAA,UAAU,GAAGA,UAAU,CAACgB,MAAX,CACVD,UAAD,IAAgBL,WAAW,KAAKK,UADrB,CAAb;AAGA,YAAME,YAAY,GAAGxB,YAAY,CAACW,WAAD,EAAcL,SAAd,EAAyBW,WAAzB,CAAjC;AACA,aAAO,CAACH,OAAD,EAAUU,YAAV,CAAP;AACD,KAjBkB,CAmBnB;;;AACA,SAAK,MAAMC,QAAX,IAAuBxB,MAAM,CAC3BI,SAAS,CAACqB,GAAV,CAActB,QAAQ,CAACa,WAAW,CAACU,CAAb,CAAR,CAAwBV,WAAW,CAACW,CAApC,CAAd,CAD2B,CAA7B,EAEG;AACD;AACA,UAAIC,SAAiB,GAAGJ,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAxB;AAAA,UACEK,SAAiB,GAAGL,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CADtB;AAGA,UACEI,SAAS,GAAG,CAAZ,IACAA,SAAS,IAAIrB,CADb,IAEAsB,SAAS,GAAG,CAFZ,IAGAA,SAAS,IAAIpB,CAHb,IAIAK,UAAU,CAACI,IAAX,CACGY,cAAD,IAAoBA,cAAc,KAAK5B,IAAI,CAAC0B,SAAD,CAAJ,CAAgBC,SAAhB,CADzC,CALF,EASE,SAdD,CAgBD;;AACA,UAAIE,QAAc,GAAG7B,IAAI,CAAC0B,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CAjBC,CAmBD;;AACAnB,MAAAA,WAAW,CAACqB,QAAQ,CAACnB,EAAV,CAAX,GAA2BI,WAA3B,CApBC,CAsBD;;AACAF,MAAAA,UAAU,CAACM,IAAX,CAAgBW,QAAhB,EAvBC,CAyBD;;AACAhB,MAAAA,CAAC,CAACK,IAAF,CAAOW,QAAP;AACD;AACF;;AAED,SAAO,CAAClB,OAAD,EAAU,EAAV,CAAP;AACD,CA9EM","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { retrievePath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const bfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q: node[] = [startNode];\n\n  // While the queue is not empty\n  while (q.length > 0) {\n    // Get the element in front of the queue\n    let currentNode: node = ensure(q.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (targetList.find((targetNode) => currentNode === targetNode)) {\n      // Retrieve the shortest path\n      targetList = targetList.filter(\n        (targetNode) => currentNode !== targetNode\n      );\n      const shortestPath = retrievePath(predecessor, startNode, currentNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}