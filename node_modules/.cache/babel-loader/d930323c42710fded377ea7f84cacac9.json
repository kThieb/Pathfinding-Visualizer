{"ast":null,"code":"import { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\nexport const dfs = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode; // Initialize the visited nodes array\n\n  let visited = [startNode]; // Initialize the stack\n\n  let stack = [startNode]; // While the stack is not empty\n\n  while (stack.length > 0) {\n    // Get the element in front of the stackueue\n    let currentNode = ensure(stack.pop());\n    if (visited.find(visitedNode => visitedNode === nextNode)) continue; // Put the currentNode node in the visited set\n\n    visited.push(currentNode); // If we found the end node, return the path to it\n\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    } // iterate through the neighbors of the currentNode node\n\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentNode.x][currentNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0],\n          neighborY = neighbor[1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n      predecessor[nextNode.id] = currentNode; // Add the node to the visited nodes\n\n      visited.push(nextNode); // Push the next node to the stack\n\n      stack.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helper_functions/shortestPathAlgorithms/dfs.ts"],"names":["retrievePath","ensure","dfs","grid","pairGrid","mazeGraph","startNode","endNode","m","length","n","predecessor","fill","id","visited","stack","currentNode","pop","find","visitedNode","nextNode","push","shortestPath","neighbor","get","x","y","neighborX","neighborY"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,OAAO,MAAMC,GAMQ,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuCC,OAAvC,KAAmD;AACzE,QAAMC,CAAC,GAAGL,IAAI,CAACM,MAAf;AAAA,QACEC,CAAC,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQM,MADd,CADyE,CAIzE;;AACA,QAAME,WAAmB,GAAG,EAA5B;AACAA,EAAAA,WAAW,CAACC,IAAZ,CAAiBN,SAAjB,EAA4B,CAA5B,EAA+BE,CAAC,GAAGE,CAAnC;AACAC,EAAAA,WAAW,CAACL,SAAS,CAACO,EAAX,CAAX,GAA4BP,SAA5B,CAPyE,CASzE;;AACA,MAAIQ,OAAe,GAAG,CAACR,SAAD,CAAtB,CAVyE,CAYzE;;AACA,MAAIS,KAAa,GAAG,CAACT,SAAD,CAApB,CAbyE,CAezE;;AACA,SAAOS,KAAK,CAACN,MAAN,GAAe,CAAtB,EAAyB;AACvB;AACA,QAAIO,WAAiB,GAAGf,MAAM,CAACc,KAAK,CAACE,GAAN,EAAD,CAA9B;AAEA,QAAIH,OAAO,CAACI,IAAR,CAAcC,WAAD,IAAiBA,WAAW,KAAKC,QAA9C,CAAJ,EAA6D,SAJtC,CAMvB;;AACAN,IAAAA,OAAO,CAACO,IAAR,CAAaL,WAAb,EAPuB,CASvB;;AACA,QAAIA,WAAW,KAAKT,OAApB,EAA6B;AAC3B;AACA,YAAMe,YAAY,GAAGtB,YAAY,CAACW,WAAD,EAAcL,SAAd,EAAyBC,OAAzB,CAAjC;AACA,aAAO,CAACO,OAAD,EAAUQ,YAAV,CAAP;AACD,KAdsB,CAgBvB;;;AACA,SAAK,MAAMC,QAAX,IAAuBtB,MAAM,CAC3BI,SAAS,CAACmB,GAAV,CAAcpB,QAAQ,CAACY,WAAW,CAACS,CAAb,CAAR,CAAwBT,WAAW,CAACU,CAApC,CAAd,CAD2B,CAA7B,EAEG;AACD;AACA,UAAIC,SAAiB,GAAGJ,QAAQ,CAAC,CAAD,CAAhC;AAAA,UACEK,SAAiB,GAAGL,QAAQ,CAAC,CAAD,CAD9B;AAGA,UAAII,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAInB,CAA9B,IAAmCoB,SAAS,GAAG,CAA/C,IAAoDA,SAAS,IAAIlB,CAArE,EACE,SAND,CAQD;;AACA,UAAIU,QAAc,GAAGjB,IAAI,CAACwB,SAAD,CAAJ,CAAgBC,SAAhB,CAArB,CATC,CAWD;;AACAjB,MAAAA,WAAW,CAACS,QAAQ,CAACP,EAAV,CAAX,GAA2BG,WAA3B,CAZC,CAcD;;AACAF,MAAAA,OAAO,CAACO,IAAR,CAAaD,QAAb,EAfC,CAiBD;;AACAL,MAAAA,KAAK,CAACM,IAAN,CAAWD,QAAX;AACD;AACF;;AAED,SAAO,CAACN,OAAD,EAAU,EAAV,CAAP;AACD,CAhEM","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { retrievePath } from \"./retrievePath\";\nimport { ensure } from \"../ensureNotUndefined\";\n\nexport const dfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [number, number][]>,\n  startNode: node,\n  targetNode: node\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, endNode) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  predecessor.fill(startNode, 0, m * n);\n  predecessor[startNode.id] = startNode;\n\n  // Initialize the visited nodes array\n  let visited: node[] = [startNode];\n\n  // Initialize the stack\n  let stack: node[] = [startNode];\n\n  // While the stack is not empty\n  while (stack.length > 0) {\n    // Get the element in front of the stackueue\n    let currentNode: node = ensure(stack.pop());\n\n    if (visited.find((visitedNode) => visitedNode === nextNode)) continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentNode);\n\n    // If we found the end node, return the path to it\n    if (currentNode === endNode) {\n      // Retrieve the shortest path\n      const shortestPath = retrievePath(predecessor, startNode, endNode);\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentNode.x][currentNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0],\n        neighborY: number = neighbor[1];\n\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n)\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentNode;\n\n      // Add the node to the visited nodes\n      visited.push(nextNode);\n\n      // Push the next node to the stack\n      stack.push(nextNode);\n    }\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}