{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Grid/Grid.tsx\";\nimport React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nexport const Grid = ({\n  grid,\n  maze,\n  pairGrid,\n  onMouseDown,\n  onMouseEnter\n}) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, grid.map((row, id) => {\n    let rowLength = row.length;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, row.map((node, index) => /*#__PURE__*/React.createElement(GridNode, {\n      numberOfElementsPerRow: rowLength,\n      key: id + index * rowLength,\n      node: node,\n      neighbors: ensure(maze.get(pairGrid[node.x][node.y])),\n      onMouseDown: onMouseDown,\n      onMouseEnter: onMouseEnter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    })));\n  }));\n}; // This function is there to ensure that a value is not null or undefined\n\nfunction ensure(argument, message = \"This value was promised to be there.\") {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Grid/Grid.tsx"],"names":["React","GridNode","Grid","grid","maze","pairGrid","onMouseDown","onMouseEnter","map","row","id","rowLength","length","node","index","ensure","get","x","y","argument","message","undefined","TypeError"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAO,YAAP;AAYA,OAAO,MAAMC,IAAqB,GAAG,CAAC;AACpCC,EAAAA,IADoC;AAEpCC,EAAAA,IAFoC;AAGpCC,EAAAA,QAHoC;AAIpCC,EAAAA,WAJoC;AAKpCC,EAAAA;AALoC,CAAD,KAM/B;AACJ;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,IAAI,CAACK,GAAL,CAAS,CAACC,GAAD,EAAMC,EAAN,KAAa;AACrB,QAAIC,SAAS,GAAGF,GAAG,CAACG,MAApB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAEF,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,GAAG,CAACD,GAAJ,CAAQ,CAACK,IAAD,EAAOC,KAAP,kBACP,oBAAC,QAAD;AACE,MAAA,sBAAsB,EAAEH,SAD1B;AAEE,MAAA,GAAG,EAAED,EAAE,GAAGI,KAAK,GAAGH,SAFpB;AAGE,MAAA,IAAI,EAAEE,IAHR;AAIE,MAAA,SAAS,EAAEE,MAAM,CAACX,IAAI,CAACY,GAAL,CAASX,QAAQ,CAACQ,IAAI,CAACI,CAAN,CAAR,CAAiBJ,IAAI,CAACK,CAAtB,CAAT,CAAD,CAJnB;AAKE,MAAA,WAAW,EAAEZ,WALf;AAME,MAAA,YAAY,EAAEC,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CADF;AAcD,GAhBA,CADH,CADF;AAqBD,CA7BM,C,CA+BP;;AACA,SAASQ,MAAT,CACEI,QADF,EAEEC,OAAe,GAAG,sCAFpB,EAGK;AACH,MAAID,QAAQ,KAAKE,SAAb,IAA0BF,QAAQ,KAAK,IAA3C,EAAiD;AAC/C,UAAM,IAAIG,SAAJ,CAAcF,OAAd,CAAN;AACD;;AAED,SAAOD,QAAP;AACD","sourcesContent":["import React from \"react\";\nimport { GridNode } from \"../GridNode/GridNode\";\nimport \"./Grid.css\";\nimport { node } from \"../helperFunctions/usefulInterfaces\";\n\ninterface Props {\n  grid: node[][];\n  maze: Map<[number, number], [[number, number], number][]>;\n  pairGrid: [number, number][][];\n  startNode: [number, number];\n  onMouseDown: (x: number, y: number) => () => void;\n  onMouseEnter: (x: number, y: number) => () => void;\n}\n\nexport const Grid: React.FC<Props> = ({\n  grid,\n  maze,\n  pairGrid,\n  onMouseDown,\n  onMouseEnter,\n}) => {\n  // Renders the grid in the DOM thanks to the grid state in the App component\n  return (\n    <div className=\"grid\">\n      {grid.map((row, id) => {\n        let rowLength = row.length;\n        return (\n          <div className=\"row\" key={id}>\n            {row.map((node, index) => (\n              <GridNode\n                numberOfElementsPerRow={rowLength}\n                key={id + index * rowLength}\n                node={node}\n                neighbors={ensure(maze.get(pairGrid[node.x][node.y]))}\n                onMouseDown={onMouseDown}\n                onMouseEnter={onMouseEnter}\n              ></GridNode>\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// This function is there to ensure that a value is not null or undefined\nfunction ensure<T>(\n  argument: T | undefined | null,\n  message: string = \"This value was promised to be there.\"\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message);\n  }\n\n  return argument;\n}\n"]},"metadata":{},"sourceType":"module"}