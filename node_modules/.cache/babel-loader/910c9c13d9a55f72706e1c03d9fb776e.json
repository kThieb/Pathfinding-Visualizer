{"ast":null,"code":"import { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\nexport const twoEndedBfs = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n        n = grid[0].length; // Initialize the predecessor array\n\n  const predecessor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n\n  predecessor[startNode.id] = startNode;\n  const successor = [];\n\n  for (let i = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n\n  successor[targetList[0].id] = targetList[0]; // Initialize the visited nodes array\n\n  let visited = []; // Initialize the discovered array\n\n  let discovered = [startNode]; // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n\n  let q_forward = [startNode];\n  let q_backward = [targetList[0]]; // While the queue is not empty\n\n  while (q_forward.length > 0 || q_backward.length > 0) {\n    // Get the element in front of the queue\n    let currentForwardNode = ensure(q_forward.shift());\n    if (visited.find(visitedNode => visitedNode === currentForwardNode)) continue; // Put the currentNode node in the visited set\n\n    visited.push(currentForwardNode); // If we found the end node, return the path to it\n\n    if (visited.find(targetNode => currentForwardNode === targetNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(predecessor, successor, currentForwardNode, startNode, targetList[0]);\n      return [visited, shortestPath];\n    } // iterate through the neighbors of the currentNode node\n\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentForwardNode.x][currentForwardNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n      predecessor[nextNode.id] = currentForwardNode; // Add the node to the visited nodes\n\n      discovered.push(nextNode); // Push the next node to the queue\n\n      q_forward.push(nextNode);\n    } // Get the element in front of the queue\n\n\n    let currentBackwardNode = ensure(q_backward.shift());\n    if (visited.find(visitedNode => visitedNode === currentBackwardNode)) continue; // Put the currentNode node in the visited set\n\n    visited.push(currentBackwardNode);\n\n    if (visited.find(targetNode => currentBackwardNode === targetNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(predecessor, successor, currentForwardNode, startNode, targetList[0]);\n      return [visited, shortestPath];\n    } // iterate through the neighbors of the currentNode node\n\n\n    for (const neighbor of ensure(mazeGraph.get(pairGrid[currentBackwardNode.x][currentBackwardNode.y]))) {\n      // Get the coordinates of the neighbor node\n      let neighborX = neighbor[0][0],\n          neighborY = neighbor[0][1];\n      if (neighborX < 0 || neighborX >= m || neighborY < 0 || neighborY >= n || discovered.find(discoveredNode => discoveredNode === grid[neighborX][neighborY])) continue; // Get the node in the grid\n\n      let nextNode = grid[neighborX][neighborY]; // update the predecessor array\n\n      successor[nextNode.id] = currentBackwardNode; // Add the node to the visited nodes\n\n      discovered.push(nextNode); // Push the next node to the queue\n\n      q_backward.push(nextNode);\n    }\n\n    console.log(q_forward);\n  }\n\n  return [visited, []];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/singleTarget/twoEndedBfs.ts"],"names":["retrieveTwoEndedPath","ensure","twoEndedBfs","grid","pairGrid","mazeGraph","startNode","targetList","m","length","n","predecessor","i","push","id","successor","visited","discovered","q_forward","q_backward","currentForwardNode","shift","find","visitedNode","targetNode","shortestPath","neighbor","get","x","y","neighborX","neighborY","discoveredNode","nextNode","currentBackwardNode","console","log"],"mappings":"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","sourcesContent":["import { node } from \"../../usefulInterfaces\";\nimport { retrieveTwoEndedPath } from \"../retrievePath\";\nimport { ensure } from \"../../ensureNotUndefined\";\n\nexport const twoEndedBfs: (\n  grid: node[][],\n  pairGrid: [number, number][][],\n  mazeGraph: Map<[number, number], [[number, number], number][]>,\n  startNode: node,\n  targetList: node[]\n) => [node[], node[]] = (grid, pairGrid, mazeGraph, startNode, targetList) => {\n  const m = grid.length,\n    n = grid[0].length;\n\n  // Initialize the predecessor array\n  const predecessor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    predecessor.push(startNode);\n  }\n  predecessor[startNode.id] = startNode;\n\n  const successor: node[] = [];\n  for (let i: number = 0; i < m * n; i++) {\n    successor.push(targetList[0]);\n  }\n  successor[targetList[0].id] = targetList[0];\n\n  // Initialize the visited nodes array\n  let visited: node[] = [];\n\n  // Initialize the discovered array\n  let discovered: node[] = [startNode];\n\n  // Initialize the Queue TODO: IMPLEMENT A BETTER VERSION OF THE QUEUE WITH O(1) OPERATIONS\n  let q_forward: node[] = [startNode];\n\n  let q_backward: node[] = [targetList[0]];\n\n  // While the queue is not empty\n  while (q_forward.length > 0 || q_backward.length > 0) {\n    // Get the element in front of the queue\n    let currentForwardNode: node = ensure(q_forward.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentForwardNode))\n      continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentForwardNode);\n\n    // If we found the end node, return the path to it\n    if (visited.find((targetNode) => currentForwardNode === targetNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(\n        predecessor,\n        successor,\n        currentForwardNode,\n        startNode,\n        targetList[0]\n      );\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentForwardNode.x][currentForwardNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      predecessor[nextNode.id] = currentForwardNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q_forward.push(nextNode);\n    }\n\n    // Get the element in front of the queue\n    let currentBackwardNode: node = ensure(q_backward.shift());\n\n    if (visited.find((visitedNode) => visitedNode === currentBackwardNode))\n      continue;\n\n    // Put the currentNode node in the visited set\n    visited.push(currentBackwardNode);\n\n    if (visited.find((targetNode) => currentBackwardNode === targetNode)) {\n      // Retrieve the shortest path\n      const shortestPath = retrieveTwoEndedPath(\n        predecessor,\n        successor,\n        currentForwardNode,\n        startNode,\n        targetList[0]\n      );\n      return [visited, shortestPath];\n    }\n\n    // iterate through the neighbors of the currentNode node\n    for (const neighbor of ensure(\n      mazeGraph.get(pairGrid[currentBackwardNode.x][currentBackwardNode.y])\n    )) {\n      // Get the coordinates of the neighbor node\n      let neighborX: number = neighbor[0][0],\n        neighborY: number = neighbor[0][1];\n\n      if (\n        neighborX < 0 ||\n        neighborX >= m ||\n        neighborY < 0 ||\n        neighborY >= n ||\n        discovered.find(\n          (discoveredNode) => discoveredNode === grid[neighborX][neighborY]\n        )\n      )\n        continue;\n\n      // Get the node in the grid\n      let nextNode: node = grid[neighborX][neighborY];\n\n      // update the predecessor array\n      successor[nextNode.id] = currentBackwardNode;\n\n      // Add the node to the visited nodes\n      discovered.push(nextNode);\n\n      // Push the next node to the queue\n      q_backward.push(nextNode);\n    }\n    console.log(q_forward);\n  }\n\n  return [visited, []];\n};\n"]},"metadata":{},"sourceType":"module"}