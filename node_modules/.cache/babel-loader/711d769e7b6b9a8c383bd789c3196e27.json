{"ast":null,"code":"// This function (Not a React Component!) is made to initialize the grid rendered in the App component.\nexport const constructGrid = (numberOfRow, numberOfColumn, startNode, endNode, numberOfTargets) => {\n  let result = [];\n\n  for (let i = 0; i < numberOfColumn; i++) {\n    let currentRow = [];\n\n    for (let j = 0; j < numberOfRow; j++) {\n      let currentNode = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\"\n      };\n      currentRow.push(currentNode);\n    }\n\n    result.push(currentRow);\n  }\n\n  result[startNode[0]][startNode[1]].isStart = true;\n  result[endNode[0]][endNode[1]].hasCheese = true;\n  let targetList = [result[endNode[0]][endNode[1]]];\n  if (numberOfTargets >= 1) [result, targetList] = piecesOfCheese(result, startNode, endNode, numberOfTargets);\n  return [result, result[startNode[0]][startNode[1]], targetList];\n};\nexport const reconstructGrid = (numberOfRow, numberOfColumn, startNode, targetList) => {\n  let result = [];\n\n  for (let i = 0; i < numberOfColumn; i++) {\n    let currentRow = [];\n\n    for (let j = 0; j < numberOfRow; j++) {\n      let currentNode = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: targetList.find(targetNode => targetNode.x === i && targetNode.y === j) ? true : false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\"\n      };\n      currentRow.push(currentNode);\n    }\n\n    result.push(currentRow);\n  }\n\n  result[startNode[0]][startNode[1]].isStart = true;\n  let newTargetList = targetList.map(targetNode => result[targetNode.x][targetNode.y]);\n  return [result, result[startNode[0]][startNode[1]], newTargetList];\n};\n\nconst piecesOfCheese = (grid, startNode, endNode, cheeseNum) => {\n  const n = grid.length,\n        m = grid[0].length;\n  const targetList = [grid[endNode[0]][endNode[1]]];\n  let visited = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    visited[i] = new Array(m);\n  }\n\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0; j < m; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode[0]][startNode[1]] = true;\n  visited[endNode[0]][endNode[1]] = true;\n\n  for (let k = 0; k < cheeseNum; k++) {\n    let i = -1,\n        j = -1;\n\n    do {\n      i = Math.floor(Math.random() * n);\n      j = Math.floor(Math.random() * m);\n    } while (visited[i][j]);\n\n    visited[i][j] = true;\n    grid[i][j].hasCheese = true;\n    targetList.push(grid[i][j]);\n  }\n\n  return [grid, targetList];\n};\n\nexport const addPiecesOfCheese = (numberOfRows, numberOfColumn, startNode, oldTargetList, cheeseToAdd) => {\n  // let targetList: node[] = [];\n  while (cheeseToAdd < 0) {\n    let randIndex = Math.floor(Math.random() * oldTargetList.length);\n    oldTargetList = oldTargetList.filter((targetNode, index) => index !== randIndex);\n    cheeseToAdd++;\n  }\n\n  const [newGrid, newStartNode, targetList] = reconstructGrid(numberOfRows, numberOfColumn, [startNode.x, startNode.y], oldTargetList);\n  let visited = new Array(numberOfColumn);\n\n  for (let i = 0; i < numberOfColumn; ++i) {\n    visited[i] = new Array(numberOfRows);\n  }\n\n  for (let i = 0; i < numberOfColumn; ++i) {\n    for (let j = 0; j < numberOfRows; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode.x][startNode.y] = true;\n  targetList.forEach(targetNode => {\n    visited[targetNode.x][targetNode.y] = true;\n  });\n\n  for (let k = 0; k < cheeseToAdd; k++) {\n    let i = -1,\n        j = -1;\n\n    do {\n      i = Math.floor(Math.random() * numberOfColumn);\n      j = Math.floor(Math.random() * numberOfRows);\n    } while (visited[i][j]);\n\n    visited[i][j] = true;\n    newGrid[i][j].hasCheese = true;\n    targetList.push(newGrid[i][j]);\n  }\n\n  return [newGrid, newStartNode, targetList];\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/constructGrid.ts"],"names":["constructGrid","numberOfRow","numberOfColumn","startNode","endNode","numberOfTargets","result","i","currentRow","j","currentNode","id","x","y","isStart","hasCheese","isVisited","isShortestPath","successorPosition","push","targetList","piecesOfCheese","reconstructGrid","find","targetNode","newTargetList","map","grid","cheeseNum","n","length","m","visited","Array","k","Math","floor","random","addPiecesOfCheese","numberOfRows","oldTargetList","cheeseToAdd","randIndex","filter","index","newGrid","newStartNode","forEach"],"mappings":"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","sourcesContent":["import { node } from \"./usefulInterfaces\";\n\n// This function (Not a React Component!) is made to initialize the grid rendered in the App component.\nexport const constructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  endNode: [number, number],\n  numberOfTargets: number\n) => [node[][], node, node[]] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  endNode,\n  numberOfTargets\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\",\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  result[endNode[0]][endNode[1]].hasCheese = true;\n  let targetList: node[] = [result[endNode[0]][endNode[1]]];\n  if (numberOfTargets >= 1)\n    [result, targetList] = piecesOfCheese(\n      result,\n      startNode,\n      endNode,\n      numberOfTargets\n    );\n  return [result, result[startNode[0]][startNode[1]], targetList];\n};\n\nexport const reconstructGrid: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: [number, number],\n  targetList: node[]\n) => [node[][], node, node[]] = (\n  numberOfRow,\n  numberOfColumn,\n  startNode,\n  targetList\n) => {\n  let result: node[][] = [];\n  for (let i: number = 0; i < numberOfColumn; i++) {\n    let currentRow: node[] = [];\n    for (let j: number = 0; j < numberOfRow; j++) {\n      let currentNode: node = {\n        id: i + j * numberOfColumn,\n        x: i,\n        y: j,\n        isStart: false,\n        hasCheese: targetList.find(\n          (targetNode) => targetNode.x === i && targetNode.y === j\n        )\n          ? true\n          : false,\n        isVisited: false,\n        isShortestPath: false,\n        successorPosition: \"\",\n      };\n      currentRow.push(currentNode);\n    }\n    result.push(currentRow);\n  }\n  result[startNode[0]][startNode[1]].isStart = true;\n  let newTargetList: node[] = targetList.map(\n    (targetNode) => result[targetNode.x][targetNode.y]\n  );\n  return [result, result[startNode[0]][startNode[1]], newTargetList];\n};\n\nconst piecesOfCheese: (\n  grid: node[][],\n  startNode: [number, number],\n  endNode: [number, number],\n  cheeseNum: number\n) => [node[][], node[]] = (grid, startNode, endNode, cheeseNum) => {\n  const n: number = grid.length,\n    m: number = grid[0].length;\n  const targetList: node[] = [grid[endNode[0]][endNode[1]]];\n  let visited: boolean[][] = new Array(n);\n  for (let i: number = 0; i < n; ++i) {\n    visited[i] = new Array(m);\n  }\n  for (let i: number = 0; i < n; ++i) {\n    for (let j: number = 0; j < m; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode[0]][startNode[1]] = true;\n  visited[endNode[0]][endNode[1]] = true;\n  for (let k: number = 0; k < cheeseNum; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * n);\n      j = Math.floor(Math.random() * m);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    grid[i][j].hasCheese = true;\n    targetList.push(grid[i][j]);\n  }\n  return [grid, targetList];\n};\n\nexport const addPiecesOfCheese: (\n  numberOfRows: number,\n  numberOfColumn: number,\n  startNode: node,\n  oldTargetList: node[],\n  cheeseToAdd: number\n) => [node[][], node, node[]] = (\n  numberOfRows,\n  numberOfColumn,\n  startNode,\n  oldTargetList,\n  cheeseToAdd\n) => {\n  // let targetList: node[] = [];\n  while (cheeseToAdd < 0) {\n    let randIndex: number = Math.floor(Math.random() * oldTargetList.length);\n    oldTargetList = oldTargetList.filter(\n      (targetNode, index) => index !== randIndex\n    );\n    cheeseToAdd++;\n  }\n\n  const [newGrid, newStartNode, targetList] = reconstructGrid(\n    numberOfRows,\n    numberOfColumn,\n    [startNode.x, startNode.y],\n    oldTargetList\n  );\n\n  let visited: boolean[][] = new Array(numberOfColumn);\n  for (let i: number = 0; i < numberOfColumn; ++i) {\n    visited[i] = new Array(numberOfRows);\n  }\n  for (let i: number = 0; i < numberOfColumn; ++i) {\n    for (let j: number = 0; j < numberOfRows; ++j) {\n      visited[i][j] = false;\n    }\n  }\n\n  visited[startNode.x][startNode.y] = true;\n  targetList.forEach((targetNode) => {\n    visited[targetNode.x][targetNode.y] = true;\n  });\n  for (let k: number = 0; k < cheeseToAdd; k++) {\n    let i = -1,\n      j = -1;\n    do {\n      i = Math.floor(Math.random() * numberOfColumn);\n      j = Math.floor(Math.random() * numberOfRows);\n    } while (visited[i][j]);\n    visited[i][j] = true;\n    newGrid[i][j].hasCheese = true;\n    targetList.push(newGrid[i][j]);\n  }\n  return [newGrid, newStartNode, targetList];\n};\n"]},"metadata":{},"sourceType":"module"}