{"ast":null,"code":"import { dfs } from \"./singleTarget/dfs\";\nimport { bfs } from \"./singleTarget/bfs\";\nimport { dijkstra } from \"./singleTarget/dijkstra\";\nimport { aStar } from \"./singleTarget/aStar\";\nimport { greedy } from \"./multipleTarget/greedy\";\nimport { bruteForceTSP } from \"./multipleTarget/bruteForce\";\nimport { twoEndedBfs } from \"./singleTarget/twoEndedBfs\";\nexport const singleTargetAlgorithms = {\n  \"Depth First Search\": dfs,\n  \"Breadth First Search\": bfs,\n  \"Dijkstra's algorithm\": dijkstra,\n  \"A* algorithm\": aStar,\n  \"Meet in the Middle BFS\": twoEndedBfs\n};\nexport const multipleTargetsAlgorithms = {\n  \"Nearest Neighbors Heuristic\": greedy,\n  \"Brute Force Algorithm\": bruteForceTSP\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/helperFunctions/shortestPathAlgorithms/allAlgorithms.ts"],"names":["dfs","bfs","dijkstra","aStar","greedy","bruteForceTSP","twoEndedBfs","singleTargetAlgorithms","multipleTargetsAlgorithms"],"mappings":"AACA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,OAAO,MAAMC,sBAQZ,GAAG;AACF,wBAAsBP,GADpB;AAEF,0BAAwBC,GAFtB;AAGF,0BAAwBC,QAHtB;AAIF,kBAAgBC,KAJd;AAKF,4BAA0BG;AALxB,CARG;AAgBP,OAAO,MAAME,yBAQZ,GAAG;AACF,iCAA+BJ,MAD7B;AAEF,2BAAyBC;AAFvB,CARG","sourcesContent":["import { node } from \"../usefulInterfaces\";\nimport { dfs } from \"./singleTarget/dfs\";\nimport { bfs } from \"./singleTarget/bfs\";\nimport { dijkstra } from \"./singleTarget/dijkstra\";\nimport { aStar } from \"./singleTarget/aStar\";\nimport { greedy } from \"./multipleTarget/greedy\";\nimport { bruteForceTSP } from \"./multipleTarget/bruteForce\";\nimport { twoEndedBfs } from \"./singleTarget/twoEndedBfs\";\n\nexport const singleTargetAlgorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    targetList: node[]\n  ) => [[node[], node[]], number];\n} = {\n  \"Depth First Search\": dfs,\n  \"Breadth First Search\": bfs,\n  \"Dijkstra's algorithm\": dijkstra,\n  \"A* algorithm\": aStar,\n  \"Meet in the Middle BFS\": twoEndedBfs,\n};\n\nexport const multipleTargetsAlgorithms: {\n  [key: string]: (\n    grid: node[][],\n    pairGrid: [number, number][][],\n    mazeGraph: Map<[number, number], [[number, number], number][]>,\n    startNode: node,\n    targetList: node[]\n  ) => [[node[], node[]][], number];\n} = {\n  \"Nearest Neighbors Heuristic\": greedy,\n  \"Brute Force Algorithm\": bruteForceTSP,\n};\n"]},"metadata":{},"sourceType":"module"}