{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Tutorial/Tutorial.tsx\";\nimport React, { useState } from \"react\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport \"./Tutorial.css\";\nexport const Tutorial = props => {\n  const [activePage, setActivePage] = useState(\"first-page\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tutorial-panel \" + (props.showTutorial ? \"\" : \"hide\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"first-page\",\n    unmountOnExit: true,\n    appear: true,\n    timeout: 500,\n    classNames: \"page-container\",\n    divClassName: \"first-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: false,\n    rightButton: true,\n    rightOnClick: () => setActivePage(\"second-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, \"Welcome to the \\\"Rat in a maze\\\" Pathfinding Visualizing tool!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"emoji-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"rat\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDC00\"), /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"cheese\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDC0\")), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"This is a tool I built to learn more about graph algorithm, and particularly Pathfinding Algorithms. There are some cool features implemented.\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"how-to-dismiss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"You can skip this tutorial by clicking on \\\"Dismiss\\\". You can reopen this tutorial by click on the \\\"i\\\" button on the top-right corner of the grid.\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img\",\n    alt: \"bouton informations\",\n    src: require(\"./imagesAndGifs/infoButton.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"So without further ado, let's see how it works!\"))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"second-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"second-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"first-page\"),\n    rightOnClick: () => setActivePage(\"third-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"The Maze\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"The maze is composed of squares. Each square is linked to the adjacent squares (left, right, top and bottom). The rat in the maze is hungry, and it wants to eat all the cheese there is! To do that it need to move in the maze. Each move costs 1 point of energy. The goal of the rat is to minimize the energy points it will use to eat all the cheese. But the maze is full of obstacles!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"The first obstacles are the walls, represented by the thin black lines. The rat cannot go through these.\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/wall.png\"),\n    alt: \"The walls of the maze\",\n    className: \"img img-wall\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"The second obstacles are the mud. The mud is different from the walls: the rat can go through the mud but it will cost more energy than moving through nothing. A normal move costs 1 energy point, a move through the mud costs 4 energy points. This is what I call the \\\"mud weight\\\".\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/mud.png\"),\n    alt: \"The light brown mud in the maze\",\n    className: \"img img-mud\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"third-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"third-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"second-page\"),\n    rightOnClick: () => setActivePage(\"fourth-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"The Algorithms\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"To help the rat find its way through the maze you will have to run some algorithms, and visualize them.\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, \"For a single cheese (or target), there are 2 types of algorithms:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"The algorithms for unweighted graphs, which will find a way to the cheese while ignoring the added cost of going through mud (these will not guarantee the shortest path),\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, \"And the algorithms for weighted graphs, which will take into account the added cost of going through mud. In this tool, the algorithms implemented will always find the shortest path between the rat and the cheese (or the path of lowest energy cost).\"))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"In the case where there are several cheeses, there are 2 possible algorithms in this tool:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, \"The brute force algorithm, that will find the optimal solution, at the cost of a lot of computations,\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, \"And the nearest neighbors heuristic algorithm which will find a solution a lot faster, but the solution may not be optimal.\"))))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"fourth-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"fourth-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"third-page\"),\n    rightOnClick: () => setActivePage(\"fifth-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Choosing the Algorithm\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, \"You can enable multiple targets in the maze by clicking on the button on the top-right corner, and then choose the number of targets.\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/enableMultipleTargets.gif\"),\n    alt: \"enable multiple targets button\",\n    className: \"gif gif-multiple-targets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, \"You can choose which algorithm you want to run on the dropdown menu labeled \\\"Algorithms\\\".\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/chooseAlgorithm.gif\"),\n    alt: \"The dropdown menu of the algorithms\",\n    className: \"gif gif-choose-algorithm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, \"Then you can run the visualization with the light blue \\\"Visualize\\\" button!\"))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"fifth-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"fifth-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"fourth-page\"),\n    rightOnClick: () => setActivePage(\"sixth-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, \"Maze Generator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, \"You can choose different options regarding the maze in the dropdown menu labeled \\\"Maze Options\\\". You can also choose to hide the \\\"mud weight\\\" if you want. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 34\n    }\n  }), \"Then you can generate a new maze with the changed values with the \\\"Generate Maze button\\\".\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/mazeOptions.gif\"),\n    alt: \"The dropdown menu of maze options\",\n    className: \"gif gif-maze-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"sixth-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"sixth-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: true,\n    leftOnClick: () => setActivePage(\"fifth-page\"),\n    rightOnClick: () => setActivePage(\"seventh-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, \"The Rat and the cheeses\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, \"The last thing you need to know is that you can move the rat and the cheese around before visualizing an algorithm! You have to click on the rat and hold down the mouse button while moving, and releasing the mouse button on the square you want the rat to be on (this is essentially like a drag and drop action). The same thing works on the cheeses too!\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/dragAndDrop.gif\"),\n    alt: \"Demonstration of the drag and drop\",\n    className: \"gif gif-drag-and-drop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(WrapperCSSTransition, {\n    in: activePage === \"seventh-page\",\n    unmountOnExit: true,\n    timeout: 750,\n    classNames: \"page-container\",\n    divClassName: \"seventh-page page\",\n    handleEnter: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    leftButton: true,\n    rightButton: false,\n    leftOnClick: () => setActivePage(\"sixth-page\"),\n    handleDismiss: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"big-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, \"Have fun using this tool!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"emoji-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"rat\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, \"\\uD83D\\uDC00\"), /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"cheese\",\n    className: \"tutorial-emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDC0\")), /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"./imagesAndGifs/haveFunVisualizing.gif\"),\n    alt: \"Have fun!\",\n    className: \"gif gif-have-fun\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst Page = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-interieur\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }\n  }, props.children), props.leftButton && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button button-prev\",\n    onClick: props.leftOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }, \"<\", \" Previous\"), props.rightButton && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button button-next\",\n    onClick: props.rightOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, \"Next \", \">\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button dismiss-button\",\n    onClick: props.handleDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }\n  }, \"Dismiss\"));\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/Tutorial/Tutorial.tsx"],"names":["React","useState","WrapperCSSTransition","Tutorial","props","activePage","setActivePage","showTutorial","handleDismiss","require","Page","children","leftButton","leftOnClick","rightButton","rightOnClick"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { WrapperCSSTransition } from \"../Wrapper/Wrapper\";\nimport \"./Tutorial.css\";\n\ninterface TutorialProps {\n  handleDismiss: () => void;\n  showTutorial: boolean;\n}\n\nexport const Tutorial: React.FC<TutorialProps> = (props) => {\n  const [activePage, setActivePage] = useState(\"first-page\");\n  return (\n    <div className={\"tutorial-panel \" + (props.showTutorial ? \"\" : \"hide\")}>\n      <WrapperCSSTransition\n        in={activePage === \"first-page\"}\n        unmountOnExit\n        appear\n        timeout={500}\n        classNames=\"page-container\"\n        divClassName={\"first-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton={false}\n          rightButton={true}\n          rightOnClick={() => setActivePage(\"second-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">\n            Welcome to the \"Rat in a maze\" Pathfinding Visualizing tool!\n          </h1>\n          <div className=\"emoji-container\">\n            <span role=\"img\" aria-label=\"rat\" className=\"tutorial-emoji\">\n              🐀\n            </span>\n            <span role=\"img\" aria-label=\"cheese\" className=\"tutorial-emoji\">\n              🧀\n            </span>\n          </div>\n\n          <h3 className=\"text\">\n            This is a tool I built to learn more about graph algorithm, and\n            particularly Pathfinding Algorithms. There are some cool features\n            implemented.\n          </h3>\n          <span className=\"how-to-dismiss\">\n            <h3>\n              You can skip this tutorial by clicking on \"Dismiss\". You can\n              reopen this tutorial by click on the \"i\" button on the top-right\n              corner of the grid.\n            </h3>\n            <img\n              className=\"img\"\n              alt=\"bouton informations\"\n              src={require(\"./imagesAndGifs/infoButton.png\")}\n            ></img>\n          </span>\n          <h2>So without further ado, let's see how it works!</h2>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"second-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"second-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"first-page\")}\n          rightOnClick={() => setActivePage(\"third-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">The Maze</h1>\n\n          <h3 className=\"text\">\n            The maze is composed of squares. Each square is linked to the\n            adjacent squares (left, right, top and bottom). The rat in the maze\n            is hungry, and it wants to eat all the cheese there is! To do that\n            it need to move in the maze. Each move costs 1 point of energy. The\n            goal of the rat is to minimize the energy points it will use to eat\n            all the cheese. But the maze is full of obstacles!\n          </h3>\n          <h3>\n            The first obstacles are the walls, represented by the thin black\n            lines. The rat cannot go through these.\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/wall.png\")}\n            alt=\"The walls of the maze\"\n            className=\"img img-wall\"\n          ></img>\n          <h3>\n            The second obstacles are the mud. The mud is different from the\n            walls: the rat can go through the mud but it will cost more energy\n            than moving through nothing. A normal move costs 1 energy point, a\n            move through the mud costs 4 energy points. This is what I call the\n            \"mud weight\".\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/mud.png\")}\n            alt=\"The light brown mud in the maze\"\n            className=\"img img-mud\"\n          ></img>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"third-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"third-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"second-page\")}\n          rightOnClick={() => setActivePage(\"fourth-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">The Algorithms</h1>\n          <h3>\n            To help the rat find its way through the maze you will have to run\n            some algorithms, and visualize them.\n          </h3>\n          <h3>\n            For a single cheese (or target), there are 2 types of algorithms:\n          </h3>\n          <ul>\n            <li>\n              <h3>\n                The algorithms for unweighted graphs, which will find a way to\n                the cheese while ignoring the added cost of going through mud\n                (these will not guarantee the shortest path),\n              </h3>\n            </li>\n            <li>\n              <h3>\n                And the algorithms for weighted graphs, which will take into\n                account the added cost of going through mud. In this tool, the\n                algorithms implemented will always find the shortest path\n                between the rat and the cheese (or the path of lowest energy\n                cost).\n              </h3>\n            </li>\n          </ul>\n\n          <h3>\n            In the case where there are several cheeses, there are 2 possible\n            algorithms in this tool:\n          </h3>\n          <ul>\n            <li>\n              <h3>\n                The brute force algorithm, that will find the optimal solution,\n                at the cost of a lot of computations,\n              </h3>\n            </li>\n            <li>\n              <h3>\n                And the nearest neighbors heuristic algorithm which will find a\n                solution a lot faster, but the solution may not be optimal.\n              </h3>\n            </li>\n          </ul>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"fourth-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"fourth-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"third-page\")}\n          rightOnClick={() => setActivePage(\"fifth-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">Choosing the Algorithm</h1>\n\n          <h3 className=\"text\">\n            You can enable multiple targets in the maze by clicking on the\n            button on the top-right corner, and then choose the number of\n            targets.\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/enableMultipleTargets.gif\")}\n            alt=\"enable multiple targets button\"\n            className=\"gif gif-multiple-targets\"\n          ></img>\n          <h3>\n            You can choose which algorithm you want to run on the dropdown menu\n            labeled \"Algorithms\".\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/chooseAlgorithm.gif\")}\n            alt=\"The dropdown menu of the algorithms\"\n            className=\"gif gif-choose-algorithm\"\n          ></img>\n          <h3>\n            Then you can run the visualization with the light blue \"Visualize\"\n            button!\n          </h3>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"fifth-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"fifth-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"fourth-page\")}\n          rightOnClick={() => setActivePage(\"sixth-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">Maze Generator</h1>\n\n          <h3 className=\"text\">\n            You can choose different options regarding the maze in the dropdown\n            menu labeled \"Maze Options\". You can also choose to hide the \"mud\n            weight\" if you want. <br />\n            Then you can generate a new maze with the changed values with the\n            \"Generate Maze button\".\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/mazeOptions.gif\")}\n            alt=\"The dropdown menu of maze options\"\n            className=\"gif gif-maze-options\"\n          ></img>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"sixth-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"sixth-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton\n          leftOnClick={() => setActivePage(\"fifth-page\")}\n          rightOnClick={() => setActivePage(\"seventh-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">The Rat and the cheeses</h1>\n\n          <h3 className=\"text\">\n            The last thing you need to know is that you can move the rat and the\n            cheese around before visualizing an algorithm! You have to click on\n            the rat and hold down the mouse button while moving, and releasing\n            the mouse button on the square you want the rat to be on (this is\n            essentially like a drag and drop action). The same thing works on\n            the cheeses too!\n          </h3>\n          <img\n            src={require(\"./imagesAndGifs/dragAndDrop.gif\")}\n            alt=\"Demonstration of the drag and drop\"\n            className=\"gif gif-drag-and-drop\"\n          ></img>\n        </Page>\n      </WrapperCSSTransition>\n      <WrapperCSSTransition\n        in={activePage === \"seventh-page\"}\n        unmountOnExit\n        timeout={750}\n        classNames=\"page-container\"\n        divClassName={\"seventh-page page\"}\n        handleEnter={() => {}}\n      >\n        <Page\n          leftButton\n          rightButton={false}\n          leftOnClick={() => setActivePage(\"sixth-page\")}\n          handleDismiss={props.handleDismiss}\n        >\n          <h1 className=\"big-title\">Have fun using this tool!</h1>\n          <div className=\"emoji-container\">\n            <span role=\"img\" aria-label=\"rat\" className=\"tutorial-emoji\">\n              🐀\n            </span>\n            <span role=\"img\" aria-label=\"cheese\" className=\"tutorial-emoji\">\n              🧀\n            </span>\n          </div>\n\n          <img\n            src={require(\"./imagesAndGifs/haveFunVisualizing.gif\")}\n            alt=\"Have fun!\"\n            className=\"gif gif-have-fun\"\n          ></img>\n        </Page>\n      </WrapperCSSTransition>\n    </div>\n  );\n};\n\ninterface PageProps {\n  leftButton: boolean;\n  rightButton: boolean;\n  leftOnClick?: () => void;\n  rightOnClick?: () => void;\n  handleDismiss: () => void;\n}\n\nconst Page: React.FC<PageProps> = (props) => {\n  return (\n    <div className=\"page-interieur\">\n      <div className=\"content\">{props.children}</div>\n      {props.leftButton && (\n        <button className=\"button button-prev\" onClick={props.leftOnClick}>\n          {\"<\"} Previous\n        </button>\n      )}\n      {props.rightButton && (\n        <button className=\"button button-next\" onClick={props.rightOnClick}>\n          Next {\">\"}\n        </button>\n      )}\n      <button className=\"button dismiss-button\" onClick={props.handleDismiss}>\n        Dismiss\n      </button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}