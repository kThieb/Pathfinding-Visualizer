{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavItem.tsx\";\nimport React, { useState } from \"react\";\nimport \"./NavBar.css\";\nexport const NavItem = props => {\n  const [open, setOpen] = useState(false);\n\n  const handleClick = event => {\n    if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    document.addEventListener(\"click\", e => {\n      const dropDownMenu = document.getElementById(props.id);\n      let targetElement = e.target;\n\n      do {\n        if (targetElement === dropDownMenu) return;\n        targetElement = targetElement.parentNode;\n      } while (targetElement);\n\n      setOpen(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    id: props.id,\n    className: \"nav-item\" + (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"icon-button\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, props.text), open && props.children);\n};","map":{"version":3,"sources":["/home/kevin/Documents/Projects/Simple-Visualizer/pathfinding-visualizer/src/NavBar/NavItem.tsx"],"names":["React","useState","NavItem","props","open","setOpen","handleClick","event","shouldGreyOut","isVisualized","document","addEventListener","e","dropDownMenu","getElementById","id","targetElement","target","parentNode","text","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;AASA,OAAO,MAAMC,OAA+B,GAAIC,KAAD,IAAW;AACxD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMK,WAA6B,GAAIC,KAAD,IAAW;AAC/C,QAAI,CAACJ,KAAK,CAACK,aAAP,IAAwB,CAACL,KAAK,CAACM,YAAnC,EAAiDJ,OAAO,CAAC,CAACD,IAAF,CAAP;AACjDM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAoCC,CAAD,IAAO;AACxC,YAAMC,YAAY,GAAGH,QAAQ,CAACI,cAAT,CAAwBX,KAAK,CAACY,EAA9B,CAArB;AACA,UAAIC,aAAa,GAAGJ,CAAC,CAACK,MAAtB;;AAEA,SAAG;AACD,YAAID,aAAa,KAAKH,YAAtB,EAAoC;AACpCG,QAAAA,aAAa,GAAGA,aAAa,CAACE,UAA9B;AACD,OAHD,QAGSF,aAHT;;AAIAX,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KATD;AAUD,GAZD;;AAcA,sBACE;AACE,IAAA,EAAE,EAAEF,KAAK,CAACY,EADZ;AAEE,IAAA,SAAS,EACP,cACCZ,KAAK,CAACK,aAAN,IAAuBL,KAAK,CAACM,YAA7B,GAA4C,aAA5C,GAA4D,EAD7D,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAG,IAAA,SAAS,EAAC,aAAb;AAA2B,IAAA,OAAO,EAAEH,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACgB,IADT,CAPF,EAUGf,IAAI,IAAID,KAAK,CAACiB,QAVjB,CADF;AAcD,CA/BM","sourcesContent":["import React, { useState } from \"react\";\nimport \"./NavBar.css\";\n\ninterface NavItemProps {\n  text: string;\n  id: string;\n  isVisualized: number;\n  shouldGreyOut: boolean;\n}\n\nexport const NavItem: React.FC<NavItemProps> = (props) => {\n  const [open, setOpen] = useState(false);\n\n  const handleClick: (e: any) => void = (event) => {\n    if (!props.shouldGreyOut || !props.isVisualized) setOpen(!open);\n    document.addEventListener(\"click\", (e) => {\n      const dropDownMenu = document.getElementById(props.id);\n      let targetElement = e.target as Element;\n\n      do {\n        if (targetElement === dropDownMenu) return;\n        targetElement = targetElement.parentNode as Element;\n      } while (targetElement);\n      setOpen(false);\n    });\n  };\n\n  return (\n    <li\n      id={props.id}\n      className={\n        \"nav-item\" +\n        (props.shouldGreyOut && props.isVisualized ? \" greyed-out\" : \"\")\n      }\n    >\n      <p className=\"icon-button\" onClick={handleClick}>\n        {props.text}\n      </p>\n      {open && props.children}\n    </li>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}